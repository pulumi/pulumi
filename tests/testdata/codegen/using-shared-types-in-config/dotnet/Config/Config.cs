// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Credentials
{
    public static class Config
    {
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly global::Pulumi.Config __config = new global::Pulumi.Config("credentials");

        private static readonly __Value<Pulumi.Credentials.HashKind?> _hash = new __Value<Pulumi.Credentials.HashKind?>(() => __config.GetObject<Pulumi.Credentials.HashKind>("hash"));
        /// <summary>
        /// The (entirely uncryptographic) hash function used to encode the "password".
        /// </summary>
        public static Pulumi.Credentials.HashKind? Hash
        {
            get => _hash.Get();
            set => _hash.Set(value);
        }

        private static readonly __Value<string?> _password = new __Value<string?>(() => __config.Get("password") ?? Utilities.GetEnv("FOO") ?? "");
        /// <summary>
        /// The password. It is very secret.
        /// </summary>
        public static string? Password
        {
            get => _password.Get();
            set => _password.Set(value);
        }

        private static readonly __Value<Types.Shared?> _shared = new __Value<Types.Shared?>(() => __config.GetObject<Types.Shared>("shared"));
        public static Types.Shared? Shared
        {
            get => _shared.Get();
            set => _shared.Set(value);
        }

        private static readonly __Value<string?> _user = new __Value<string?>(() => __config.Get("user"));
        /// <summary>
        /// The username. Its important but not secret.
        /// </summary>
        public static string? User
        {
            get => _user.Get();
            set => _user.Set(value);
        }

        public static class Types
        {

             public class Shared
             {
                public string? Foo { get; set; } = null!;
            }
        }
    }
}
