// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A non-overlay component resource.
type ConfigGroup struct {
	pulumi.ResourceState

	// Resources created by the ConfigGroup.
	Resources pulumi.ArrayOutput `pulumi:"resources"`
}

// NewConfigGroup registers a new resource with the given unique name, arguments, and options.
func NewConfigGroup(ctx *pulumi.Context,
	name string, args *ConfigGroupArgs, opts ...pulumi.ResourceOption) (*ConfigGroup, error) {
	if args == nil {
		args = &ConfigGroupArgs{}
	}

	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ConfigGroup
	err := ctx.RegisterRemoteComponentResource("kubernetes:yaml/v2:ConfigGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type configGroupArgs struct {
	// Set of paths or a URLs that uniquely identify files.
	Files interface{} `pulumi:"files"`
	// Objects representing Kubernetes resources.
	Objs interface{} `pulumi:"objs"`
	// An optional prefix for the auto-generated resource names. Example: A resource created with resourcePrefix="foo" would produce a resource named "foo-resourceName".
	ResourcePrefix *string `pulumi:"resourcePrefix"`
	// YAML text containing Kubernetes resource definitions.
	Yaml interface{} `pulumi:"yaml"`
}

// The set of arguments for constructing a ConfigGroup resource.
type ConfigGroupArgs struct {
	// Set of paths or a URLs that uniquely identify files.
	Files pulumi.Input
	// Objects representing Kubernetes resources.
	Objs pulumi.Input
	// An optional prefix for the auto-generated resource names. Example: A resource created with resourcePrefix="foo" would produce a resource named "foo-resourceName".
	ResourcePrefix pulumi.StringPtrInput
	// YAML text containing Kubernetes resource definitions.
	Yaml pulumi.Input
}

func (ConfigGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configGroupArgs)(nil)).Elem()
}

type ConfigGroupInput interface {
	pulumi.Input

	ToConfigGroupOutput() ConfigGroupOutput
	ToConfigGroupOutputWithContext(ctx context.Context) ConfigGroupOutput
}

func (*ConfigGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigGroup)(nil)).Elem()
}

func (i *ConfigGroup) ToConfigGroupOutput() ConfigGroupOutput {
	return i.ToConfigGroupOutputWithContext(context.Background())
}

func (i *ConfigGroup) ToConfigGroupOutputWithContext(ctx context.Context) ConfigGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigGroupOutput)
}

// ConfigGroupArrayInput is an input type that accepts ConfigGroupArray and ConfigGroupArrayOutput values.
// You can construct a concrete instance of `ConfigGroupArrayInput` via:
//
//	ConfigGroupArray{ ConfigGroupArgs{...} }
type ConfigGroupArrayInput interface {
	pulumi.Input

	ToConfigGroupArrayOutput() ConfigGroupArrayOutput
	ToConfigGroupArrayOutputWithContext(context.Context) ConfigGroupArrayOutput
}

type ConfigGroupArray []ConfigGroupInput

func (ConfigGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigGroup)(nil)).Elem()
}

func (i ConfigGroupArray) ToConfigGroupArrayOutput() ConfigGroupArrayOutput {
	return i.ToConfigGroupArrayOutputWithContext(context.Background())
}

func (i ConfigGroupArray) ToConfigGroupArrayOutputWithContext(ctx context.Context) ConfigGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigGroupArrayOutput)
}

// ConfigGroupMapInput is an input type that accepts ConfigGroupMap and ConfigGroupMapOutput values.
// You can construct a concrete instance of `ConfigGroupMapInput` via:
//
//	ConfigGroupMap{ "key": ConfigGroupArgs{...} }
type ConfigGroupMapInput interface {
	pulumi.Input

	ToConfigGroupMapOutput() ConfigGroupMapOutput
	ToConfigGroupMapOutputWithContext(context.Context) ConfigGroupMapOutput
}

type ConfigGroupMap map[string]ConfigGroupInput

func (ConfigGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigGroup)(nil)).Elem()
}

func (i ConfigGroupMap) ToConfigGroupMapOutput() ConfigGroupMapOutput {
	return i.ToConfigGroupMapOutputWithContext(context.Background())
}

func (i ConfigGroupMap) ToConfigGroupMapOutputWithContext(ctx context.Context) ConfigGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigGroupMapOutput)
}

type ConfigGroupOutput struct{ *pulumi.OutputState }

func (ConfigGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConfigGroup)(nil)).Elem()
}

func (o ConfigGroupOutput) ToConfigGroupOutput() ConfigGroupOutput {
	return o
}

func (o ConfigGroupOutput) ToConfigGroupOutputWithContext(ctx context.Context) ConfigGroupOutput {
	return o
}

// Resources created by the ConfigGroup.
func (o ConfigGroupOutput) Resources() pulumi.ArrayOutput {
	return o.ApplyT(func(v *ConfigGroup) pulumi.ArrayOutput { return v.Resources }).(pulumi.ArrayOutput)
}

type ConfigGroupArrayOutput struct{ *pulumi.OutputState }

func (ConfigGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConfigGroup)(nil)).Elem()
}

func (o ConfigGroupArrayOutput) ToConfigGroupArrayOutput() ConfigGroupArrayOutput {
	return o
}

func (o ConfigGroupArrayOutput) ToConfigGroupArrayOutputWithContext(ctx context.Context) ConfigGroupArrayOutput {
	return o
}

func (o ConfigGroupArrayOutput) Index(i pulumi.IntInput) ConfigGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConfigGroup {
		return vs[0].([]*ConfigGroup)[vs[1].(int)]
	}).(ConfigGroupOutput)
}

type ConfigGroupMapOutput struct{ *pulumi.OutputState }

func (ConfigGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConfigGroup)(nil)).Elem()
}

func (o ConfigGroupMapOutput) ToConfigGroupMapOutput() ConfigGroupMapOutput {
	return o
}

func (o ConfigGroupMapOutput) ToConfigGroupMapOutputWithContext(ctx context.Context) ConfigGroupMapOutput {
	return o
}

func (o ConfigGroupMapOutput) MapIndex(k pulumi.StringInput) ConfigGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConfigGroup {
		return vs[0].(map[string]*ConfigGroup)[vs[1].(string)]
	}).(ConfigGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigGroupInput)(nil)).Elem(), &ConfigGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigGroupArrayInput)(nil)).Elem(), ConfigGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigGroupMapInput)(nil)).Elem(), ConfigGroupMap{})
	pulumi.RegisterOutputType(ConfigGroupOutput{})
	pulumi.RegisterOutputType(ConfigGroupArrayOutput{})
	pulumi.RegisterOutputType(ConfigGroupMapOutput{})
}
