// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../../utilities";

// Export members:
export { ConfigMapArgs } from "./configMap";
export type ConfigMap = import("./configMap").ConfigMap;
export const ConfigMap: typeof import("./configMap").ConfigMap = null as any;
utilities.lazyLoad(exports, ["ConfigMap"], () => require("./configMap"));

export { ConfigMapListArgs } from "./configMapList";
export type ConfigMapList = import("./configMapList").ConfigMapList;
export const ConfigMapList: typeof import("./configMapList").ConfigMapList = null as any;
utilities.lazyLoad(exports, ["ConfigMapList"], () => require("./configMapList"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "kubernetes:core/v1:ConfigMap":
                return new ConfigMap(name, <any>undefined, { urn })
            case "kubernetes:core/v1:ConfigMapList":
                return new ConfigMapList(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("kubernetes", "core/v1", _module)
