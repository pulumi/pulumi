# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetConfigResult',
    'AwaitableGetConfigResult',
    'get_config',
    'get_config_output',
]

@pulumi.output_type
class GetConfigResult:
    def __init__(__self__, base64_encode=None, boundary=None, gzip=None, id=None, parts=None, rendered=None):
        if base64_encode and not isinstance(base64_encode, bool):
            raise TypeError("Expected argument 'base64_encode' to be a bool")
        pulumi.set(__self__, "base64_encode", base64_encode)
        if boundary and not isinstance(boundary, str):
            raise TypeError("Expected argument 'boundary' to be a str")
        pulumi.set(__self__, "boundary", boundary)
        if gzip and not isinstance(gzip, bool):
            raise TypeError("Expected argument 'gzip' to be a bool")
        pulumi.set(__self__, "gzip", gzip)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if parts and not isinstance(parts, list):
            raise TypeError("Expected argument 'parts' to be a list")
        pulumi.set(__self__, "parts", parts)
        if rendered and not isinstance(rendered, str):
            raise TypeError("Expected argument 'rendered' to be a str")
        pulumi.set(__self__, "rendered", rendered)

    @property
    @pulumi.getter(name="base64Encode")
    def base64_encode(self) -> bool:
        return pulumi.get(self, "base64_encode")

    @property
    @pulumi.getter
    def boundary(self) -> str:
        return pulumi.get(self, "boundary")

    @property
    @pulumi.getter
    def gzip(self) -> bool:
        return pulumi.get(self, "gzip")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def parts(self) -> Optional[Sequence['outputs.GetConfigPartResult']]:
        return pulumi.get(self, "parts")

    @property
    @pulumi.getter
    def rendered(self) -> str:
        return pulumi.get(self, "rendered")


class AwaitableGetConfigResult(GetConfigResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetConfigResult(
            base64_encode=self.base64_encode,
            boundary=self.boundary,
            gzip=self.gzip,
            id=self.id,
            parts=self.parts,
            rendered=self.rendered)


def get_config(base64_encode: Optional[bool] = None,
               boundary: Optional[str] = None,
               gzip: Optional[bool] = None,
               parts: Optional[Sequence[Union['GetConfigPartArgs', 'GetConfigPartArgsDict']]] = None,
               opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetConfigResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['base64Encode'] = base64_encode
    __args__['boundary'] = boundary
    __args__['gzip'] = gzip
    __args__['parts'] = parts
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('cloudinit:index/getConfig:getConfig', __args__, opts=opts, typ=GetConfigResult).value

    return AwaitableGetConfigResult(
        base64_encode=pulumi.get(__ret__, 'base64_encode'),
        boundary=pulumi.get(__ret__, 'boundary'),
        gzip=pulumi.get(__ret__, 'gzip'),
        id=pulumi.get(__ret__, 'id'),
        parts=pulumi.get(__ret__, 'parts'),
        rendered=pulumi.get(__ret__, 'rendered'))
def get_config_output(base64_encode: Optional[pulumi.Input[Optional[bool]]] = None,
                      boundary: Optional[pulumi.Input[Optional[str]]] = None,
                      gzip: Optional[pulumi.Input[Optional[bool]]] = None,
                      parts: Optional[pulumi.Input[Optional[Sequence[Union['GetConfigPartArgs', 'GetConfigPartArgsDict']]]]] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetConfigResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['base64Encode'] = base64_encode
    __args__['boundary'] = boundary
    __args__['gzip'] = gzip
    __args__['parts'] = parts
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('cloudinit:index/getConfig:getConfig', __args__, opts=opts, typ=GetConfigResult)
    return __ret__.apply(lambda __response__: GetConfigResult(
        base64_encode=pulumi.get(__response__, 'base64_encode'),
        boundary=pulumi.get(__response__, 'boundary'),
        gzip=pulumi.get(__response__, 'gzip'),
        id=pulumi.get(__response__, 'id'),
        parts=pulumi.get(__response__, 'parts'),
        rendered=pulumi.get(__response__, 'rendered')))
