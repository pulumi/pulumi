# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'ConfigPartArgs',
    'ConfigPartArgsDict',
    'GetConfigPartArgs',
    'GetConfigPartArgsDict',
]

MYPY = False

if not MYPY:
    class ConfigPartArgsDict(TypedDict):
        content: pulumi.Input[_builtins.str]
        content_type: NotRequired[pulumi.Input[_builtins.str]]
        filename: NotRequired[pulumi.Input[_builtins.str]]
        merge_type: NotRequired[pulumi.Input[_builtins.str]]
elif False:
    ConfigPartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ConfigPartArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[_builtins.str],
                 content_type: Optional[pulumi.Input[_builtins.str]] = None,
                 filename: Optional[pulumi.Input[_builtins.str]] = None,
                 merge_type: Optional[pulumi.Input[_builtins.str]] = None):
        pulumi.set(__self__, "content", content)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if merge_type is not None:
            pulumi.set(__self__, "merge_type", merge_type)

    @_builtins.property
    @pulumi.getter
    def content(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "content_type", value)

    @_builtins.property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "filename", value)

    @_builtins.property
    @pulumi.getter(name="mergeType")
    def merge_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "merge_type")

    @merge_type.setter
    def merge_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "merge_type", value)


if not MYPY:
    class GetConfigPartArgsDict(TypedDict):
        content: _builtins.str
        content_type: NotRequired[_builtins.str]
        filename: NotRequired[_builtins.str]
        merge_type: NotRequired[_builtins.str]
elif False:
    GetConfigPartArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class GetConfigPartArgs:
    def __init__(__self__, *,
                 content: _builtins.str,
                 content_type: Optional[_builtins.str] = None,
                 filename: Optional[_builtins.str] = None,
                 merge_type: Optional[_builtins.str] = None):
        pulumi.set(__self__, "content", content)
        if content_type is None:
            content_type = 'text/plain'
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)
        if merge_type is not None:
            pulumi.set(__self__, "merge_type", merge_type)

    @_builtins.property
    @pulumi.getter
    def content(self) -> _builtins.str:
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: _builtins.str):
        pulumi.set(self, "content", value)

    @_builtins.property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[_builtins.str]):
        pulumi.set(self, "content_type", value)

    @_builtins.property
    @pulumi.getter
    def filename(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[_builtins.str]):
        pulumi.set(self, "filename", value)

    @_builtins.property
    @pulumi.getter(name="mergeType")
    def merge_type(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "merge_type")

    @merge_type.setter
    def merge_type(self, value: Optional[_builtins.str]):
        pulumi.set(self, "merge_type", value)


