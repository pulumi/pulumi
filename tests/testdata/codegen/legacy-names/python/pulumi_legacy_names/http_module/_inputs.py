# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'RequestArgs',
    'RequestArgsDict',
]

MYPY = False

if not MYPY:
    class RequestArgsDict(TypedDict):
        url: NotRequired[pulumi.Input[str]]
        content_body: NotRequired[pulumi.Input[str]]
elif False:
    RequestArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class RequestArgs:
    def __init__(__self__, *,
                 url: Optional[pulumi.Input[str]] = None,
                 content_body: Optional[pulumi.Input[str]] = None):
        if url is not None:
            pulumi.set(__self__, "url", url)
        if content_body is not None:
            pulumi.set(__self__, "content_body", content_body)

    @property
    @pulumi.getter(name="URL")
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def content_body(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_body")

    @content_body.setter
    def content_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_body", value)


