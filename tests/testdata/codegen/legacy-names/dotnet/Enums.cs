// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Legacy_names
{
    [EnumType]
    public readonly struct Enum_XYZ : IEquatable<Enum_XYZ>
    {
        private readonly string _value;

        private Enum_XYZ(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Enum_XYZ Plain { get; } = new Enum_XYZ("A");
        public static Enum_XYZ Snake_case { get; } = new Enum_XYZ("B");
        public static Enum_XYZ SHA256 { get; } = new Enum_XYZ("C");
        public static Enum_XYZ SHA256_hash { get; } = new Enum_XYZ("D");

        public static bool operator ==(Enum_XYZ left, Enum_XYZ right) => left.Equals(right);
        public static bool operator !=(Enum_XYZ left, Enum_XYZ right) => !left.Equals(right);

        public static explicit operator string(Enum_XYZ value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Enum_XYZ other && Equals(other);
        public bool Equals(Enum_XYZ other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
