// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package legacy_names

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"legacy-names/legacy_names/internal"
)

var _ = internal.GetEnvOrDefault

type Enum_XYZMapArray []Enum_XYZMapInput

func (Enum_XYZMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]map[string]Enum_XYZ)(nil)).Elem()
}

func (i Enum_XYZMapArray) ToEnum_XYZMapArrayOutput() Enum_XYZMapArrayOutput {
	return i.ToEnum_XYZMapArrayOutputWithContext(context.Background())
}

func (i Enum_XYZMapArray) ToEnum_XYZMapArrayOutputWithContext(ctx context.Context) Enum_XYZMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Enum_XYZMapArrayOutput)
}

// Enum_XYZMapArrayInput is an input type that accepts Enum_XYZMapArray and Enum_XYZMapArrayOutput values.
// You can construct a concrete instance of `Enum_XYZMapArrayInput` via:
//
//	Enum_XYZMapArray{ Enum_XYZMap{ "key": Enum_XYZArgs{...} } }
type Enum_XYZMapArrayInput interface {
	pulumi.Input

	ToEnum_XYZMapArrayOutput() Enum_XYZMapArrayOutput
	ToEnum_XYZMapArrayOutputWithContext(context.Context) Enum_XYZMapArrayOutput
}

type Enum_XYZMapArrayOutput struct{ *pulumi.OutputState }

func (Enum_XYZMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]map[string]Enum_XYZ)(nil)).Elem()
}

func (o Enum_XYZMapArrayOutput) ToEnum_XYZMapArrayOutput() Enum_XYZMapArrayOutput {
	return o
}

func (o Enum_XYZMapArrayOutput) ToEnum_XYZMapArrayOutputWithContext(ctx context.Context) Enum_XYZMapArrayOutput {
	return o
}

func (o Enum_XYZMapArrayOutput) Index(i pulumi.IntInput) Enum_XYZMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) map[string]Enum_XYZ {
		return vs[0].([]map[string]Enum_XYZ)[vs[1].(int)]
	}).(Enum_XYZMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Enum_XYZMapArrayInput)(nil)).Elem(), Enum_XYZMapArray{})
	pulumi.RegisterOutputType(Enum_XYZMapArrayOutput{})
}
