# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from ._enums import *

__all__ = [
    'Container',
]

@pulumi.output_type
class Container(dict):
    def __init__(__self__, *,
                 size: Optional['ContainerSize'] = None,
                 brightness: Optional['ContainerBrightness'] = None,
                 color: Optional[_builtins.str] = None,
                 material: Optional[_builtins.str] = None):
        if size is None:
            size = 4
        pulumi.set(__self__, "size", size)
        if brightness is None:
            brightness = 1
        if brightness is not None:
            pulumi.set(__self__, "brightness", brightness)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if material is not None:
            pulumi.set(__self__, "material", material)

    @_builtins.property
    @pulumi.getter
    def size(self) -> 'ContainerSize':
        return pulumi.get(self, "size")

    @_builtins.property
    @pulumi.getter
    def brightness(self) -> Optional['ContainerBrightness']:
        return pulumi.get(self, "brightness")

    @_builtins.property
    @pulumi.getter
    def color(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "color")

    @_builtins.property
    @pulumi.getter
    def material(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "material")


