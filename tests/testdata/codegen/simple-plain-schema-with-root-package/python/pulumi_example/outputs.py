# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'Foo',
]

@pulumi.output_type
class Foo(dict):
    def __init__(__self__, *,
                 a: _builtins.bool,
                 c: _builtins.int,
                 e: _builtins.str,
                 b: Optional[_builtins.bool] = None,
                 d: Optional[_builtins.int] = None,
                 f: Optional[_builtins.str] = None):
        pulumi.set(__self__, "a", a)
        pulumi.set(__self__, "c", c)
        pulumi.set(__self__, "e", e)
        if b is not None:
            pulumi.set(__self__, "b", b)
        if d is not None:
            pulumi.set(__self__, "d", d)
        if f is not None:
            pulumi.set(__self__, "f", f)

    @_builtins.property
    @pulumi.getter
    def a(self) -> _builtins.bool:
        return pulumi.get(self, "a")

    @_builtins.property
    @pulumi.getter
    def c(self) -> _builtins.int:
        return pulumi.get(self, "c")

    @_builtins.property
    @pulumi.getter
    def e(self) -> _builtins.str:
        return pulumi.get(self, "e")

    @_builtins.property
    @pulumi.getter
    def b(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "b")

    @_builtins.property
    @pulumi.getter
    def d(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "d")

    @_builtins.property
    @pulumi.getter
    def f(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "f")


