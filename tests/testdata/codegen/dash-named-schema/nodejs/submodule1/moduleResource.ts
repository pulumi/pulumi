// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export class ModuleResource extends pulumi.CustomResource {
    /**
     * Get an existing ModuleResource resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): ModuleResource {
        return new ModuleResource(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'foo-bar:submodule1:ModuleResource';

    /**
     * Returns true if the given object is an instance of ModuleResource.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ModuleResource {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ModuleResource.__pulumiType;
    }

    public /*out*/ readonly ["dashed-output"]!: pulumi.Output<string | undefined>;
    public /*out*/ readonly ["dashed-secret-output"]!: pulumi.Output<string | undefined>;
    public readonly thing!: pulumi.Output<outputs.TopLevel | undefined>;

    /**
     * Create a ModuleResource resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ModuleResourceArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["dashed-input"] = args ? args["dashed-input"] : undefined;
            resourceInputs["dashed-secret-input"] = args?.["dashed-secret-input"] ? pulumi.secret(args["dashed-secret-input"]) : undefined;
            resourceInputs["thing"] = args ? args.thing : undefined;
            resourceInputs["dashed-output"] = undefined /*out*/;
            resourceInputs["dashed-secret-output"] = undefined /*out*/;
        } else {
            resourceInputs["dashed-output"] = undefined /*out*/;
            resourceInputs["dashed-secret-output"] = undefined /*out*/;
            resourceInputs["thing"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["dashed-secret-output"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ModuleResource.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a ModuleResource resource.
 */
export interface ModuleResourceArgs {
    ["dashed-input"]?: pulumi.Input<string>;
    ["dashed-secret-input"]?: pulumi.Input<string>;
    thing?: pulumi.Input<inputs.TopLevelArgs>;
}
