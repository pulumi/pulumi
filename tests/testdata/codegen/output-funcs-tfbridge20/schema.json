{
  "name": "mypkg",
  "version": "0.0.1",
  "functions": {
    "mypkg::listStorageAccountKeys": {
      "description": "The response from the ListKeys operation.\nAPI Version: 2021-02-01.",
      "inputs": {
        "properties": {
          "accountName": {
            "type": "string",
            "description": "The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only."
          },
          "expand": {
            "type": "string",
            "description": "Specifies type of the key to be listed. Possible value is kerb."
          },
          "resourceGroupName": {
            "type": "string",
            "description": "The name of the resource group within the user's subscription. The name is case insensitive."
          }
        },
        "type": "object",
        "required": [
          "accountName",
          "resourceGroupName"
        ]
      },
      "outputs": {
        "description": "The response from the ListKeys operation.",
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "type": "object",
              "$ref": "#/types/mypkg::StorageAccountKeyResponse"
            },
            "description": "Gets the list of storage account keys and their properties for the specified storage account."
          }
        },
        "type": "object",
        "required": [
          "keys"
        ]
      }
    },
    "mypkg::getAmiIds": {
      "description": "Taken from pulumi-AWS to regress an issue",
      "inputs": {
        "description": "A collection of arguments for invoking getAmiIds.\n",
        "properties": {
          "executableUsers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Limit search to users with *explicit* launch\npermission on  the image. Valid items are the numeric account ID or `self`.\n"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/mypkg::getAmiIdsFilter"
            },
            "description": "One or more name/value pairs to filter off of. There\nare several valid keys, for a full reference, check out\n[describe-images in the AWS CLI reference][1].\n"
          },
          "nameRegex": {
            "type": "string",
            "description": "A regex string to apply to the AMI list returned\nby AWS. This allows more advanced filtering not supported from the AWS API.\nThis filtering is done locally on what AWS returns, and could have a performance\nimpact if the result is large. It is recommended to combine this with other\noptions to narrow down the list AWS returns.\n"
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of AMI owners to limit search. At least 1 value must be specified. Valid values: an AWS account ID, `self` (the current account), or an AWS owner alias (e.g. `amazon`, `aws-marketplace`, `microsoft`).\n"
          },
          "sortAscending": {
            "type": "boolean",
            "description": "Used to sort AMIs by creation time.\n"
          }
        },
        "type": "object",
        "required": [
          "owners"
        ]
      },
      "outputs": {
        "description": "A collection of values returned by getAmiIds.\n",
        "properties": {
          "executableUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/types/mypkg::getAmiIdsFilter"
            }
          },
          "id": {
            "type": "string",
            "description": "The provider-assigned unique ID for this managed resource.\n"
          },
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "nameRegex": {
            "type": "string"
          },
          "owners": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sortAscending": {
            "type": "boolean"
          }
        },
        "type": "object",
        "required": [
          "ids",
          "owners",
          "id"
        ]
      },
      "deprecationMessage": "aws.getAmiIds has been deprecated in favor of aws.ec2.getAmiIds"
    }
  },
  "types": {
    "mypkg::getAmiIdsFilter": {
      "properties": {
        "name": {
          "type": "string",
          "language": {
            "python": {
              "mapCase": false
            }
          }
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "language": {
            "python": {
              "mapCase": false
            }
          }
        }
      },
      "type": "object",
      "required": [
        "name",
        "values"
      ]
    },
    "mypkg::StorageAccountKeyResponse": {
      "description": "An access key for the storage account.",
      "properties": {
        "creationTime": {
          "type": "string",
          "description": "Creation time of the key, in round trip date format."
        },
        "keyName": {
          "type": "string",
          "description": "Name of the key."
        },
        "permissions": {
          "type": "string",
          "description": "Permissions for the key -- read-only or full permissions."
        },
        "value": {
          "type": "string",
          "description": "Base 64-encoded value of the key."
        }
      },
      "type": "object",
      "required": [
        "creationTime",
        "keyName",
        "permissions",
        "value"
      ]
    }
  },
  "language": {
    "nodejs": {
      "compatibility": "tfbridge20",
      "devDependencies": {
        "@types/mocha": "latest",
        "@types/node": "ts4.3",
        "mocha": "latest",
        "ts-node": "latest"
      },
      "extraTypeScriptFiles": [
        "tests/codegen.spec.ts"
      ]
    },
    "python": {
      "compatibility": "tfbridge20"
    },
    "csharp": {
      "compatibility": "tfbridge20",
      "packageReferences": {
        "FluentAssertions": "5.10.2",
        "Microsoft.NET.Test.Sdk": "16.5.0",
        "Moq": "4.13.1",
        "NUnit": "3.12.0",
        "NUnit3TestAdapter": "4.2.1"
      }
    },
    "go": {
      "generateExtraInputTypes": true,
      "importBasePath": "output-funcs-tfbridge20/mypkg"
    }
  }
}
