# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'SandwichArgs',
    'SandwichArgsDict',
]

MYPY = False

if not MYPY:
    class SandwichArgsDict(TypedDict):
        bread: NotRequired[pulumi.Input[_builtins.str]]
        veggies: NotRequired[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]
elif False:
    SandwichArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class SandwichArgs:
    def __init__(__self__, *,
                 bread: Optional[pulumi.Input[_builtins.str]] = None,
                 veggies: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]] = None):
        if bread is not None:
            pulumi.set(__self__, "bread", bread)
        if veggies is not None:
            pulumi.set(__self__, "veggies", veggies)

    @_builtins.property
    @pulumi.getter
    def bread(self) -> Optional[pulumi.Input[_builtins.str]]:
        return pulumi.get(self, "bread")

    @bread.setter
    def bread(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "bread", value)

    @_builtins.property
    @pulumi.getter
    def veggies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]:
        return pulumi.get(self, "veggies")

    @veggies.setter
    def veggies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[_builtins.str]]]]):
        pulumi.set(self, "veggies", value)


