# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'TypArgs',
    'TypArgsDict',
]

MYPY = False

if not MYPY:
    class TypArgsDict(TypedDict):
        """
        A test for namespaces (mod 1)
        """
        val: NotRequired[pulumi.Input[str]]
elif False:
    TypArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TypArgs:
    def __init__(__self__, *,
                 val: Optional[pulumi.Input[str]] = None):
        """
        A test for namespaces (mod 1)
        """
        if val is None:
            val = (_utilities.get_env('PULUMI_EXAMPLE_MOD1_DEFAULT') or 'mod1')
        if val is not None:
            pulumi.set(__self__, "val", val)

    @property
    @pulumi.getter
    def val(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "val")

    @val.setter
    def val(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "val", value)


