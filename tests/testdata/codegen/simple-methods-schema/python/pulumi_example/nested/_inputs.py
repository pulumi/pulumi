# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

__all__ = [
    'Baz',
    'BazDict',
]

MYPY = False

if not MYPY:
    class BazDict(TypedDict):
        hello: NotRequired[builtins.str]
        world: NotRequired[builtins.str]
elif False:
    BazDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Baz:
    def __init__(__self__, *,
                 hello: Optional[builtins.str] = None,
                 world: Optional[builtins.str] = None):
        if hello is not None:
            pulumi.set(__self__, "hello", hello)
        if world is not None:
            pulumi.set(__self__, "world", world)

    @property
    @pulumi.getter
    def hello(self) -> Optional[builtins.str]:
        return pulumi.get(self, "hello")

    @hello.setter
    def hello(self, value: Optional[builtins.str]):
        pulumi.set(self, "hello", value)

    @property
    @pulumi.getter
    def world(self) -> Optional[builtins.str]:
        return pulumi.get(self, "world")

    @world.setter
    def world(self, value: Optional[builtins.str]):
        pulumi.set(self, "world", value)


