// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package metaprovider

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-tls/sdk/v4/go/tls"
	"github.com/pulumi/pulumi/pkg/codegen/testing/test/testdata/methods-return-plain-resource/go/metaprovider/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Configurer struct {
	pulumi.ResourceState
}

// NewConfigurer registers a new resource with the given unique name, arguments, and options.
func NewConfigurer(ctx *pulumi.Context,
	name string, args *ConfigurerArgs, opts ...pulumi.ResourceOption) (*Configurer, error) {
	if args == nil {
		args = &ConfigurerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Configurer
	err := ctx.RegisterRemoteComponentResource("metaprovider:index:Configurer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type configurerArgs struct {
	TlsProxy *string `pulumi:"tlsProxy"`
}

// The set of arguments for constructing a Configurer resource.
type ConfigurerArgs struct {
	TlsProxy pulumi.StringPtrInput
}

func (ConfigurerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*configurerArgs)(nil)).Elem()
}

func (r *Configurer) MeaningOfLife(ctx *pulumi.Context) (o int, e error) {
	internal.CallPlain(ctx, "metaprovider:index:Configurer/meaningOfLife", nil, ConfigurerMeaningOfLifeResultOutput{}, r, "Res", reflect.ValueOf(&o), &e)
	return
}

type ConfigurerMeaningOfLifeResult struct {
	Res int `pulumi:"res"`
}

type ConfigurerMeaningOfLifeResultOutput struct{ *pulumi.OutputState }

func (ConfigurerMeaningOfLifeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurerMeaningOfLifeResult)(nil)).Elem()
}

func (o ConfigurerMeaningOfLifeResultOutput) Res() pulumi.IntOutput {
	return o.ApplyT(func(v ConfigurerMeaningOfLifeResult) int { return v.Res }).(pulumi.IntOutput)
}

func (r *Configurer) ObjectMix(ctx *pulumi.Context) (o ConfigurerObjectMixResult, e error) {
	internal.CallPlain(ctx, "metaprovider:index:Configurer/objectMix", nil, ConfigurerObjectMixResultOutput{}, r, "", reflect.ValueOf(&o), &e)
	return
}

type ConfigurerObjectMixResult struct {
	MeaningOfLife *int          `pulumi:"meaningOfLife"`
	Provider      *tls.Provider `pulumi:"provider"`
}

type ConfigurerObjectMixResultOutput struct{ *pulumi.OutputState }

func (ConfigurerObjectMixResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurerObjectMixResult)(nil)).Elem()
}

func (o ConfigurerObjectMixResultOutput) MeaningOfLife() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ConfigurerObjectMixResult) *int { return v.MeaningOfLife }).(pulumi.IntPtrOutput)
}

func (o ConfigurerObjectMixResultOutput) Provider() tls.ProviderOutput {
	return o.ApplyT(func(v ConfigurerObjectMixResult) *tls.Provider { return v.Provider }).(tls.ProviderOutput)
}

func (r *Configurer) TlsProvider(ctx *pulumi.Context) (o *tls.Provider, e error) {
	internal.CallPlain(ctx, "metaprovider:index:Configurer/tlsProvider", nil, ConfigurerTlsProviderResultOutput{}, r, "Res", reflect.ValueOf(&o), &e)
	return
}

type ConfigurerTlsProviderResult struct {
	Res *tls.Provider `pulumi:"res"`
}

type ConfigurerTlsProviderResultOutput struct{ *pulumi.OutputState }

func (ConfigurerTlsProviderResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConfigurerTlsProviderResult)(nil)).Elem()
}

func (o ConfigurerTlsProviderResultOutput) Res() tls.ProviderOutput {
	return o.ApplyT(func(v ConfigurerTlsProviderResult) *tls.Provider { return v.Res }).(tls.ProviderOutput)
}

type ConfigurerInput interface {
	pulumi.Input

	ToConfigurerOutput() ConfigurerOutput
	ToConfigurerOutputWithContext(ctx context.Context) ConfigurerOutput
}

func (*Configurer) ElementType() reflect.Type {
	return reflect.TypeOf((**Configurer)(nil)).Elem()
}

func (i *Configurer) ToConfigurerOutput() ConfigurerOutput {
	return i.ToConfigurerOutputWithContext(context.Background())
}

func (i *Configurer) ToConfigurerOutputWithContext(ctx context.Context) ConfigurerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConfigurerOutput)
}

type ConfigurerOutput struct{ *pulumi.OutputState }

func (ConfigurerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Configurer)(nil)).Elem()
}

func (o ConfigurerOutput) ToConfigurerOutput() ConfigurerOutput {
	return o
}

func (o ConfigurerOutput) ToConfigurerOutputWithContext(ctx context.Context) ConfigurerOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConfigurerInput)(nil)).Elem(), &Configurer{})
	pulumi.RegisterOutputType(ConfigurerOutput{})
	pulumi.RegisterOutputType(ConfigurerObjectMixResultOutput{})
}
