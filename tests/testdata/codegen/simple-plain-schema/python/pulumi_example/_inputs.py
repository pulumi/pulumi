# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'Foo',
    'FooDict',
    'FooArgs',
    'FooArgsDict',
]

MYPY = False

if not MYPY:
    class FooDict(TypedDict):
        a: _builtins.bool
        c: _builtins.int
        e: _builtins.str
        b: NotRequired[_builtins.bool]
        d: NotRequired[_builtins.int]
        f: NotRequired[_builtins.str]
elif False:
    FooDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Foo:
    def __init__(__self__, *,
                 a: _builtins.bool,
                 c: _builtins.int,
                 e: _builtins.str,
                 b: Optional[_builtins.bool] = None,
                 d: Optional[_builtins.int] = None,
                 f: Optional[_builtins.str] = None):
        pulumi.set(__self__, "a", a)
        pulumi.set(__self__, "c", c)
        pulumi.set(__self__, "e", e)
        if b is not None:
            pulumi.set(__self__, "b", b)
        if d is not None:
            pulumi.set(__self__, "d", d)
        if f is not None:
            pulumi.set(__self__, "f", f)

    @_builtins.property
    @pulumi.getter
    def a(self) -> _builtins.bool:
        return pulumi.get(self, "a")

    @a.setter
    def a(self, value: _builtins.bool):
        pulumi.set(self, "a", value)

    @_builtins.property
    @pulumi.getter
    def c(self) -> _builtins.int:
        return pulumi.get(self, "c")

    @c.setter
    def c(self, value: _builtins.int):
        pulumi.set(self, "c", value)

    @_builtins.property
    @pulumi.getter
    def e(self) -> _builtins.str:
        return pulumi.get(self, "e")

    @e.setter
    def e(self, value: _builtins.str):
        pulumi.set(self, "e", value)

    @_builtins.property
    @pulumi.getter
    def b(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "b")

    @b.setter
    def b(self, value: Optional[_builtins.bool]):
        pulumi.set(self, "b", value)

    @_builtins.property
    @pulumi.getter
    def d(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "d")

    @d.setter
    def d(self, value: Optional[_builtins.int]):
        pulumi.set(self, "d", value)

    @_builtins.property
    @pulumi.getter
    def f(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "f")

    @f.setter
    def f(self, value: Optional[_builtins.str]):
        pulumi.set(self, "f", value)


if not MYPY:
    class FooArgsDict(TypedDict):
        a: _builtins.bool
        c: _builtins.int
        e: _builtins.str
        b: NotRequired[_builtins.bool]
        d: NotRequired[_builtins.int]
        f: NotRequired[_builtins.str]
elif False:
    FooArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class FooArgs:
    def __init__(__self__, *,
                 a: _builtins.bool,
                 c: _builtins.int,
                 e: _builtins.str,
                 b: Optional[_builtins.bool] = None,
                 d: Optional[_builtins.int] = None,
                 f: Optional[_builtins.str] = None):
        pulumi.set(__self__, "a", a)
        pulumi.set(__self__, "c", c)
        pulumi.set(__self__, "e", e)
        if b is not None:
            pulumi.set(__self__, "b", b)
        if d is not None:
            pulumi.set(__self__, "d", d)
        if f is not None:
            pulumi.set(__self__, "f", f)

    @_builtins.property
    @pulumi.getter
    def a(self) -> _builtins.bool:
        return pulumi.get(self, "a")

    @a.setter
    def a(self, value: _builtins.bool):
        pulumi.set(self, "a", value)

    @_builtins.property
    @pulumi.getter
    def c(self) -> _builtins.int:
        return pulumi.get(self, "c")

    @c.setter
    def c(self, value: _builtins.int):
        pulumi.set(self, "c", value)

    @_builtins.property
    @pulumi.getter
    def e(self) -> _builtins.str:
        return pulumi.get(self, "e")

    @e.setter
    def e(self, value: _builtins.str):
        pulumi.set(self, "e", value)

    @_builtins.property
    @pulumi.getter
    def b(self) -> Optional[_builtins.bool]:
        return pulumi.get(self, "b")

    @b.setter
    def b(self, value: Optional[_builtins.bool]):
        pulumi.set(self, "b", value)

    @_builtins.property
    @pulumi.getter
    def d(self) -> Optional[_builtins.int]:
        return pulumi.get(self, "d")

    @d.setter
    def d(self, value: Optional[_builtins.int]):
        pulumi.set(self, "d", value)

    @_builtins.property
    @pulumi.getter
    def f(self) -> Optional[_builtins.str]:
        return pulumi.get(self, "f")

    @f.setter
    def f(self, value: Optional[_builtins.str]):
        pulumi.set(self, "f", value)


