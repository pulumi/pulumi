# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from ._enums import *

__all__ = [
    'ContainerArgs',
    'ContainerArgsDict',
]

MYPY = False

if not MYPY:
    class ContainerArgsDict(TypedDict):
        size: pulumi.Input['ContainerSize']
        brightness: NotRequired[pulumi.Input[NotRequired['ContainerBrightness']]]
        color: NotRequired[pulumi.Input[NotRequired[Union[pulumi.Input['ContainerColor'], pulumi.Input[builtins.str]]]]]
        material: NotRequired[pulumi.Input[NotRequired[builtins.str]]]
elif False:
    ContainerArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class ContainerArgs:
    def __init__(__self__, *,
                 size: pulumi.Input['ContainerSize'],
                 brightness: Optional[pulumi.Input[Optional['ContainerBrightness']]] = None,
                 color: Optional[pulumi.Input[Optional[Union[pulumi.Input['ContainerColor'], pulumi.Input[builtins.str]]]]] = None,
                 material: Optional[pulumi.Input[Optional[builtins.str]]] = None):
        pulumi.set(__self__, "size", size)
        if brightness is None:
            brightness = 1
        if brightness is not None:
            pulumi.set(__self__, "brightness", brightness)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if material is not None:
            pulumi.set(__self__, "material", material)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input['ContainerSize']:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input['ContainerSize']):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter
    def brightness(self) -> Optional[pulumi.Input[Optional['ContainerBrightness']]]:
        return pulumi.get(self, "brightness")

    @brightness.setter
    def brightness(self, value: Optional[pulumi.Input[Optional['ContainerBrightness']]]):
        pulumi.set(self, "brightness", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[Optional[Union[pulumi.Input['ContainerColor'], pulumi.Input[builtins.str]]]]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[Optional[Union[pulumi.Input['ContainerColor'], pulumi.Input[builtins.str]]]]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def material(self) -> Optional[pulumi.Input[Optional[builtins.str]]]:
        return pulumi.get(self, "material")

    @material.setter
    def material(self, value: Optional[pulumi.Input[Optional[builtins.str]]]):
        pulumi.set(self, "material", value)


