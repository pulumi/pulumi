// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package pkg

import (
	"context"
	"reflect"

	"example.com/pulumi-pkg/sdk/go/pkg/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A test resource fails on delete.
type FailsOnDelete struct {
	pulumi.CustomResourceState
}

// NewFailsOnDelete registers a new resource with the given unique name, arguments, and options.
func NewFailsOnDelete(ctx *pulumi.Context,
	name string, args *FailsOnDeleteArgs, opts ...pulumi.ResourceOption) (*FailsOnDelete, error) {
	if args == nil {
		args = &FailsOnDeleteArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource FailsOnDelete
	err = ctx.RegisterPackageResource("pkg:index:FailsOnDelete", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFailsOnDelete gets an existing FailsOnDelete resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFailsOnDelete(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FailsOnDeleteState, opts ...pulumi.ResourceOption) (*FailsOnDelete, error) {
	var resource FailsOnDelete
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("pkg:index:FailsOnDelete", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FailsOnDelete resources.
type failsOnDeleteState struct {
}

type FailsOnDeleteState struct {
}

func (FailsOnDeleteState) ElementType() reflect.Type {
	return reflect.TypeOf((*failsOnDeleteState)(nil)).Elem()
}

type failsOnDeleteArgs struct {
}

// The set of arguments for constructing a FailsOnDelete resource.
type FailsOnDeleteArgs struct {
}

func (FailsOnDeleteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*failsOnDeleteArgs)(nil)).Elem()
}

type FailsOnDeleteInput interface {
	pulumi.Input

	ToFailsOnDeleteOutput() FailsOnDeleteOutput
	ToFailsOnDeleteOutputWithContext(ctx context.Context) FailsOnDeleteOutput
}

func (*FailsOnDelete) ElementType() reflect.Type {
	return reflect.TypeOf((**FailsOnDelete)(nil)).Elem()
}

func (i *FailsOnDelete) ToFailsOnDeleteOutput() FailsOnDeleteOutput {
	return i.ToFailsOnDeleteOutputWithContext(context.Background())
}

func (i *FailsOnDelete) ToFailsOnDeleteOutputWithContext(ctx context.Context) FailsOnDeleteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FailsOnDeleteOutput)
}

type FailsOnDeleteOutput struct{ *pulumi.OutputState }

func (FailsOnDeleteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FailsOnDelete)(nil)).Elem()
}

func (o FailsOnDeleteOutput) ToFailsOnDeleteOutput() FailsOnDeleteOutput {
	return o
}

func (o FailsOnDeleteOutput) ToFailsOnDeleteOutputWithContext(ctx context.Context) FailsOnDeleteOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FailsOnDeleteInput)(nil)).Elem(), &FailsOnDelete{})
	pulumi.RegisterOutputType(FailsOnDeleteOutput{})
}
