# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'DoEchoResult',
    'AwaitableDoEchoResult',
    'do_echo',
    'do_echo_output',
]

@pulumi.output_type
class DoEchoResult:
    def __init__(__self__, echo=None):
        if echo and not isinstance(echo, str):
            raise TypeError("Expected argument 'echo' to be a str")
        pulumi.set(__self__, "echo", echo)

    @property
    @pulumi.getter
    def echo(self) -> Optional[str]:
        return pulumi.get(self, "echo")


class AwaitableDoEchoResult(DoEchoResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return DoEchoResult(
            echo=self.echo)


def do_echo(echo: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableDoEchoResult:
    """
    A test invoke that echoes its input.
    """
    __args__ = dict()
    __args__['echo'] = echo
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('pkg:index:doEcho', __args__, opts=opts, typ=DoEchoResult, package_ref=_utilities.get_package()).value

    return AwaitableDoEchoResult(
        echo=pulumi.get(__ret__, 'echo'))


@_utilities.lift_output_func(do_echo)
def do_echo_output(echo: Optional[pulumi.Input[Optional[str]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[DoEchoResult]:
    """
    A test invoke that echoes its input.
    """
    ...
