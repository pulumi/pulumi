// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DoEchoArgs, DoEchoResult, DoEchoOutputArgs } from "./doEcho";
export const doEcho: typeof import("./doEcho").doEcho = null as any;
export const doEchoOutput: typeof import("./doEcho").doEchoOutput = null as any;
utilities.lazyLoad(exports, ["doEcho","doEchoOutput"], () => require("./doEcho"));

export { DoMultiEchoResult } from "./doMultiEcho";
export const doMultiEcho: typeof import("./doMultiEcho").doMultiEcho = null as any;
export const doMultiEchoOutput: typeof import("./doMultiEcho").doMultiEchoOutput = null as any;
utilities.lazyLoad(exports, ["doMultiEcho","doMultiEchoOutput"], () => require("./doMultiEcho"));

export * from "./echo";
import { Echo } from "./echo";

export { FailsOnCreateArgs } from "./failsOnCreate";
export type FailsOnCreate = import("./failsOnCreate").FailsOnCreate;
export const FailsOnCreate: typeof import("./failsOnCreate").FailsOnCreate = null as any;
utilities.lazyLoad(exports, ["FailsOnCreate"], () => require("./failsOnCreate"));

export { FailsOnDeleteArgs } from "./failsOnDelete";
export type FailsOnDelete = import("./failsOnDelete").FailsOnDelete;
export const FailsOnDelete: typeof import("./failsOnDelete").FailsOnDelete = null as any;
utilities.lazyLoad(exports, ["FailsOnDelete"], () => require("./failsOnDelete"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { RandomArgs } from "./random";
export type Random = import("./random").Random;
export const Random: typeof import("./random").Random = null as any;
utilities.lazyLoad(exports, ["Random"], () => require("./random"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "pkg:index:Echo":
                return new Echo(name, <any>undefined, { urn })
            case "pkg:index:FailsOnCreate":
                return new FailsOnCreate(name, <any>undefined, { urn })
            case "pkg:index:FailsOnDelete":
                return new FailsOnDelete(name, <any>undefined, { urn })
            case "pkg:index:Random":
                return new Random(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("pkg", "index", _module)
pulumi.runtime.registerResourcePackage("pkg", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:pkg") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
