package engine

import engine "github.com/pulumi/pulumi/sdk/v3/pkg/engine"

// Event represents an event generated by the engine during an operation. The underlying
// type for the `Payload` field will differ depending on the value of the `Type` field
type Event = engine.Event

// StampedEvent represents an event generated by the engine during an operation which has further been stamped
// with a timestamp and sequence number.
type StampedEvent = engine.StampedEvent

type EventPayload = engine.EventPayload

// EventType is the kind of event being emitted.
type EventType = engine.EventType

// ProgressType is the type of download occurring.
type ProgressType = engine.ProgressType

// DiagEventPayload is the payload for an event with type `diag`
type DiagEventPayload = engine.DiagEventPayload

// PolicyViolationEventPayload is the payload for an event with type `policy-violation`.
type PolicyViolationEventPayload = engine.PolicyViolationEventPayload

// PolicyRemediationEventPayload is the payload for an event with type `policy-remediation`.
type PolicyRemediationEventPayload = engine.PolicyRemediationEventPayload

// PolicyLoadEventPayload is the payload for an event with type `policy-load`.
type PolicyLoadEventPayload = engine.PolicyLoadEventPayload

// PolicyAnalyzeSummaryEventPayload is the payload for an event with type `policy-analyze-summary`.
type PolicyAnalyzeSummaryEventPayload = engine.PolicyAnalyzeSummaryEventPayload

// PolicyRemediateSummaryEventPayload is the payload for an event with type `policy-remediate-summary`.
type PolicyRemediateSummaryEventPayload = engine.PolicyRemediateSummaryEventPayload

// PolicyAnalyzeStackSummaryEventPayload is the payload for an event with type `policy-analyze-stack-summary`.
type PolicyAnalyzeStackSummaryEventPayload = engine.PolicyAnalyzeStackSummaryEventPayload

// StartDebuggingEventPayload is the payload for an event of type `debugging-start`
type StartDebuggingEventPayload = engine.StartDebuggingEventPayload

// ProgressEventPayload is the payload for an event with type `progress`. This
// payload reports on the progress of a potentially long-running process being
// managed by the engine (e.g. a plugin download, or a plugin installation).
type ProgressEventPayload = engine.ProgressEventPayload

type StdoutEventPayload = engine.StdoutEventPayload

type PreludeEventPayload = engine.PreludeEventPayload

type SummaryEventPayload = engine.SummaryEventPayload

type ResourceOperationFailedPayload = engine.ResourceOperationFailedPayload

type ResourceOutputsEventPayload = engine.ResourceOutputsEventPayload

type ResourcePreEventPayload = engine.ResourcePreEventPayload

type ErrorEventPayload = engine.ErrorEventPayload

// StepEventMetadata contains the metadata associated with a step the engine is performing.
type StepEventMetadata = engine.StepEventMetadata

// StepEventStateMetadata contains detailed metadata about a resource's state pertaining to a given step.
type StepEventStateMetadata = engine.StepEventStateMetadata

const CancelEvent = engine.CancelEvent

const StdoutColorEvent = engine.StdoutColorEvent

const DiagEvent = engine.DiagEvent

const PreludeEvent = engine.PreludeEvent

const SummaryEvent = engine.SummaryEvent

const ResourcePreEvent = engine.ResourcePreEvent

const ResourceOutputsEvent = engine.ResourceOutputsEvent

const ResourceOperationFailed = engine.ResourceOperationFailed

const PolicyViolationEvent = engine.PolicyViolationEvent

const PolicyRemediationEvent = engine.PolicyRemediationEvent

const PolicyLoadEvent = engine.PolicyLoadEvent

const PolicyAnalyzeSummaryEvent = engine.PolicyAnalyzeSummaryEvent

const PolicyRemediateSummaryEvent = engine.PolicyRemediateSummaryEvent

const PolicyAnalyzeStackSummaryEvent = engine.PolicyAnalyzeStackSummaryEvent

const StartDebuggingEvent = engine.StartDebuggingEvent

const ProgressEvent = engine.ProgressEvent

const ErrorEvent = engine.ErrorEvent

const PluginDownload = engine.PluginDownload

const PluginInstall = engine.PluginInstall

func NewCancelEvent() Event {
	return engine.NewCancelEvent()
}

func NewEvent(payload T) Event {
	return engine.NewEvent(payload)
}

