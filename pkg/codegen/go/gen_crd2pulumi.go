package gen

import (
	"bytes"
	"fmt"
	"io"
	"path"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/pkg/v2/codegen/schema"
)

// CRDTypes returns a map from each module name to a buffer containing the
// code for its generated types.
func CRDTypes(tool string, pkg *schema.Package) (map[string]*bytes.Buffer, error) {
	if err := pkg.ImportLanguages(map[string]schema.Language{"go": Importer}); err != nil {
		return map[string]*bytes.Buffer{}, err
	}

	goInfo, _ := pkg.Language["go"].(GoPackageInfo)
	packages := generatePackageContextMap(tool, pkg, goInfo)

	var pkgMods []string
	for mod := range packages {
		pkgMods = append(pkgMods, mod)
	}

	buffers := map[string]*bytes.Buffer{}

	for _, mod := range pkgMods {
		pkg := packages[mod]
		buffer := &bytes.Buffer{}

		// Functions
		fmt.Println("printing functions")
		for _, f := range pkg.functions {
			fmt.Println("HAA")
			imports := stringSet{}
			pkg.getImports(f, imports)

			b := &bytes.Buffer{}
			pkg.genHeader(b, nil, imports)

			pkg.genFunction(b, f)

			fmt.Println(b.String())
		}

		for _, r := range pkg.resources {
			imports := stringSet{}
			pkg.getImports(r, imports)
			pkg.genHeader(buffer, []string{"context", "reflect"}, imports)

			if err := pkg.genResource(buffer, r); err != nil {
				return nil, errors.Wrapf(err, "generating resource %s", mod)
			}
		}

		if len(pkg.types) > 0 {
			for _, t := range pkg.types {
				pkg.genType(buffer, t)
			}
			pkg.genTypeRegistrations(buffer, pkg.types)
		}

		buffers[mod] = buffer
	}

	return buffers, nil
}

func (pkg *pkgContext) genCRDHeader(w io.Writer, tool string) {
	fmt.Fprintf(w, "// *** This file was generated by %s ***\n\n", tool)
	var pkgName string
	if pkg.mod == "" {
		pkgName = pkg.pkg.Name
	} else {
		pkgName = path.Base(pkg.mod)
	}
	fmt.Fprintf(w, "package %s\n\n", pkgName)
	fmt.Fprint(w, imports)
}

const imports = `import (
	"context"
	"reflect"
	"strings"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/apiextensions"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v2/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

`
