# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from . import outputs
from ... import mymod
from ... import mymod as _mymod
from ._enums import *
from .member_b1 import MemberB1

__all__ = ['MemberB2Args', 'MemberB2']

@pulumi.input_type
class MemberB2Args:
    def __init__(__self__):
        """
        The set of arguments for constructing a MemberB2 resource.
        """
        pass


class MemberB2(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None):
        """
        Create a MemberB2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[MemberB2Args] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a MemberB2 resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param MemberB2Args args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MemberB2Args, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MemberB2Args.__new__(MemberB2Args)

            __props__.__dict__["enum_from_different_module"] = None
            __props__.__dict__["enum_from_same_module"] = None
            __props__.__dict__["object_from_different_module"] = None
            __props__.__dict__["object_from_same_module"] = None
            __props__.__dict__["resource_from_different_module"] = None
            __props__.__dict__["resource_from_same_module"] = None
        super(MemberB2, __self__).__init__(
            'myPkg:myMod/childB:MemberB2',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="enumFromDifferentModule")
    def enum_from_different_module(self) -> pulumi.Output[Optional['mymod.childa.EnumA']]:
        return pulumi.get(self, "enum_from_different_module")

    @property
    @pulumi.getter(name="enumFromSameModule")
    def enum_from_same_module(self) -> pulumi.Output[Optional['EnumB']]:
        return pulumi.get(self, "enum_from_same_module")

    @property
    @pulumi.getter(name="objectFromDifferentModule")
    def object_from_different_module(self) -> pulumi.Output[Optional['_mymod.childa.outputs.ObjectA']]:
        return pulumi.get(self, "object_from_different_module")

    @property
    @pulumi.getter(name="objectFromSameModule")
    def object_from_same_module(self) -> pulumi.Output[Optional['outputs.ObjectB']]:
        return pulumi.get(self, "object_from_same_module")

    @property
    @pulumi.getter(name="resourceFromDifferentModule")
    def resource_from_different_module(self) -> pulumi.Output[Optional['_mymod.childa.MemberA1']]:
        return pulumi.get(self, "resource_from_different_module")

    @property
    @pulumi.getter(name="resourceFromSameModule")
    def resource_from_same_module(self) -> pulumi.Output[Optional['MemberB1']]:
        return pulumi.get(self, "resource_from_same_module")

