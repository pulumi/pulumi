# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'Foo',
]

@pulumi.output_type
class Foo(dict):
    def __init__(__self__, *,
                 a: bool,
                 c: int,
                 e: str,
                 b: Optional[bool] = None,
                 d: Optional[int] = None,
                 f: Optional[str] = None):
        Foo._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            a=a,
            c=c,
            e=e,
            b=b,
            d=d,
            f=f,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             a: Optional[bool] = None,
             c: Optional[int] = None,
             e: Optional[str] = None,
             b: Optional[bool] = None,
             d: Optional[int] = None,
             f: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):
        if a is None:
            raise TypeError("Missing 'a' argument")
        if c is None:
            raise TypeError("Missing 'c' argument")
        if e is None:
            raise TypeError("Missing 'e' argument")

        _setter("a", a)
        _setter("c", c)
        _setter("e", e)
        if b is not None:
            _setter("b", b)
        if d is not None:
            _setter("d", d)
        if f is not None:
            _setter("f", f)

    @property
    @pulumi.getter
    def a(self) -> bool:
        return pulumi.get(self, "a")

    @property
    @pulumi.getter
    def c(self) -> int:
        return pulumi.get(self, "c")

    @property
    @pulumi.getter
    def e(self) -> str:
        return pulumi.get(self, "e")

    @property
    @pulumi.getter
    def b(self) -> Optional[bool]:
        return pulumi.get(self, "b")

    @property
    @pulumi.getter
    def d(self) -> Optional[int]:
        return pulumi.get(self, "d")

    @property
    @pulumi.getter
    def f(self) -> Optional[str]:
        return pulumi.get(self, "f")


