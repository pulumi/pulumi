// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package overlap

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"go-nested-collections/repro/internal"
)

type SomeType struct {
	pulumi.CustomResourceState
}

// NewSomeType registers a new resource with the given unique name, arguments, and options.
func NewSomeType(ctx *pulumi.Context,
	name string, args *SomeTypeArgs, opts ...pulumi.ResourceOption) (*SomeType, error) {
	if args == nil {
		args = &SomeTypeArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SomeType
	err := ctx.RegisterResource("repro:overlap:SomeType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSomeType gets an existing SomeType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSomeType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SomeTypeState, opts ...pulumi.ResourceOption) (*SomeType, error) {
	var resource SomeType
	err := ctx.ReadResource("repro:overlap:SomeType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SomeType resources.
type someTypeState struct {
}

type SomeTypeState struct {
}

func (SomeTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*someTypeState)(nil)).Elem()
}

type someTypeArgs struct {
}

// The set of arguments for constructing a SomeType resource.
type SomeTypeArgs struct {
}

func (SomeTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*someTypeArgs)(nil)).Elem()
}

type SomeTypeInput interface {
	pulumi.Input

	ToSomeTypeOutput() SomeTypeOutput
	ToSomeTypeOutputWithContext(ctx context.Context) SomeTypeOutput
}

func (*SomeType) ElementType() reflect.Type {
	return reflect.TypeOf((**SomeType)(nil)).Elem()
}

func (i *SomeType) ToSomeTypeOutput() SomeTypeOutput {
	return i.ToSomeTypeOutputWithContext(context.Background())
}

func (i *SomeType) ToSomeTypeOutputWithContext(ctx context.Context) SomeTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SomeTypeOutput)
}

func (i *SomeType) ToOutput(ctx context.Context) pulumix.Output[*SomeType] {
	return pulumix.Output[*SomeType]{
		OutputState: i.ToSomeTypeOutputWithContext(ctx).OutputState,
	}
}

// SomeTypeArrayInput is an input type that accepts SomeTypeArray and SomeTypeArrayOutput values.
// You can construct a concrete instance of `SomeTypeArrayInput` via:
//
//	SomeTypeArray{ SomeTypeArgs{...} }
type SomeTypeArrayInput interface {
	pulumi.Input

	ToSomeTypeArrayOutput() SomeTypeArrayOutput
	ToSomeTypeArrayOutputWithContext(context.Context) SomeTypeArrayOutput
}

type SomeTypeArray []SomeTypeInput

func (SomeTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SomeType)(nil)).Elem()
}

func (i SomeTypeArray) ToSomeTypeArrayOutput() SomeTypeArrayOutput {
	return i.ToSomeTypeArrayOutputWithContext(context.Background())
}

func (i SomeTypeArray) ToSomeTypeArrayOutputWithContext(ctx context.Context) SomeTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SomeTypeArrayOutput)
}

func (i SomeTypeArray) ToOutput(ctx context.Context) pulumix.Output[[]*SomeType] {
	return pulumix.Output[[]*SomeType]{
		OutputState: i.ToSomeTypeArrayOutputWithContext(ctx).OutputState,
	}
}

// SomeTypeMapInput is an input type that accepts SomeTypeMap and SomeTypeMapOutput values.
// You can construct a concrete instance of `SomeTypeMapInput` via:
//
//	SomeTypeMap{ "key": SomeTypeArgs{...} }
type SomeTypeMapInput interface {
	pulumi.Input

	ToSomeTypeMapOutput() SomeTypeMapOutput
	ToSomeTypeMapOutputWithContext(context.Context) SomeTypeMapOutput
}

type SomeTypeMap map[string]SomeTypeInput

func (SomeTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SomeType)(nil)).Elem()
}

func (i SomeTypeMap) ToSomeTypeMapOutput() SomeTypeMapOutput {
	return i.ToSomeTypeMapOutputWithContext(context.Background())
}

func (i SomeTypeMap) ToSomeTypeMapOutputWithContext(ctx context.Context) SomeTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SomeTypeMapOutput)
}

func (i SomeTypeMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SomeType] {
	return pulumix.Output[map[string]*SomeType]{
		OutputState: i.ToSomeTypeMapOutputWithContext(ctx).OutputState,
	}
}

type SomeTypeOutput struct{ *pulumi.OutputState }

func (SomeTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SomeType)(nil)).Elem()
}

func (o SomeTypeOutput) ToSomeTypeOutput() SomeTypeOutput {
	return o
}

func (o SomeTypeOutput) ToSomeTypeOutputWithContext(ctx context.Context) SomeTypeOutput {
	return o
}

func (o SomeTypeOutput) ToOutput(ctx context.Context) pulumix.Output[*SomeType] {
	return pulumix.Output[*SomeType]{
		OutputState: o.OutputState,
	}
}

type SomeTypeArrayOutput struct{ *pulumi.OutputState }

func (SomeTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SomeType)(nil)).Elem()
}

func (o SomeTypeArrayOutput) ToSomeTypeArrayOutput() SomeTypeArrayOutput {
	return o
}

func (o SomeTypeArrayOutput) ToSomeTypeArrayOutputWithContext(ctx context.Context) SomeTypeArrayOutput {
	return o
}

func (o SomeTypeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SomeType] {
	return pulumix.Output[[]*SomeType]{
		OutputState: o.OutputState,
	}
}

func (o SomeTypeArrayOutput) Index(i pulumi.IntInput) SomeTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SomeType {
		return vs[0].([]*SomeType)[vs[1].(int)]
	}).(SomeTypeOutput)
}

type SomeTypeMapOutput struct{ *pulumi.OutputState }

func (SomeTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SomeType)(nil)).Elem()
}

func (o SomeTypeMapOutput) ToSomeTypeMapOutput() SomeTypeMapOutput {
	return o
}

func (o SomeTypeMapOutput) ToSomeTypeMapOutputWithContext(ctx context.Context) SomeTypeMapOutput {
	return o
}

func (o SomeTypeMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SomeType] {
	return pulumix.Output[map[string]*SomeType]{
		OutputState: o.OutputState,
	}
}

func (o SomeTypeMapOutput) MapIndex(k pulumi.StringInput) SomeTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SomeType {
		return vs[0].(map[string]*SomeType)[vs[1].(string)]
	}).(SomeTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SomeTypeInput)(nil)).Elem(), &SomeType{})
	pulumi.RegisterInputType(reflect.TypeOf((*SomeTypeArrayInput)(nil)).Elem(), SomeTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SomeTypeMapInput)(nil)).Elem(), SomeTypeMap{})
	pulumi.RegisterOutputType(SomeTypeOutput{})
	pulumi.RegisterOutputType(SomeTypeArrayOutput{})
	pulumi.RegisterOutputType(SomeTypeMapOutput{})
}
