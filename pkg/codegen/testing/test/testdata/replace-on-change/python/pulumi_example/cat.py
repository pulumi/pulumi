# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from .god import God

__all__ = ['CatArgs', 'Cat']

@pulumi.input_type
class CatArgs:
    def __init__(__self__):
        """
        The set of arguments for constructing a Cat resource.
        """
        pass
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             opts: Optional[pulumi.ResourceOptions]=None):
        pass


class Cat(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None):
        """
        Create a Cat resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[CatArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Cat resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CatArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CatArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            CatArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CatArgs.__new__(CatArgs)

            __props__.__dict__["foes"] = None
            __props__.__dict__["friends"] = None
            __props__.__dict__["name"] = None
            __props__.__dict__["other"] = None
            __props__.__dict__["toy"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["name"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        replace_on_changes = pulumi.ResourceOptions(replace_on_changes=["foes.*.associated.color", "foes.*.color", "friends[*].associated.color", "friends[*].color", "name", "toy.color"])
        opts = pulumi.ResourceOptions.merge(opts, replace_on_changes)
        super(Cat, __self__).__init__(
            'example::Cat',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Cat':
        """
        Get an existing Cat resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = CatArgs.__new__(CatArgs)

        __props__.__dict__["foes"] = None
        __props__.__dict__["friends"] = None
        __props__.__dict__["name"] = None
        __props__.__dict__["other"] = None
        __props__.__dict__["toy"] = None
        return Cat(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def foes(self) -> pulumi.Output[Optional[Mapping[str, 'outputs.Toy']]]:
        return pulumi.get(self, "foes")

    @property
    @pulumi.getter
    def friends(self) -> pulumi.Output[Optional[Sequence['outputs.Toy']]]:
        return pulumi.get(self, "friends")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def other(self) -> pulumi.Output[Optional['God']]:
        return pulumi.get(self, "other")

    @property
    @pulumi.getter
    def toy(self) -> pulumi.Output[Optional['outputs.Toy']]:
        return pulumi.get(self, "toy")

