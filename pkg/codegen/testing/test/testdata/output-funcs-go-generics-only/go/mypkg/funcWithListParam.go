// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mypkg

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"output-funcs-go-generics-only/mypkg/internal"
)

// Check codegen of functions with a List parameter.
func FuncWithListParam(ctx *pulumi.Context, args *FuncWithListParamArgs, opts ...pulumi.InvokeOption) (*FuncWithListParamResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv FuncWithListParamResult
	err := ctx.Invoke("mypkg::funcWithListParam", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type FuncWithListParamArgs struct {
	A []string `pulumi:"a"`
	B *string  `pulumi:"b"`
}

type FuncWithListParamResult struct {
	R string `pulumi:"r"`
}

func FuncWithListParamOutput(ctx *pulumi.Context, args FuncWithListParamOutputArgs, opts ...pulumi.InvokeOption) FuncWithListParamResultOutput {
	outputResult := pulumix.ApplyErr[*FuncWithListParamArgs](args.ToOutput(), func(plainArgs *FuncWithListParamArgs) (*FuncWithListParamResult, error) {
		return FuncWithListParam(ctx, plainArgs, opts...)
	})

	return pulumix.Cast[FuncWithListParamResultOutput, *FuncWithListParamResult](outputResult)
}

type FuncWithListParamOutputArgs struct {
	A pulumix.Input[[]string] `pulumi:"a"`
	B pulumix.Input[*string]  `pulumi:"b"`
}

func (args FuncWithListParamOutputArgs) ToOutput() pulumix.Output[*FuncWithListParamArgs] {
	allArgs := pulumix.All(
		args.A.ToOutput(context.Background()).AsAny(),
		args.B.ToOutput(context.Background()).AsAny())
	return pulumix.Apply[[]any](allArgs, func(resolvedArgs []interface{}) *FuncWithListParamArgs {
		return &FuncWithListParamArgs{
			A: resolvedArgs[0].([]string),
			B: resolvedArgs[1].(*string),
		}
	})
}

type FuncWithListParamResultOutput struct{ *pulumi.OutputState }

func (FuncWithListParamResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FuncWithListParamResult)(nil)).Elem()
}

func (o FuncWithListParamResultOutput) ToOutput(context.Context) pulumix.Output[*FuncWithListParamResult] {
	return pulumix.Output[*FuncWithListParamResult]{
		OutputState: o.OutputState,
	}
}

func (o FuncWithListParamResultOutput) R() pulumix.Output[string] {
	return pulumix.Apply[*FuncWithListParamResult](o, func(v *FuncWithListParamResult) string { return v.R })
}
