// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package foo

import (
	"context"
	"reflect"

	"embedded-crd-types/foo/crd.k8s.amazonaws.com/v1alpha1"
	"embedded-crd-types/foo/internal"
	corev1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/core/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Component struct {
	pulumi.ResourceState

	EniConfig v1alpha1.ENIConfigSpecMapOutput `pulumi:"eniConfig"`
	Pod       *corev1.PodTypeOutput           `pulumi:"pod"`
}

// NewComponent registers a new resource with the given unique name, arguments, and options.
func NewComponent(ctx *pulumi.Context,
	name string, args *ComponentArgs, opts ...pulumi.ResourceOption) (*Component, error) {
	if args == nil {
		args = &ComponentArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Component
	err := ctx.RegisterRemoteComponentResource("foo:index:Component", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type componentArgs struct {
	EniConfig map[string]v1alpha1.ENIConfigSpec `pulumi:"eniConfig"`
	Pod       *corev1.PodType                   `pulumi:"pod"`
}

// The set of arguments for constructing a Component resource.
type ComponentArgs struct {
	EniConfig v1alpha1.ENIConfigSpecMapInput
	Pod       *corev1.PodTypeInput
}

func (ComponentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*componentArgs)(nil)).Elem()
}

type ComponentInput interface {
	pulumi.Input

	ToComponentOutput() ComponentOutput
	ToComponentOutputWithContext(ctx context.Context) ComponentOutput
}

func (*Component) ElementType() reflect.Type {
	return reflect.TypeOf((**Component)(nil)).Elem()
}

func (i *Component) ToComponentOutput() ComponentOutput {
	return i.ToComponentOutputWithContext(context.Background())
}

func (i *Component) ToComponentOutputWithContext(ctx context.Context) ComponentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentOutput)
}

func (i *Component) ToOutput(ctx context.Context) pulumix.Output[*Component] {
	return pulumix.Output[*Component]{
		OutputState: i.ToComponentOutputWithContext(ctx).OutputState,
	}
}

type ComponentOutput struct{ *pulumi.OutputState }

func (ComponentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Component)(nil)).Elem()
}

func (o ComponentOutput) ToComponentOutput() ComponentOutput {
	return o
}

func (o ComponentOutput) ToComponentOutputWithContext(ctx context.Context) ComponentOutput {
	return o
}

func (o ComponentOutput) ToOutput(ctx context.Context) pulumix.Output[*Component] {
	return pulumix.Output[*Component]{
		OutputState: o.OutputState,
	}
}

func (o ComponentOutput) EniConfig() v1alpha1.ENIConfigSpecMapOutput {
	return o.ApplyT(func(v *Component) v1alpha1.ENIConfigSpecMapOutput { return v.EniConfig }).(v1alpha1.ENIConfigSpecMapOutput)
}

func (o ComponentOutput) Pod() *corev1.PodTypeOutput {
	return o.ApplyT(func(v *Component) *corev1.PodTypeOutput { return v.Pod }).(*corev1.PodTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentInput)(nil)).Elem(), &Component{})
	pulumi.RegisterOutputType(ComponentOutput{})
}
