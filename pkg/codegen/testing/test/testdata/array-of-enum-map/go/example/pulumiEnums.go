// Code generated by test DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type AnnotationStoreSchemaValueType string

const (
	AnnotationStoreSchemaValueTypeLong    = AnnotationStoreSchemaValueType("LONG")
	AnnotationStoreSchemaValueTypeInt     = AnnotationStoreSchemaValueType("INT")
	AnnotationStoreSchemaValueTypeString  = AnnotationStoreSchemaValueType("STRING")
	AnnotationStoreSchemaValueTypeFloat   = AnnotationStoreSchemaValueType("FLOAT")
	AnnotationStoreSchemaValueTypeDouble  = AnnotationStoreSchemaValueType("DOUBLE")
	AnnotationStoreSchemaValueTypeBoolean = AnnotationStoreSchemaValueType("BOOLEAN")
)

func (AnnotationStoreSchemaValueType) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreSchemaValueType)(nil)).Elem()
}

func (e AnnotationStoreSchemaValueType) ToAnnotationStoreSchemaValueTypeOutput() AnnotationStoreSchemaValueTypeOutput {
	return pulumi.ToOutput(e).(AnnotationStoreSchemaValueTypeOutput)
}

func (e AnnotationStoreSchemaValueType) ToAnnotationStoreSchemaValueTypeOutputWithContext(ctx context.Context) AnnotationStoreSchemaValueTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(AnnotationStoreSchemaValueTypeOutput)
}

func (e AnnotationStoreSchemaValueType) ToAnnotationStoreSchemaValueTypePtrOutput() AnnotationStoreSchemaValueTypePtrOutput {
	return e.ToAnnotationStoreSchemaValueTypePtrOutputWithContext(context.Background())
}

func (e AnnotationStoreSchemaValueType) ToAnnotationStoreSchemaValueTypePtrOutputWithContext(ctx context.Context) AnnotationStoreSchemaValueTypePtrOutput {
	return AnnotationStoreSchemaValueType(e).ToAnnotationStoreSchemaValueTypeOutputWithContext(ctx).ToAnnotationStoreSchemaValueTypePtrOutputWithContext(ctx)
}

func (e AnnotationStoreSchemaValueType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e AnnotationStoreSchemaValueType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e AnnotationStoreSchemaValueType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e AnnotationStoreSchemaValueType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type AnnotationStoreSchemaValueTypeOutput struct{ *pulumi.OutputState }

func (AnnotationStoreSchemaValueTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnnotationStoreSchemaValueType)(nil)).Elem()
}

func (o AnnotationStoreSchemaValueTypeOutput) ToAnnotationStoreSchemaValueTypeOutput() AnnotationStoreSchemaValueTypeOutput {
	return o
}

func (o AnnotationStoreSchemaValueTypeOutput) ToAnnotationStoreSchemaValueTypeOutputWithContext(ctx context.Context) AnnotationStoreSchemaValueTypeOutput {
	return o
}

func (o AnnotationStoreSchemaValueTypeOutput) ToAnnotationStoreSchemaValueTypePtrOutput() AnnotationStoreSchemaValueTypePtrOutput {
	return o.ToAnnotationStoreSchemaValueTypePtrOutputWithContext(context.Background())
}

func (o AnnotationStoreSchemaValueTypeOutput) ToAnnotationStoreSchemaValueTypePtrOutputWithContext(ctx context.Context) AnnotationStoreSchemaValueTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v AnnotationStoreSchemaValueType) *AnnotationStoreSchemaValueType {
		return &v
	}).(AnnotationStoreSchemaValueTypePtrOutput)
}

func (o AnnotationStoreSchemaValueTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o AnnotationStoreSchemaValueTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AnnotationStoreSchemaValueType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o AnnotationStoreSchemaValueTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AnnotationStoreSchemaValueTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e AnnotationStoreSchemaValueType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type AnnotationStoreSchemaValueTypePtrOutput struct{ *pulumi.OutputState }

func (AnnotationStoreSchemaValueTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnnotationStoreSchemaValueType)(nil)).Elem()
}

func (o AnnotationStoreSchemaValueTypePtrOutput) ToAnnotationStoreSchemaValueTypePtrOutput() AnnotationStoreSchemaValueTypePtrOutput {
	return o
}

func (o AnnotationStoreSchemaValueTypePtrOutput) ToAnnotationStoreSchemaValueTypePtrOutputWithContext(ctx context.Context) AnnotationStoreSchemaValueTypePtrOutput {
	return o
}

func (o AnnotationStoreSchemaValueTypePtrOutput) Elem() AnnotationStoreSchemaValueTypeOutput {
	return o.ApplyT(func(v *AnnotationStoreSchemaValueType) AnnotationStoreSchemaValueType {
		if v != nil {
			return *v
		}
		var ret AnnotationStoreSchemaValueType
		return ret
	}).(AnnotationStoreSchemaValueTypeOutput)
}

func (o AnnotationStoreSchemaValueTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o AnnotationStoreSchemaValueTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *AnnotationStoreSchemaValueType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// AnnotationStoreSchemaValueTypeInput is an input type that accepts values of the AnnotationStoreSchemaValueType enum
// A concrete instance of `AnnotationStoreSchemaValueTypeInput` can be one of the following:
//
//	AnnotationStoreSchemaValueTypeLong
//	AnnotationStoreSchemaValueTypeInt
//	AnnotationStoreSchemaValueTypeString
//	AnnotationStoreSchemaValueTypeFloat
//	AnnotationStoreSchemaValueTypeDouble
//	AnnotationStoreSchemaValueTypeBoolean
type AnnotationStoreSchemaValueTypeInput interface {
	pulumi.Input

	ToAnnotationStoreSchemaValueTypeOutput() AnnotationStoreSchemaValueTypeOutput
	ToAnnotationStoreSchemaValueTypeOutputWithContext(context.Context) AnnotationStoreSchemaValueTypeOutput
}

var annotationStoreSchemaValueTypePtrType = reflect.TypeOf((**AnnotationStoreSchemaValueType)(nil)).Elem()

type AnnotationStoreSchemaValueTypePtrInput interface {
	pulumi.Input

	ToAnnotationStoreSchemaValueTypePtrOutput() AnnotationStoreSchemaValueTypePtrOutput
	ToAnnotationStoreSchemaValueTypePtrOutputWithContext(context.Context) AnnotationStoreSchemaValueTypePtrOutput
}

type annotationStoreSchemaValueTypePtr string

func AnnotationStoreSchemaValueTypePtr(v string) AnnotationStoreSchemaValueTypePtrInput {
	return (*annotationStoreSchemaValueTypePtr)(&v)
}

func (*annotationStoreSchemaValueTypePtr) ElementType() reflect.Type {
	return annotationStoreSchemaValueTypePtrType
}

func (in *annotationStoreSchemaValueTypePtr) ToAnnotationStoreSchemaValueTypePtrOutput() AnnotationStoreSchemaValueTypePtrOutput {
	return pulumi.ToOutput(in).(AnnotationStoreSchemaValueTypePtrOutput)
}

func (in *annotationStoreSchemaValueTypePtr) ToAnnotationStoreSchemaValueTypePtrOutputWithContext(ctx context.Context) AnnotationStoreSchemaValueTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(AnnotationStoreSchemaValueTypePtrOutput)
}

func (in *annotationStoreSchemaValueTypePtr) ToOutput(ctx context.Context) pulumix.Output[*AnnotationStoreSchemaValueType] {
	return pulumix.Output[*AnnotationStoreSchemaValueType]{
		OutputState: in.ToAnnotationStoreSchemaValueTypePtrOutputWithContext(ctx).OutputState,
	}
}

// AnnotationStoreSchemaValueTypeMapInput is an input type that accepts AnnotationStoreSchemaValueTypeMap and AnnotationStoreSchemaValueTypeMapOutput values.
// You can construct a concrete instance of `AnnotationStoreSchemaValueTypeMapInput` via:
//
//	AnnotationStoreSchemaValueTypeMap{ "key": AnnotationStoreSchemaValueTypeArgs{...} }
type AnnotationStoreSchemaValueTypeMapInput interface {
	pulumi.Input

	ToAnnotationStoreSchemaValueTypeMapOutput() AnnotationStoreSchemaValueTypeMapOutput
	ToAnnotationStoreSchemaValueTypeMapOutputWithContext(context.Context) AnnotationStoreSchemaValueTypeMapOutput
}

type AnnotationStoreSchemaValueTypeMap map[string]AnnotationStoreSchemaValueType

func (AnnotationStoreSchemaValueTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AnnotationStoreSchemaValueType)(nil)).Elem()
}

func (i AnnotationStoreSchemaValueTypeMap) ToAnnotationStoreSchemaValueTypeMapOutput() AnnotationStoreSchemaValueTypeMapOutput {
	return i.ToAnnotationStoreSchemaValueTypeMapOutputWithContext(context.Background())
}

func (i AnnotationStoreSchemaValueTypeMap) ToAnnotationStoreSchemaValueTypeMapOutputWithContext(ctx context.Context) AnnotationStoreSchemaValueTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnnotationStoreSchemaValueTypeMapOutput)
}

type AnnotationStoreSchemaValueTypeMapOutput struct{ *pulumi.OutputState }

func (AnnotationStoreSchemaValueTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AnnotationStoreSchemaValueType)(nil)).Elem()
}

func (o AnnotationStoreSchemaValueTypeMapOutput) ToAnnotationStoreSchemaValueTypeMapOutput() AnnotationStoreSchemaValueTypeMapOutput {
	return o
}

func (o AnnotationStoreSchemaValueTypeMapOutput) ToAnnotationStoreSchemaValueTypeMapOutputWithContext(ctx context.Context) AnnotationStoreSchemaValueTypeMapOutput {
	return o
}

func (o AnnotationStoreSchemaValueTypeMapOutput) MapIndex(k pulumi.StringInput) AnnotationStoreSchemaValueTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AnnotationStoreSchemaValueType {
		return vs[0].(map[string]AnnotationStoreSchemaValueType)[vs[1].(string)]
	}).(AnnotationStoreSchemaValueTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreSchemaValueTypeInput)(nil)).Elem(), AnnotationStoreSchemaValueType("LONG"))
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreSchemaValueTypePtrInput)(nil)).Elem(), AnnotationStoreSchemaValueType("LONG"))
	pulumi.RegisterInputType(reflect.TypeOf((*AnnotationStoreSchemaValueTypeMapInput)(nil)).Elem(), AnnotationStoreSchemaValueTypeMap{})
	pulumi.RegisterOutputType(AnnotationStoreSchemaValueTypeOutput{})
	pulumi.RegisterOutputType(AnnotationStoreSchemaValueTypePtrOutput{})
	pulumi.RegisterOutputType(AnnotationStoreSchemaValueTypeMapOutput{})
}
