# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
import pulumi_aws

__all__ = ['ConfigurerArgs', 'Configurer']

@pulumi.input_type
class ConfigurerArgs:
    def __init__(__self__, *,
                 aws_profile: pulumi.Input[str],
                 aws_region: pulumi.Input[str]):
        """
        The set of arguments for constructing a Configurer resource.
        """
        pulumi.set(__self__, "aws_profile", aws_profile)
        pulumi.set(__self__, "aws_region", aws_region)

    @property
    @pulumi.getter(name="awsProfile")
    def aws_profile(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_profile")

    @aws_profile.setter
    def aws_profile(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_profile", value)

    @property
    @pulumi.getter(name="awsRegion")
    def aws_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_region")

    @aws_region.setter
    def aws_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_region", value)


class Configurer(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws_profile: Optional[pulumi.Input[str]] = None,
                 aws_region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Configurer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ConfigurerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Configurer resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ConfigurerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ConfigurerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aws_profile: Optional[pulumi.Input[str]] = None,
                 aws_region: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ConfigurerArgs.__new__(ConfigurerArgs)

            if aws_profile is None and not opts.urn:
                raise TypeError("Missing required property 'aws_profile'")
            __props__.__dict__["aws_profile"] = aws_profile
            if aws_region is None and not opts.urn:
                raise TypeError("Missing required property 'aws_region'")
            __props__.__dict__["aws_region"] = aws_region
        super(Configurer, __self__).__init__(
            'metaprovider:index:Configurer',
            resource_name,
            __props__,
            opts,
            remote=True)

    @pulumi.output_type
    class AwsProviderResult:
        def __init__(__self__, resource=None):
            if resource and not isinstance(resource, pulumi_aws.Provider):
                raise TypeError("Expected argument 'resource' to be a pulumi_aws.Provider")
            pulumi.set(__self__, "resource", resource)

        @property
        @pulumi.getter
        def resource(self) -> 'pulumi_aws.Provider':
            return pulumi.get(self, "resource")

    def aws_provider(__self__) -> pulumi_aws.Provider:
        __args__ = dict()
        __args__['__self__'] = __self__
        return pulumi.runtime.call('metaprovider:index:Configurer/awsProvider', __args__, res=__self__, typ=Configurer.AwsProviderResult, plainResourceField='resource')

