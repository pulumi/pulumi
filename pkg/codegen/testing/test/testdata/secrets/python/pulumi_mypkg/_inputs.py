# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ConfigArgs',
]

@pulumi.input_type
class ConfigArgs:
    def __init__(__self__, *,
                 foo: Optional[pulumi.Input[str]] = None):
        ConfigArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            foo=foo,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             foo: Optional[pulumi.Input[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if foo is not None:
            _setter("foo", foo)

    @property
    @pulumi.getter
    def foo(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "foo")

    @foo.setter
    def foo(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "foo", value)


