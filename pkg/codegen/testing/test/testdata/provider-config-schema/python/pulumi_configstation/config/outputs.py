# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'Sandwich',
]

@pulumi.output_type
class Sandwich(dict):
    def __init__(__self__, *,
                 bread: Optional[str] = None,
                 veggies: Optional[Sequence[str]] = None):
        Sandwich._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            bread=bread,
            veggies=veggies,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             bread: Optional[str] = None,
             veggies: Optional[Sequence[str]] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if bread is not None:
            _setter("bread", bread)
        if veggies is not None:
            _setter("veggies", veggies)

    @property
    @pulumi.getter
    def bread(self) -> Optional[str]:
        return pulumi.get(self, "bread")

    @property
    @pulumi.getter
    def veggies(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "veggies")


