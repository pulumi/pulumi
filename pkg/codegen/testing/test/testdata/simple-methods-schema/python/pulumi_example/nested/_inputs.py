# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'Baz',
]

@pulumi.input_type
class Baz:
    def __init__(__self__, *,
                 hello: Optional[str] = None,
                 world: Optional[str] = None):
        Baz._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            hello=hello,
            world=world,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             hello: Optional[str] = None,
             world: Optional[str] = None,
             opts: Optional[pulumi.ResourceOptions]=None,
             **kwargs):

        if hello is not None:
            _setter("hello", hello)
        if world is not None:
            _setter("world", world)

    @property
    @pulumi.getter
    def hello(self) -> Optional[str]:
        return pulumi.get(self, "hello")

    @hello.setter
    def hello(self, value: Optional[str]):
        pulumi.set(self, "hello", value)

    @property
    @pulumi.getter
    def world(self) -> Optional[str]:
        return pulumi.get(self, "world")

    @world.setter
    def world(self, value: Optional[str]):
        pulumi.set(self, "world", value)


