package test

import (
	"bytes"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"testing"

	"github.com/hashicorp/hcl/v2"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/pulumi/pulumi/pkg/v3/codegen"
	"github.com/pulumi/pulumi/pkg/v3/codegen/hcl2"
	"github.com/pulumi/pulumi/pkg/v3/codegen/hcl2/syntax"
	"github.com/pulumi/pulumi/pkg/v3/codegen/internal/utils"
	"github.com/pulumi/pulumi/pkg/v3/testing/integration"
	"github.com/pulumi/pulumi/sdk/v3/go/common/util/executable"
	"github.com/pulumi/pulumi/sdk/v3/python"
)

type programTest struct {
	Name           string
	Description    string
	Skip           codegen.StringSet
	ExpectNYIDiags codegen.StringSet
}

var testdataPath = filepath.Join("..", "internal", "test", "testdata")

var programTests = []programTest{
	{
		Name:           "aws-s3-folder",
		Description:    "AWS S3 Folder",
		ExpectNYIDiags: codegen.NewStringSet("python", "nodejs", "dotnet"),
	},
	{
		Name:        "aws-eks",
		Description: "AWS EKS",
	},
	{
		Name:        "aws-fargate",
		Description: "AWS Fargate",
	},
	{
		Name:        "aws-s3-logging",
		Description: "AWS S3 with logging",
	},
	{
		Name:        "aws-webserver",
		Description: "AWS Webserver",
	},
	{
		Name:        "azure-native",
		Description: "Azure Native",
		Skip:        codegen.NewStringSet("go"),
	},
	{
		Name:        "azure-sa",
		Description: "Azure SA",
	},
	{
		Name:        "kubernetes-operator",
		Description: "K8s Operator",
	},
	{
		Name:        "kubernetes-pod",
		Description: "K8s Pod",
	},
	{
		Name:        "kubernetes-template",
		Description: "K8s Template",
	},
	{
		Name:        "random-pet",
		Description: "Random Pet",
	},
	{
		Name:        "resource-options",
		Description: "Resource Options",
	},
	{
		Name:        "secret",
		Description: "Secret",
	},
	{
		Name:        "functions",
		Description: "Functions",
	},
}

var langConfig = map[string]struct {
	extension  string
	outputFile string
	// Will be called on the generated file
	check func(*testing.T, string)
}{
	"python": {
		extension:  "py",
		outputFile: "__main__.py",
		check: func(t *testing.T, filePath string) {
			ex, _, err := python.CommandPath()

			assert.NoError(t, err)
			err = integration.RunCommand(t, "python syntax check",
				[]string{ex, "-m", "py_compile", filePath}, ".", &integration.ProgramTestOptions{})
			assert.NoError(t, err)
		},
	},
	"nodejs": {
		extension:  "ts",
		outputFile: "index.ts",
	},
	"go": {
		extension:  "go",
		outputFile: "main.go",
		check: func(t *testing.T, path string) {
			dir := filepath.Base(path)
			ex, err := executable.FindExecutable("go")
			assert.NoError(t, err)
			_, err = ioutil.ReadFile("go.mod")
			if os.IsNotExist(err) {
				err = integration.RunCommand(t, "generate go.mod",
					[]string{ex, "mod", "init", "test_mod"},
					dir, &integration.ProgramTestOptions{})
				assert.NoError(t, err)
				err = integration.RunCommand(t, "go tidy",
					[]string{ex, "mod", "tidy"},
					dir, &integration.ProgramTestOptions{})
				assert.NoError(t, err)
				defer func() {
					// If we created the module, we also remove the module
					err = os.Remove(filepath.Join(dir, "go.mod"))
					assert.NoError(t, err)
					err = os.Remove(filepath.Join(dir, "go.sum"))
					assert.NoError(t, err)
				}()
			} else {
				assert.NoError(t, err)
			}
			err = integration.RunCommand(t, "test build", []string{ex, "build"},
				dir, &integration.ProgramTestOptions{})
			assert.NoError(t, err)
		},
	},
	"dotnet": {
		extension:  "cs",
		outputFile: "MyStack.cs",
	},
}

// TestProgramCodegen runs the complete set of program code generation tests against a particular
// language's code generator.
//
// A program code generation test consists of a PCL file (.pp extension) and a set of expected outputs
// for each language.
//
// The PCL file is the only piece that must be manually authored. Once the schema has been written, the expected outputs
// can be generated by running `PULUMI_ACCEPT=true go test ./..." from the `pkg/codegen` directory.
func TestProgramCodegen(
	t *testing.T,
	language string,
	genProgram func(program *hcl2.Program) (map[string][]byte, hcl.Diagnostics, error),
) {
	for _, tt := range programTests {
		t.Run(tt.Description, func(t *testing.T) {
			var err error
			if tt.Skip.Has(language) {
				t.Skip()
				return
			}

			expectNYIDiags := false
			if tt.ExpectNYIDiags.Has(language) {
				expectNYIDiags = true
			}

			var cfg = langConfig[language]

			testDir := filepath.Join(testdataPath, tt.Name+"-pp")
			err = os.Mkdir(testDir, 0700)
			if err != nil && !os.IsExist(err) {
				t.Fatalf("Failed to create %q: %s", testDir, err)
			}

			pclFile := filepath.Join(testDir, tt.Name+".pp")
			contents, err := ioutil.ReadFile(pclFile)
			if err != nil {
				t.Fatalf("could not read %v: %v", pclFile, err)
			}

			expectedFile := filepath.Join(testDir, tt.Name+"."+cfg.extension)
			expected, err := ioutil.ReadFile(expectedFile)
			if err != nil && os.Getenv("PULUMI_ACCEPT") == "" {
				t.Fatalf("could not read %v: %v", expectedFile, err)
			}

			parser := syntax.NewParser()
			err = parser.ParseFile(bytes.NewReader(contents), tt.Name+".pp")
			if err != nil {
				t.Fatalf("could not read %v: %v", pclFile, err)
			}
			if parser.Diagnostics.HasErrors() {
				t.Fatalf("failed to parse files: %v", parser.Diagnostics)
			}

			program, diags, err := hcl2.BindProgram(parser.Files, hcl2.PluginHost(utils.NewHost(testdataPath)))
			if err != nil {
				t.Fatalf("could not bind program: %v", err)
			}
			if diags.HasErrors() {
				t.Fatalf("failed to bind program: %v", diags)
			}

			files, diags, err := genProgram(program)
			assert.NoError(t, err)
			if expectNYIDiags {
				var tmpDiags hcl.Diagnostics
				for _, d := range diags {
					if !strings.HasPrefix(d.Summary, "not yet implemented") {
						tmpDiags = append(tmpDiags, d)
					}
				}
				diags = tmpDiags
			}
			if diags.HasErrors() {
				t.Fatalf("failed to generate program: %v", diags)
			}

			if os.Getenv("PULUMI_ACCEPT") != "" {
				err := ioutil.WriteFile(expectedFile, files[cfg.outputFile], 0600)
				require.NoError(t, err)
			} else {
				assert.Equal(t, string(expected), string(files[cfg.outputFile]))
			}
			if cfg.check != nil {
				cfg.check(t, expectedFile)
			}
		})
	}
}
