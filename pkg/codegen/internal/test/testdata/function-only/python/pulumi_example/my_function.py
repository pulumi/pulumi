# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'MyFunctionResult',
    'AwaitableMyFunctionResult',
    'my_function',
    'my_function_output',
]

@pulumi.output_type
class MyFunctionResult:
    def __init__(__self__, foo=None):
        if foo and not isinstance(foo, str):
            raise TypeError("Expected argument 'foo' to be a str")
        pulumi.set(__self__, "foo", foo)

    @property
    @pulumi.getter
    def foo(self) -> Optional[str]:
        return pulumi.get(self, "foo")


class AwaitableMyFunctionResult(MyFunctionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return MyFunctionResult(
            foo=self.foo)


def my_function(foo: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableMyFunctionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['foo'] = foo
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('example::myFunction', __args__, opts=opts, typ=MyFunctionResult).value

    return AwaitableMyFunctionResult(
        foo=__ret__.foo)


@_utilities.lift_output_func(my_function)
def my_function_output(foo: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[MyFunctionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
