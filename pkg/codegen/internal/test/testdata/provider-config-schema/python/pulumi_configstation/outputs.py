# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'Child',
]

@pulumi.output_type
class Child(dict):
    def __init__(__self__, *,
                 age: Optional[int] = None,
                 name: Optional[str] = None):
        if age is not None:
            pulumi.set(__self__, "age", age)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def age(self) -> Optional[int]:
        return pulumi.get(self, "age")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


