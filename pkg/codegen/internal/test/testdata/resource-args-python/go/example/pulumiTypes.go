// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Pet struct {
	Name *string `pulumi:"name"`
}

// PetInput is an input type that accepts PetArgs and PetOutput values.
// You can construct a concrete instance of `PetInput` via:
//
//          PetArgs{...}
type PetInput interface {
	pulumi.Input

	ToPetOutput() PetOutput
	ToPetOutputWithContext(context.Context) PetOutput
}

type PetArgs struct {
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (PetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Pet)(nil)).Elem()
}

func (i PetArgs) ToPetOutput() PetOutput {
	return i.ToPetOutputWithContext(context.Background())
}

func (i PetArgs) ToPetOutputWithContext(ctx context.Context) PetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PetOutput)
}

// PetArrayInput is an input type that accepts PetArray and PetArrayOutput values.
// You can construct a concrete instance of `PetArrayInput` via:
//
//          PetArray{ PetArgs{...} }
type PetArrayInput interface {
	pulumi.Input

	ToPetArrayOutput() PetArrayOutput
	ToPetArrayOutputWithContext(context.Context) PetArrayOutput
}

type PetArray []PetInput

func (PetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Pet)(nil)).Elem()
}

func (i PetArray) ToPetArrayOutput() PetArrayOutput {
	return i.ToPetArrayOutputWithContext(context.Background())
}

func (i PetArray) ToPetArrayOutputWithContext(ctx context.Context) PetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PetArrayOutput)
}

type PetOutput struct{ *pulumi.OutputState }

func (PetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Pet)(nil)).Elem()
}

func (o PetOutput) ToPetOutput() PetOutput {
	return o
}

func (o PetOutput) ToPetOutputWithContext(ctx context.Context) PetOutput {
	return o
}

func (o PetOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Pet) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type PetArrayOutput struct{ *pulumi.OutputState }

func (PetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Pet)(nil)).Elem()
}

func (o PetArrayOutput) ToPetArrayOutput() PetArrayOutput {
	return o
}

func (o PetArrayOutput) ToPetArrayOutputWithContext(ctx context.Context) PetArrayOutput {
	return o
}

func (o PetArrayOutput) Index(i pulumi.IntInput) PetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Pet {
		return vs[0].([]Pet)[vs[1].(int)]
	}).(PetOutput)
}

func init() {
	pulumi.RegisterOutputType(PetOutput{})
	pulumi.RegisterOutputType(PetArrayOutput{})
}
