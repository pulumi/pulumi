// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Enum string

const (
	EnumOne = Enum("one")
	EnumTwo = Enum("two")
)

func (Enum) ElementType() reflect.Type {
	return reflect.TypeOf((*Enum)(nil)).Elem()
}

func (e Enum) ToEnumOutput() EnumOutput {
	return pulumi.ToOutput(e).(EnumOutput)
}

func (e Enum) ToEnumOutputWithContext(ctx context.Context) EnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EnumOutput)
}

func (e Enum) ToEnumPtrOutput() EnumPtrOutput {
	return e.ToEnumPtrOutputWithContext(context.Background())
}

func (e Enum) ToEnumPtrOutputWithContext(ctx context.Context) EnumPtrOutput {
	return Enum(e).ToEnumOutputWithContext(ctx).ToEnumPtrOutputWithContext(ctx)
}

func (e Enum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e Enum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e Enum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Enum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EnumOutput struct{ *pulumi.OutputState }

func (EnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Enum)(nil)).Elem()
}

func (o EnumOutput) ToEnumOutput() EnumOutput {
	return o
}

func (o EnumOutput) ToEnumOutputWithContext(ctx context.Context) EnumOutput {
	return o
}

func (o EnumOutput) ToEnumPtrOutput() EnumPtrOutput {
	return o.ToEnumPtrOutputWithContext(context.Background())
}

func (o EnumOutput) ToEnumPtrOutputWithContext(ctx context.Context) EnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Enum) *Enum {
		return &v
	}).(EnumPtrOutput)
}

func (o EnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Enum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e Enum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EnumPtrOutput struct{ *pulumi.OutputState }

func (EnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Enum)(nil)).Elem()
}

func (o EnumPtrOutput) ToEnumPtrOutput() EnumPtrOutput {
	return o
}

func (o EnumPtrOutput) ToEnumPtrOutputWithContext(ctx context.Context) EnumPtrOutput {
	return o
}

func (o EnumPtrOutput) Elem() EnumOutput {
	return o.ApplyT(func(v *Enum) Enum {
		if v != nil {
			return *v
		}
		var ret Enum
		return ret
	}).(EnumOutput)
}

func (o EnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *Enum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EnumInput is an input type that accepts EnumArgs and EnumOutput values.
// You can construct a concrete instance of `EnumInput` via:
//
//          EnumArgs{...}
type EnumInput interface {
	pulumi.Input

	ToEnumOutput() EnumOutput
	ToEnumOutputWithContext(context.Context) EnumOutput
}

var enumPtrType = reflect.TypeOf((**Enum)(nil)).Elem()

type EnumPtrInput interface {
	pulumi.Input

	ToEnumPtrOutput() EnumPtrOutput
	ToEnumPtrOutputWithContext(context.Context) EnumPtrOutput
}

type enumPtr string

func EnumPtr(v string) EnumPtrInput {
	return (*enumPtr)(&v)
}

func (*enumPtr) ElementType() reflect.Type {
	return enumPtrType
}

func (in *enumPtr) ToEnumPtrOutput() EnumPtrOutput {
	return pulumi.ToOutput(in).(EnumPtrOutput)
}

func (in *enumPtr) ToEnumPtrOutputWithContext(ctx context.Context) EnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EnumPtrOutput)
}

type EnumInputEnum string

const (
	EnumInputEnumOne = EnumInputEnum("one")
	EnumInputEnumTwo = EnumInputEnum("two")
)

func (EnumInputEnum) ElementType() reflect.Type {
	return reflect.TypeOf((*EnumInputEnum)(nil)).Elem()
}

func (e EnumInputEnum) ToEnumInputEnumOutput() EnumInputEnumOutput {
	return pulumi.ToOutput(e).(EnumInputEnumOutput)
}

func (e EnumInputEnum) ToEnumInputEnumOutputWithContext(ctx context.Context) EnumInputEnumOutput {
	return pulumi.ToOutputWithContext(ctx, e).(EnumInputEnumOutput)
}

func (e EnumInputEnum) ToEnumInputEnumPtrOutput() EnumInputEnumPtrOutput {
	return e.ToEnumInputEnumPtrOutputWithContext(context.Background())
}

func (e EnumInputEnum) ToEnumInputEnumPtrOutputWithContext(ctx context.Context) EnumInputEnumPtrOutput {
	return EnumInputEnum(e).ToEnumInputEnumOutputWithContext(ctx).ToEnumInputEnumPtrOutputWithContext(ctx)
}

func (e EnumInputEnum) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e EnumInputEnum) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e EnumInputEnum) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e EnumInputEnum) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type EnumInputEnumOutput struct{ *pulumi.OutputState }

func (EnumInputEnumOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EnumInputEnum)(nil)).Elem()
}

func (o EnumInputEnumOutput) ToEnumInputEnumOutput() EnumInputEnumOutput {
	return o
}

func (o EnumInputEnumOutput) ToEnumInputEnumOutputWithContext(ctx context.Context) EnumInputEnumOutput {
	return o
}

func (o EnumInputEnumOutput) ToEnumInputEnumPtrOutput() EnumInputEnumPtrOutput {
	return o.ToEnumInputEnumPtrOutputWithContext(context.Background())
}

func (o EnumInputEnumOutput) ToEnumInputEnumPtrOutputWithContext(ctx context.Context) EnumInputEnumPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v EnumInputEnum) *EnumInputEnum {
		return &v
	}).(EnumInputEnumPtrOutput)
}

func (o EnumInputEnumOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o EnumInputEnumOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EnumInputEnum) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o EnumInputEnumOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EnumInputEnumOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e EnumInputEnum) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type EnumInputEnumPtrOutput struct{ *pulumi.OutputState }

func (EnumInputEnumPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EnumInputEnum)(nil)).Elem()
}

func (o EnumInputEnumPtrOutput) ToEnumInputEnumPtrOutput() EnumInputEnumPtrOutput {
	return o
}

func (o EnumInputEnumPtrOutput) ToEnumInputEnumPtrOutputWithContext(ctx context.Context) EnumInputEnumPtrOutput {
	return o
}

func (o EnumInputEnumPtrOutput) Elem() EnumInputEnumOutput {
	return o.ApplyT(func(v *EnumInputEnum) EnumInputEnum {
		if v != nil {
			return *v
		}
		var ret EnumInputEnum
		return ret
	}).(EnumInputEnumOutput)
}

func (o EnumInputEnumPtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o EnumInputEnumPtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *EnumInputEnum) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// EnumInputEnumInput is an input type that accepts EnumInputEnumArgs and EnumInputEnumOutput values.
// You can construct a concrete instance of `EnumInputEnumInput` via:
//
//          EnumInputEnumArgs{...}
type EnumInputEnumInput interface {
	pulumi.Input

	ToEnumInputEnumOutput() EnumInputEnumOutput
	ToEnumInputEnumOutputWithContext(context.Context) EnumInputEnumOutput
}

var enumInputEnumPtrType = reflect.TypeOf((**EnumInputEnum)(nil)).Elem()

type EnumInputEnumPtrInput interface {
	pulumi.Input

	ToEnumInputEnumPtrOutput() EnumInputEnumPtrOutput
	ToEnumInputEnumPtrOutputWithContext(context.Context) EnumInputEnumPtrOutput
}

type enumInputEnumPtr string

func EnumInputEnumPtr(v string) EnumInputEnumPtrInput {
	return (*enumInputEnumPtr)(&v)
}

func (*enumInputEnumPtr) ElementType() reflect.Type {
	return enumInputEnumPtrType
}

func (in *enumInputEnumPtr) ToEnumInputEnumPtrOutput() EnumInputEnumPtrOutput {
	return pulumi.ToOutput(in).(EnumInputEnumPtrOutput)
}

func (in *enumInputEnumPtr) ToEnumInputEnumPtrOutputWithContext(ctx context.Context) EnumInputEnumPtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(EnumInputEnumPtrOutput)
}

type ResourceType string

const (
	ResourceTypeHaha     = ResourceType("haha")
	ResourceTypeBusiness = ResourceType("business")
)

func (ResourceType) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceType)(nil)).Elem()
}

func (e ResourceType) ToResourceTypeOutput() ResourceTypeOutput {
	return pulumi.ToOutput(e).(ResourceTypeOutput)
}

func (e ResourceType) ToResourceTypeOutputWithContext(ctx context.Context) ResourceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, e).(ResourceTypeOutput)
}

func (e ResourceType) ToResourceTypePtrOutput() ResourceTypePtrOutput {
	return e.ToResourceTypePtrOutputWithContext(context.Background())
}

func (e ResourceType) ToResourceTypePtrOutputWithContext(ctx context.Context) ResourceTypePtrOutput {
	return ResourceType(e).ToResourceTypeOutputWithContext(ctx).ToResourceTypePtrOutputWithContext(ctx)
}

func (e ResourceType) ToStringOutput() pulumi.StringOutput {
	return pulumi.ToOutput(pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceType) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return pulumi.ToOutputWithContext(ctx, pulumi.String(e)).(pulumi.StringOutput)
}

func (e ResourceType) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e ResourceType) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

type ResourceTypeOutput struct{ *pulumi.OutputState }

func (ResourceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResourceType)(nil)).Elem()
}

func (o ResourceTypeOutput) ToResourceTypeOutput() ResourceTypeOutput {
	return o
}

func (o ResourceTypeOutput) ToResourceTypeOutputWithContext(ctx context.Context) ResourceTypeOutput {
	return o
}

func (o ResourceTypeOutput) ToResourceTypePtrOutput() ResourceTypePtrOutput {
	return o.ToResourceTypePtrOutputWithContext(context.Background())
}

func (o ResourceTypeOutput) ToResourceTypePtrOutputWithContext(ctx context.Context) ResourceTypePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ResourceType) *ResourceType {
		return &v
	}).(ResourceTypePtrOutput)
}

func (o ResourceTypeOutput) ToStringOutput() pulumi.StringOutput {
	return o.ToStringOutputWithContext(context.Background())
}

func (o ResourceTypeOutput) ToStringOutputWithContext(ctx context.Context) pulumi.StringOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceType) string {
		return string(e)
	}).(pulumi.StringOutput)
}

func (o ResourceTypeOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceTypeOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e ResourceType) *string {
		v := string(e)
		return &v
	}).(pulumi.StringPtrOutput)
}

type ResourceTypePtrOutput struct{ *pulumi.OutputState }

func (ResourceTypePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourceType)(nil)).Elem()
}

func (o ResourceTypePtrOutput) ToResourceTypePtrOutput() ResourceTypePtrOutput {
	return o
}

func (o ResourceTypePtrOutput) ToResourceTypePtrOutputWithContext(ctx context.Context) ResourceTypePtrOutput {
	return o
}

func (o ResourceTypePtrOutput) Elem() ResourceTypeOutput {
	return o.ApplyT(func(v *ResourceType) ResourceType {
		if v != nil {
			return *v
		}
		var ret ResourceType
		return ret
	}).(ResourceTypeOutput)
}

func (o ResourceTypePtrOutput) ToStringPtrOutput() pulumi.StringPtrOutput {
	return o.ToStringPtrOutputWithContext(context.Background())
}

func (o ResourceTypePtrOutput) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, e *ResourceType) *string {
		if e == nil {
			return nil
		}
		v := string(*e)
		return &v
	}).(pulumi.StringPtrOutput)
}

// ResourceTypeInput is an input type that accepts ResourceTypeArgs and ResourceTypeOutput values.
// You can construct a concrete instance of `ResourceTypeInput` via:
//
//          ResourceTypeArgs{...}
type ResourceTypeInput interface {
	pulumi.Input

	ToResourceTypeOutput() ResourceTypeOutput
	ToResourceTypeOutputWithContext(context.Context) ResourceTypeOutput
}

var resourceTypePtrType = reflect.TypeOf((**ResourceType)(nil)).Elem()

type ResourceTypePtrInput interface {
	pulumi.Input

	ToResourceTypePtrOutput() ResourceTypePtrOutput
	ToResourceTypePtrOutputWithContext(context.Context) ResourceTypePtrOutput
}

type resourceTypePtr string

func ResourceTypePtr(v string) ResourceTypePtrInput {
	return (*resourceTypePtr)(&v)
}

func (*resourceTypePtr) ElementType() reflect.Type {
	return resourceTypePtrType
}

func (in *resourceTypePtr) ToResourceTypePtrOutput() ResourceTypePtrOutput {
	return pulumi.ToOutput(in).(ResourceTypePtrOutput)
}

func (in *resourceTypePtr) ToResourceTypePtrOutputWithContext(ctx context.Context) ResourceTypePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(ResourceTypePtrOutput)
}

func init() {
	pulumi.RegisterOutputType(EnumOutput{})
	pulumi.RegisterOutputType(EnumPtrOutput{})
	pulumi.RegisterOutputType(EnumInputEnumOutput{})
	pulumi.RegisterOutputType(EnumInputEnumPtrOutput{})
	pulumi.RegisterOutputType(ResourceTypeOutput{})
	pulumi.RegisterOutputType(ResourceTypePtrOutput{})
}
