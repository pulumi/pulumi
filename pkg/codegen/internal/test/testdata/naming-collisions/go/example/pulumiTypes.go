// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package example

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Endpoint struct {
	Name *string `pulumi:"name"`
}

// EndpointInput is an input type that accepts EndpointArgs and EndpointOutput values.
// You can construct a concrete instance of `EndpointInput` via:
//
//          EndpointArgs{...}
type EndpointInput interface {
	pulumi.Input

	ToEndpointOutput() EndpointOutput
	ToEndpointOutputWithContext(context.Context) EndpointOutput
}

type EndpointArgs struct {
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (i EndpointArgs) ToEndpointOutput() EndpointOutput {
	return i.ToEndpointOutputWithContext(context.Background())
}

func (i EndpointArgs) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput)
}

type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

func (o EndpointOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Endpoint) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type Object struct {
	Bar *string `pulumi:"bar"`
}

// ObjectInput is an input type that accepts ObjectArgs and ObjectOutput values.
// You can construct a concrete instance of `ObjectInput` via:
//
//          ObjectArgs{...}
type ObjectInput interface {
	pulumi.Input

	ToObjectOutput() ObjectOutput
	ToObjectOutputWithContext(context.Context) ObjectOutput
}

type ObjectArgs struct {
	Bar pulumi.StringPtrInput `pulumi:"bar"`
}

func (ObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Object)(nil)).Elem()
}

func (i ObjectArgs) ToObjectOutput() ObjectOutput {
	return i.ToObjectOutputWithContext(context.Background())
}

func (i ObjectArgs) ToObjectOutputWithContext(ctx context.Context) ObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectOutput)
}

type ObjectOutput struct{ *pulumi.OutputState }

func (ObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Object)(nil)).Elem()
}

func (o ObjectOutput) ToObjectOutput() ObjectOutput {
	return o
}

func (o ObjectOutput) ToObjectOutputWithContext(ctx context.Context) ObjectOutput {
	return o
}

func (o ObjectOutput) Bar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Object) *string { return v.Bar }).(pulumi.StringPtrOutput)
}

type ObjectInputType struct {
	Bar *string `pulumi:"bar"`
}

// ObjectInputTypeInput is an input type that accepts ObjectInputTypeArgs and ObjectInputTypeOutput values.
// You can construct a concrete instance of `ObjectInputTypeInput` via:
//
//          ObjectInputTypeArgs{...}
type ObjectInputTypeInput interface {
	pulumi.Input

	ToObjectInputTypeOutput() ObjectInputTypeOutput
	ToObjectInputTypeOutputWithContext(context.Context) ObjectInputTypeOutput
}

type ObjectInputTypeArgs struct {
	Bar pulumi.StringPtrInput `pulumi:"bar"`
}

func (ObjectInputTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectInputType)(nil)).Elem()
}

func (i ObjectInputTypeArgs) ToObjectInputTypeOutput() ObjectInputTypeOutput {
	return i.ToObjectInputTypeOutputWithContext(context.Background())
}

func (i ObjectInputTypeArgs) ToObjectInputTypeOutputWithContext(ctx context.Context) ObjectInputTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ObjectInputTypeOutput)
}

type ObjectInputTypeOutput struct{ *pulumi.OutputState }

func (ObjectInputTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ObjectInputType)(nil)).Elem()
}

func (o ObjectInputTypeOutput) ToObjectInputTypeOutput() ObjectInputTypeOutput {
	return o
}

func (o ObjectInputTypeOutput) ToObjectInputTypeOutputWithContext(ctx context.Context) ObjectInputTypeOutput {
	return o
}

func (o ObjectInputTypeOutput) Bar() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ObjectInputType) *string { return v.Bar }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(EndpointOutput{})
	pulumi.RegisterOutputType(ObjectOutput{})
	pulumi.RegisterOutputType(ObjectInputTypeOutput{})
}
