// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

import * as pulumiRandom from "@pulumi/random";

export class Cat extends pulumi.CustomResource {
    /**
     * Get an existing Cat resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Cat {
        return new Cat(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'example::Cat';

    /**
     * Returns true if the given object is an instance of Cat.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cat {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cat.__pulumiType;
    }

    public /*out*/ readonly name!: pulumi.Output<string | undefined>;

    /**
     * Create a Cat resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CatArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            inputs["age"] = args ? args.age : undefined;
            inputs["pet"] = args ? args.pet : undefined;
            inputs["name"] = undefined /*out*/;
        } else {
            inputs["name"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Cat.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Cat resource.
 */
export interface CatArgs {
    age?: pulumi.Input<number>;
    pet?: pulumi.Input<inputs.PetArgs>;
}
