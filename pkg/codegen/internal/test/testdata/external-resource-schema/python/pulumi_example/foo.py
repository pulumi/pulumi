# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import dns
from . import iam
import pulumi_google_native

__all__ = ['FooArgs', 'Foo']

@pulumi.input_type
class FooArgs:
    def __init__(__self__, *,
                 audit_config: pulumi.Input['pulumi_google_native.iam.v1.AuditConfigArgs'],
                 dns_key_spec: pulumi.Input['pulumi_google_native.dns.v1.DnsKeySpecArgs'],
                 key: pulumi.Input['pulumi_google_native.iam.v1.Key'],
                 policy: pulumi.Input['pulumi_google_native.dns.v1.Policy']):
        """
        The set of arguments for constructing a Foo resource.
        """
        pulumi.set(__self__, "audit_config", audit_config)
        pulumi.set(__self__, "dns_key_spec", dns_key_spec)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "policy", policy)

    @property
    @pulumi.getter(name="auditConfig")
    def audit_config(self) -> pulumi.Input['pulumi_google_native.iam.v1.AuditConfigArgs']:
        return pulumi.get(self, "audit_config")

    @audit_config.setter
    def audit_config(self, value: pulumi.Input['pulumi_google_native.iam.v1.AuditConfigArgs']):
        pulumi.set(self, "audit_config", value)

    @property
    @pulumi.getter(name="dnsKeySpec")
    def dns_key_spec(self) -> pulumi.Input['pulumi_google_native.dns.v1.DnsKeySpecArgs']:
        return pulumi.get(self, "dns_key_spec")

    @dns_key_spec.setter
    def dns_key_spec(self, value: pulumi.Input['pulumi_google_native.dns.v1.DnsKeySpecArgs']):
        pulumi.set(self, "dns_key_spec", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input['pulumi_google_native.iam.v1.Key']:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input['pulumi_google_native.iam.v1.Key']):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Input['pulumi_google_native.dns.v1.Policy']:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: pulumi.Input['pulumi_google_native.dns.v1.Policy']):
        pulumi.set(self, "policy", value)


class Foo(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audit_config: Optional[pulumi.Input[pulumi.InputType['pulumi_google_native.iam.v1.AuditConfigArgs']]] = None,
                 dns_key_spec: Optional[pulumi.Input[pulumi.InputType['pulumi_google_native.dns.v1.DnsKeySpecArgs']]] = None,
                 key: Optional[pulumi.Input['pulumi_google_native.iam.v1.Key']] = None,
                 policy: Optional[pulumi.Input['pulumi_google_native.dns.v1.Policy']] = None,
                 __props__=None):
        """
        Create a Foo resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FooArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Foo resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FooArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FooArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 audit_config: Optional[pulumi.Input[pulumi.InputType['pulumi_google_native.iam.v1.AuditConfigArgs']]] = None,
                 dns_key_spec: Optional[pulumi.Input[pulumi.InputType['pulumi_google_native.dns.v1.DnsKeySpecArgs']]] = None,
                 key: Optional[pulumi.Input['pulumi_google_native.iam.v1.Key']] = None,
                 policy: Optional[pulumi.Input['pulumi_google_native.dns.v1.Policy']] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FooArgs.__new__(FooArgs)

            if audit_config is None and not opts.urn:
                raise TypeError("Missing required property 'audit_config'")
            __props__.__dict__["audit_config"] = audit_config
            if dns_key_spec is None and not opts.urn:
                raise TypeError("Missing required property 'dns_key_spec'")
            __props__.__dict__["dns_key_spec"] = dns_key_spec
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            if policy is None and not opts.urn:
                raise TypeError("Missing required property 'policy'")
            __props__.__dict__["policy"] = policy
        super(Foo, __self__).__init__(
            'example::Foo',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Foo':
        """
        Get an existing Foo resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = FooArgs.__new__(FooArgs)

        __props__.__dict__["key"] = None
        __props__.__dict__["policy"] = None
        return Foo(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output['pulumi_google_native.iam.v1.Key']:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Output['pulumi_google_native.dns.v1.Policy']:
        return pulumi.get(self, "policy")

