// *** WARNING: this file was generated by tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package codegentest

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Check codegen of functions with a Dict<str,str> parameter.
func FuncWithDictParam(ctx *pulumi.Context, args *FuncWithDictParamArgs, opts ...pulumi.InvokeOption) (*FuncWithDictParamResult, error) {
	var rv FuncWithDictParamResult
	err := ctx.Invoke("madeup-package:codegentest:funcWithDictParam", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type FuncWithDictParamArgs struct {
	A map[string]string `pulumi:"a"`
	B *string `pulumi:"b"`
}


type FuncWithDictParamResult struct {
	R string `pulumi:"r"`
}


func FuncWithDictParamOutput(ctx *pulumi.Context, args FuncWithDictParamOutputArgs, opts ...pulumi.InvokeOption) FuncWithDictParamResultTypeOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (FuncWithDictParamResult, error) {
			args := v.(FuncWithDictParamArgs)
			r, err := FuncWithDictParam(ctx, &args, opts...)
			return *r, err
		}).(FuncWithDictParamResultTypeOutput)
}

type FuncWithDictParamOutputArgs struct {
	A pulumi.StringMapInput `pulumi:"a"`
	B pulumi.StringPtrInput `pulumi:"b"`
}

func (FuncWithDictParamOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FuncWithDictParamArgs)(nil)).Elem()
}

type FuncWithDictParamResultTypeOutput struct { *pulumi.OutputState }

func (FuncWithDictParamResultTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FuncWithDictParamResult)(nil)).Elem()
}

func (o FuncWithDictParamResultTypeOutput) ToFuncWithDictParamResultTypeOutput() FuncWithDictParamResultTypeOutput {
	return o
}

func (o FuncWithDictParamResultTypeOutput) ToFuncWithDictParamResultTypeOutputWithContext(ctx context.Context) FuncWithDictParamResultTypeOutput {
	return o
}

func (o FuncWithDictParamResultTypeOutput) R() pulumi.StringOutput {
	return o.ApplyT(func (v FuncWithDictParamResult) string { return v.R }).(pulumi.StringOutput)
}


func init() {
        pulumi.RegisterOutputType(FuncWithDictParamResultTypeOutput{})
}

