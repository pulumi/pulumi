// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

import {Resource} from "./index";

export class TypeUses extends pulumi.CustomResource {
    /**
     * Get an existing TypeUses resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): TypeUses {
        return new TypeUses(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'example::TypeUses';

    /**
     * Returns true if the given object is an instance of TypeUses.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TypeUses {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TypeUses.__pulumiType;
    }

    public readonly bar!: pulumi.Output<outputs.SomeOtherObject | undefined>;
    public readonly baz!: pulumi.Output<outputs.ObjectWithNodeOptionalInputs | undefined>;
    public readonly foo!: pulumi.Output<outputs.Object | undefined>;

    /**
     * Create a TypeUses resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: TypeUsesArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            inputs["bar"] = args ? args.bar : undefined;
            inputs["baz"] = args ? args.baz : undefined;
            inputs["foo"] = args ? args.foo : undefined;
        } else {
            inputs["bar"] = undefined /*out*/;
            inputs["baz"] = undefined /*out*/;
            inputs["foo"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(TypeUses.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a TypeUses resource.
 */
export interface TypeUsesArgs {
    bar?: pulumi.Input<inputs.SomeOtherObjectArgs>;
    baz?: pulumi.Input<inputs.ObjectWithNodeOptionalInputsArgs>;
    foo?: pulumi.Input<inputs.ObjectArgs>;
}
