# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'Toy',
]

@pulumi.output_type
class Toy(dict):
    """
    This is a toy
    """
    def __init__(__self__, *,
                 associated: Optional['outputs.Toy'] = None,
                 color: Optional[str] = None,
                 wear: Optional[float] = None):
        """
        This is a toy
        """
        if associated is not None:
            pulumi.set(__self__, "associated", associated)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if wear is not None:
            pulumi.set(__self__, "wear", wear)

    @property
    @pulumi.getter
    def associated(self) -> Optional['outputs.Toy']:
        return pulumi.get(self, "associated")

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def wear(self) -> Optional[float]:
        return pulumi.get(self, "wear")


