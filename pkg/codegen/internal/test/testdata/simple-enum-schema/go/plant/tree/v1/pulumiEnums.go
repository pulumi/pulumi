// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Diameter pulumi.Float64

const (
	DiameterSixinch    = Diameter(6)
	DiameterTwelveinch = Diameter(12)
)

type DiameterOutput struct{ *pulumi.OutputState }

func (DiameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Diameter)(nil)).Elem()
}

func (o DiameterOutput) ToDiameterOutput() DiameterOutput {
	return o
}

func (o DiameterOutput) ToDiameterOutputWithContext(ctx context.Context) DiameterOutput {
	return o
}

// DiameterInput is an input type that accepts DiameterArgs and DiameterOutput values.
// You can construct a concrete instance of `DiameterInput` via:
//
//          DiameterArgs{...}
type DiameterInput interface {
	pulumi.Input

	ToDiameterOutput() DiameterOutput
	ToDiameterOutputWithContext(context.Context) DiameterOutput
}

func (Diameter) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.Float64)(nil)).Elem()
}

func (e Diameter) ToDiameterOutput() DiameterOutput {
	return pulumi.ToOutput(Diameter(e)).(DiameterOutput)
}

func (e Diameter) ToDiameterOutputWithContext(ctx context.Context) DiameterOutput {
	return pulumi.ToOutputWithContext(ctx, Diameter(e)).(DiameterOutput)
}

func (e Diameter) ToFloat64PtrOutput() pulumi.Float64PtrOutput {
	return pulumi.Float64(e).ToFloat64PtrOutputWithContext(context.Background())
}

func (e Diameter) ToFloat64PtrOutputWithContext(ctx context.Context) pulumi.Float64PtrOutput {
	return pulumi.Float64(e).ToFloat64OutputWithContext(ctx).ToFloat64PtrOutputWithContext(ctx)
}

type Farm pulumi.String

const (
	Farm_Pulumi_Planters_Inc_ = Farm("Pulumi Planters Inc.")
	Farm_Plants_R_Us          = Farm("Plants'R'Us")
)

type FarmOutput struct{ *pulumi.OutputState }

func (FarmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Farm)(nil)).Elem()
}

func (o FarmOutput) ToFarmOutput() FarmOutput {
	return o
}

func (o FarmOutput) ToFarmOutputWithContext(ctx context.Context) FarmOutput {
	return o
}

// FarmInput is an input type that accepts FarmArgs and FarmOutput values.
// You can construct a concrete instance of `FarmInput` via:
//
//          FarmArgs{...}
type FarmInput interface {
	pulumi.Input

	ToFarmOutput() FarmOutput
	ToFarmOutputWithContext(context.Context) FarmOutput
}

func (Farm) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e Farm) ToFarmOutput() FarmOutput {
	return pulumi.ToOutput(Farm(e)).(FarmOutput)
}

func (e Farm) ToFarmOutputWithContext(ctx context.Context) FarmOutput {
	return pulumi.ToOutputWithContext(ctx, Farm(e)).(FarmOutput)
}

func (e Farm) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e Farm) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// types of rubber trees
type RubberTreeVariety pulumi.String

const (
	// A burgundy rubber tree.
	RubberTreeVarietyBurgundy = RubberTreeVariety("Burgundy")
	// A ruby rubber tree.
	RubberTreeVarietyRuby = RubberTreeVariety("Ruby")
	// A tineke rubber tree.
	RubberTreeVarietyTineke = RubberTreeVariety("Tineke")
)

type RubberTreeVarietyOutput struct{ *pulumi.OutputState }

func (RubberTreeVarietyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RubberTreeVariety)(nil)).Elem()
}

func (o RubberTreeVarietyOutput) ToRubberTreeVarietyOutput() RubberTreeVarietyOutput {
	return o
}

func (o RubberTreeVarietyOutput) ToRubberTreeVarietyOutputWithContext(ctx context.Context) RubberTreeVarietyOutput {
	return o
}

// RubberTreeVarietyInput is an input type that accepts RubberTreeVarietyArgs and RubberTreeVarietyOutput values.
// You can construct a concrete instance of `RubberTreeVarietyInput` via:
//
//          RubberTreeVarietyArgs{...}
type RubberTreeVarietyInput interface {
	pulumi.Input

	ToRubberTreeVarietyOutput() RubberTreeVarietyOutput
	ToRubberTreeVarietyOutputWithContext(context.Context) RubberTreeVarietyOutput
}

func (RubberTreeVariety) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e RubberTreeVariety) ToRubberTreeVarietyOutput() RubberTreeVarietyOutput {
	return pulumi.ToOutput(RubberTreeVariety(e)).(RubberTreeVarietyOutput)
}

func (e RubberTreeVariety) ToRubberTreeVarietyOutputWithContext(ctx context.Context) RubberTreeVarietyOutput {
	return pulumi.ToOutputWithContext(ctx, RubberTreeVariety(e)).(RubberTreeVarietyOutput)
}

func (e RubberTreeVariety) ToStringPtrOutput() pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringPtrOutputWithContext(context.Background())
}

func (e RubberTreeVariety) ToStringPtrOutputWithContext(ctx context.Context) pulumi.StringPtrOutput {
	return pulumi.String(e).ToStringOutputWithContext(ctx).ToStringPtrOutputWithContext(ctx)
}

// RubberTreeVarietyArrayInput is an input type that accepts RubberTreeVarietyArray and RubberTreeVarietyArrayOutput values.
// You can construct a concrete instance of `RubberTreeVarietyArrayInput` via:
//
//          RubberTreeVarietyArray{ RubberTreeVarietyArgs{...} }
type RubberTreeVarietyArrayInput interface {
	pulumi.Input

	ToRubberTreeVarietyArrayOutput() RubberTreeVarietyArrayOutput
	ToRubberTreeVarietyArrayOutputWithContext(context.Context) RubberTreeVarietyArrayOutput
}

type RubberTreeVarietyArray []RubberTreeVariety

func (RubberTreeVarietyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RubberTreeVariety)(nil)).Elem()
}

func (i RubberTreeVarietyArray) ToRubberTreeVarietyArrayOutput() RubberTreeVarietyArrayOutput {
	return i.ToRubberTreeVarietyArrayOutputWithContext(context.Background())
}

func (i RubberTreeVarietyArray) ToRubberTreeVarietyArrayOutputWithContext(ctx context.Context) RubberTreeVarietyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RubberTreeVarietyArrayOutput)
}

type RubberTreeVarietyArrayOutput struct{ *pulumi.OutputState }

func (RubberTreeVarietyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RubberTreeVariety)(nil)).Elem()
}

func (o RubberTreeVarietyArrayOutput) ToRubberTreeVarietyArrayOutput() RubberTreeVarietyArrayOutput {
	return o
}

func (o RubberTreeVarietyArrayOutput) ToRubberTreeVarietyArrayOutputWithContext(ctx context.Context) RubberTreeVarietyArrayOutput {
	return o
}

func (o RubberTreeVarietyArrayOutput) Index(i pulumi.IntInput) RubberTreeVarietyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RubberTreeVarietyOutput {
		return vs[0].([]RubberTreeVariety)[vs[1].(int)].ToRubberTreeVarietyOutput()
	}).(RubberTreeVarietyOutput)
}

type TreeSize pulumi.String

const (
	TreeSizeSmall  = TreeSize("small")
	TreeSizeMedium = TreeSize("medium")
	TreeSizeLarge  = TreeSize("large")
)

type TreeSizeOutput struct{ *pulumi.OutputState }

func (TreeSizeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TreeSize)(nil)).Elem()
}

func (o TreeSizeOutput) ToTreeSizeOutput() TreeSizeOutput {
	return o
}

func (o TreeSizeOutput) ToTreeSizeOutputWithContext(ctx context.Context) TreeSizeOutput {
	return o
}

func (o TreeSizeOutput) ToTreeSizePtrOutput() TreeSizePtrOutput {
	return o.ToTreeSizePtrOutputWithContext(context.Background())
}

func (o TreeSizeOutput) ToTreeSizePtrOutputWithContext(ctx context.Context) TreeSizePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v string) *string {
		return &v
	}).(TreeSizePtrOutput)
}

type TreeSizePtrOutput struct{ *pulumi.OutputState }

// ElementType returns the element type of this Output (*string).
func (TreeSizePtrOutput) ElementType() reflect.Type {
	return treeSizePtrType
}

func (o TreeSizePtrOutput) ToTreeSizePtrOutput() TreeSizePtrOutput {
	return o
}

func (o TreeSizePtrOutput) ToTreeSizePtrOutputWithContext(ctx context.Context) TreeSizePtrOutput {
	return o
}

// Elem dereferences the pointer value or returns the zero value of the approporiate type if the pointer is nil.
func (o TreeSizePtrOutput) Elem() TreeSizeOutput {
	return o.ApplyT(func(v *string) string {
		var ret string
		if v != nil {
			ret = *v
		}
		return ret
	}).(TreeSizeOutput)
}

// TreeSizeInput is an input type that accepts TreeSizeArgs and TreeSizeOutput values.
// You can construct a concrete instance of `TreeSizeInput` via:
//
//          TreeSizeArgs{...}
type TreeSizeInput interface {
	pulumi.Input

	ToTreeSizeOutput() TreeSizeOutput
	ToTreeSizeOutputWithContext(context.Context) TreeSizeOutput
}

func (TreeSize) ElementType() reflect.Type {
	return reflect.TypeOf((*pulumi.String)(nil)).Elem()
}

func (e TreeSize) ToTreeSizeOutput() TreeSizeOutput {
	return pulumi.ToOutput(TreeSize(e)).(TreeSizeOutput)
}

func (e TreeSize) ToTreeSizeOutputWithContext(ctx context.Context) TreeSizeOutput {
	return pulumi.ToOutputWithContext(ctx, TreeSize(e)).(TreeSizeOutput)
}

func (e TreeSize) ToTreeSizePtrOutput() TreeSizePtrOutput {
	return TreeSize(e).ToTreeSizePtrOutputWithContext(context.Background())
}

func (e TreeSize) ToTreeSizePtrOutputWithContext(ctx context.Context) TreeSizePtrOutput {
	return TreeSize(e).ToTreeSizeOutputWithContext(ctx).ToTreeSizePtrOutputWithContext(ctx)
}

var treeSizePtrType = reflect.TypeOf((**string)(nil)).Elem()

type TreeSizePtrInput interface {
	pulumi.Input

	ToTreeSizePtrOutput() TreeSizePtrOutput
	ToTreeSizePtrOutputWithContext(context.Context) TreeSizePtrOutput
}

type treeSizePtr string

func TreeSizePtr(v string) TreeSizePtrInput {
	return (*treeSizePtr)(&v)
}

func (*treeSizePtr) ElementType() reflect.Type {
	return treeSizePtrType
}

func (in *treeSizePtr) ToTreeSizePtrOutput() TreeSizePtrOutput {
	return pulumi.ToOutput(in).(TreeSizePtrOutput)
}

func (in *treeSizePtr) ToTreeSizePtrOutputWithContext(ctx context.Context) TreeSizePtrOutput {
	return pulumi.ToOutputWithContext(ctx, in).(TreeSizePtrOutput)
}

// TreeSizeMapInput is an input type that accepts TreeSizeMap and TreeSizeMapOutput values.
// You can construct a concrete instance of `TreeSizeMapInput` via:
//
//          TreeSizeMap{ "key": TreeSizeArgs{...} }
type TreeSizeMapInput interface {
	pulumi.Input

	ToTreeSizeMapOutput() TreeSizeMapOutput
	ToTreeSizeMapOutputWithContext(context.Context) TreeSizeMapOutput
}

type TreeSizeMap map[string]TreeSize

func (TreeSizeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TreeSize)(nil)).Elem()
}

func (i TreeSizeMap) ToTreeSizeMapOutput() TreeSizeMapOutput {
	return i.ToTreeSizeMapOutputWithContext(context.Background())
}

func (i TreeSizeMap) ToTreeSizeMapOutputWithContext(ctx context.Context) TreeSizeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TreeSizeMapOutput)
}

type TreeSizeMapOutput struct{ *pulumi.OutputState }

func (TreeSizeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]TreeSize)(nil)).Elem()
}

func (o TreeSizeMapOutput) ToTreeSizeMapOutput() TreeSizeMapOutput {
	return o
}

func (o TreeSizeMapOutput) ToTreeSizeMapOutputWithContext(ctx context.Context) TreeSizeMapOutput {
	return o
}

func (o TreeSizeMapOutput) MapIndex(k pulumi.StringInput) TreeSizeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) TreeSizeOutput {
		return vs[0].(map[string]TreeSize)[vs[1].(string)].ToTreeSizeOutput()
	}).(TreeSizeOutput)
}
