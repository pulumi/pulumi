# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from enum import Enum
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables, _enums

__all__ = [
    'ContainerArgs',
]

@pulumi.input_type
class ContainerArgs:
    def __init__(__self__, *,
                 size: pulumi.Input[_enums._ContainerSize],
                 color: Optional[pulumi.Input[Union[_enums._ContainerColor, str]]] = None,
                 material: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "size", size.value if isinstance(size, Enum) else size)
        if color is not None:
            pulumi.set(__self__, "color", color.value if isinstance(color, Enum) else color)
        if material is not None:
            pulumi.set(__self__, "material", material)

@property
@pulumi.getter
def size(self) -> pulumi.Input[_enums._ContainerSize]:
    return pulumi.get(self, "size")

@size.setter
def size(self, value: pulumi.Input[_enums._ContainerSize]):
    pulumi.set(self, "size", value)

@property
@pulumi.getter
def color(self) -> Optional[pulumi.Input[Union[_enums._ContainerColor, str]]]:
    return pulumi.get(self, "color")

@color.setter
def color(self, value: Optional[pulumi.Input[Union[_enums._ContainerColor, str]]]):
    pulumi.set(self, "color", value)

@property
@pulumi.getter
def material(self) -> Optional[pulumi.Input[str]]:
    return pulumi.get(self, "material")

@material.setter
def material(self, value: Optional[pulumi.Input[str]]):
    pulumi.set(self, "material", value)
