package nodejs

import (
	"bytes"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/pkg/v2/codegen/schema"
)

// GenCRDTypes returns a buffer containing the code for header, imports,
// namespaces, and interfaces of all versions.
func GenCRDTypes(tool string, pkg *schema.Package) (*bytes.Buffer, error) {
	// Decode node-specific info
	if err := pkg.ImportLanguages(map[string]schema.Language{"nodejs": Importer}); err != nil {
		return nil, err
	}
	info, _ := pkg.Language["nodejs"].(NodePackageInfo)

	modules, err := generateModuleContextMap(tool, pkg, info, nil)
	if err != nil {
		return nil, err
	}

	for _, mod := range modules {
		if len(mod.types) > 0 {
			buffer := &bytes.Buffer{}
			// Generate the header and imports
			buffer.WriteString(nodejsHeader)

			// Get and generate the namespace
			namespaces := mod.getNamespaces()
			baseNamespace := namespaces[""]
			// Ignore the top-level namespace, we only want versions
			versionNamespaces := baseNamespace.children

			for _, versionNamespace := range versionNamespaces {
				mod.genNamespace(buffer, versionNamespace, true, 0)
			}

			return buffer, nil
		}
	}

	return nil, errors.New("cannot find nodejs module with types")
}

const nodejsHeader = `// *** This file was generated by crd2pulumi. ***

import * as pulumi from "@pulumi/pulumi";
import * as k8s from "@pulumi/kubernetes";

type ObjectMeta = k8s.types.input.meta.v1.ObjectMeta;

`
