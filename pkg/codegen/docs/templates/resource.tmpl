{{ template "header" .Header }}

{{ htmlSafe .Comment }}

<!-- Create resource -->
## Create a {{ .Header.Title }} Resource

{{ htmlSafe "{{< langchoose csharp nojavascript >}}" }}

<div class="highlight"><pre class="chroma"><code class="language-typescript" data-lang="typescript"><span class="k">new </span>{{ template "linkify_param" .ConstructorResource.nodejs }}<span class="p">(</span>{{ htmlSafe .ConstructorParams.nodejs }}<span class="p">);</span></code></pre></div>

<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def </span><span class="nf">{{ .Header.Title }}</span><span class="p">(resource_name, opts=None, </span>{{ htmlSafe .ConstructorParams.python }}<span class="p">, __props__=None);</span></code></pre></div>

<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="k">func </span>New{{ .Header.Title }}<span class="p">(</span>{{ htmlSafe .ConstructorParams.go }}<span class="p">) (*{{ template "linkify_param" .ConstructorResource.go }}, error)</span></code></pre></div>

<div class="highlight"><pre class="chroma"><code class="language-csharp" data-lang="csharp"><span class="k">public </span>{{ template "linkify_param" .ConstructorResource.csharp }}<span class="p">(</span>{{ htmlSafe .ConstructorParams.csharp }}<span class="p">)</span></code></pre></div>

Creates a {{ .Header.Title }} resource with the given unique name, arguments, and options.

{{ htmlSafe "{{% lang nodejs %}}" }}
{{ template "constructor_args" }}
{{ htmlSafe "{{% /lang %}}" }}

{{ htmlSafe "{{% lang go %}}" }}
{{ template "constructor_args" }}
{{ htmlSafe "{{% /lang %}}" }}

{{ htmlSafe "{{% lang csharp %}}" }}
{{ template "constructor_args" }}
{{ htmlSafe "{{% /lang %}}" }}

The following arguments are supported:
{{ template "properties" .InputProperties }}

<!-- Output properties -->
{{ if ne (len .OutputProperties) 0 }}
## {{.Header.Title}} Output Properties

The following output properties are available:

{{ template "properties" .OutputProperties }}
{{ end }}

<!-- Read resource -->
{{ if ne (len .StateInputs) 0 }}
## Look up an Existing {{.Header.Title}} Resource

{{ htmlSafe "{{< langchoose csharp nojavascript >}}" }}

<div class="highlight"><pre class="chroma"><code class="language-typescript" data-lang="typescript"><span class="k">public static </span><span class="nf">get</span><span class="p">(</span>{{ htmlSafe .LookupParams.nodejs }}<span class="p">): </span>{{ template "linkify_param" .ConstructorResource.nodejs }}</code></pre></div>

<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">static </span><span class="nf">get</span><span class="p">(resource_name, id, opts=None, </span>{{ htmlSafe .LookupParams.python }}<span class="p">, __props__=None);</span></code></pre></div>

<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="k">func </span>Get{{ .Header.Title }}<span class="p">(</span>{{ htmlSafe .LookupParams.go }}<span class="p">) (*{{ template "linkify_param" .ConstructorResource.go }}, error)</span></code></pre></div>

<div class="highlight"><pre class="chroma"><code class="language-csharp" data-lang="csharp"><span class="k">public static </span>{{ template "linkify_param" .ConstructorResource.csharp }}<span class="nf"> Get</span><span class="p">(</span>{{ htmlSafe .LookupParams.csharp }}<span class="p">)</span></code></pre></div>

Get an existing {{.Header.Title}} resource's state with the given name, ID, and optional extra properties used to qualify the lookup.

{{ htmlSafe "{{% lang nodejs %}}" }}
{{ template "read_inputs" }}
{{ htmlSafe "{{% /lang %}}" }}

{{ htmlSafe "{{% lang go %}}" }}
{{ template "read_inputs" }}
{{ htmlSafe "{{% /lang %}}" }}

{{ htmlSafe "{{% lang csharp %}}" }}
{{ template "read_inputs" }}
{{ htmlSafe "{{% /lang %}}" }}

The following state arguments are supported:
{{ template "properties" .StateInputs }}

{{ end }}

<!-- Supporting types -->
{{ if ne (len .NestedTypes) 0 }}

## Supporting Types
{{ range .NestedTypes }}
#### {{ .Name }}
{{ htmlSafe "{{% lang nodejs %}}" }}
> See the {{ if ne .APIDocLinks.nodejs.InputType "" }}<a href="{{ .APIDocLinks.nodejs.InputType }}">input</a>{{ end }} {{ if and (ne .APIDocLinks.nodejs.InputType "") (ne .APIDocLinks.nodejs.OutputType "") }}and{{ end }} {{ if ne .APIDocLinks.nodejs.OutputType "" }}<a href="{{ .APIDocLinks.nodejs.OutputType }}">output</a>{{ end }} API doc for this type.
{{ htmlSafe "{{% /lang %}}" }}

{{ htmlSafe "{{% lang go %}}" }}
> See the {{ if ne .APIDocLinks.go.InputType "" }}<a href="{{ .APIDocLinks.go.InputType }}">input</a>{{ end }} {{ if and (ne .APIDocLinks.go.InputType "") (ne .APIDocLinks.go.OutputType "") }}and{{ end }} {{ if ne .APIDocLinks.go.OutputType "" }}<a href="{{ .APIDocLinks.go.OutputType }}">output</a>{{ end }} API doc for this type.
{{ htmlSafe "{{% /lang %}}" }}

{{ htmlSafe "{{% lang csharp %}}" }}
> See the {{ if ne .APIDocLinks.csharp.InputType "" }}<a href="{{ .APIDocLinks.csharp.InputType }}">input</a>{{ end }} {{ if and (ne .APIDocLinks.csharp.InputType "") (ne .APIDocLinks.csharp.OutputType "") }}and{{ end }} {{ if ne .APIDocLinks.csharp.OutputType "" }}<a href="{{ .APIDocLinks.csharp.OutputType }}">output</a>{{ end }} API doc for this type.
{{ htmlSafe "{{% /lang %}}" }}

{{ template "properties" .Properties }}
{{ end }}

{{ end }}
