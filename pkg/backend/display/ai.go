// Copyright 2025, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package display

import (
	"fmt"
	"os"
	"strings"

	"github.com/pulumi/pulumi/sdk/v3/go/common/diag/colors"
	"github.com/pulumi/pulumi/sdk/v3/go/common/util/cmdutil"
)

// CopilotErrorSummaryMetadata contains metadata about a Copilot error summary.
type CopilotErrorSummaryMetadata struct {
	Summary   string // The summary generated by Copilot.
	ElapsedMs int64  // The time taken to generate the summary.
}

// copilotEmojiOr returns the emoji for Copilot or an empty string if emojis are disabled.
// Exposed here for testing.
func copilotEmojiOr() string {
	return cmdutil.EmojiOr(" âœ¨", "")
}

// RenderCopilotErrorSummary renders a Copilot error summary to the console.
func RenderCopilotErrorSummary(summary *CopilotErrorSummaryMetadata, err error, opts Options) {
	out := opts.Stdout
	if out == nil {
		out = os.Stdout
	}

	// Generate the header with the time taken to generate the summary.
	timeString := ""
	if summary != nil {
		timeString = fmt.Sprintf(" %dms", summary.ElapsedMs)
	}
	header := opts.Color.Colorize(
		colors.SpecHeadline + "AI-generated summary" + copilotEmojiOr() + ":" + colors.Reset + timeString)

	// Print the header.
	fmt.Fprintln(out, header)

	// Print the error if there was one and return.
	if err != nil {
		fmt.Fprintf(out, "  error summarizing update output: %s\n", err)
		fmt.Fprintln(out)
		return
	}

	summaryLines := strings.Split(summary.Summary, "\n")
	for _, line := range summaryLines {
		fmt.Fprintln(out, "  "+opts.Color.Colorize(colors.BrightGreen+line+colors.Reset))
	}
	fmt.Fprintln(out)
}
