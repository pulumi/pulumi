# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = ['SqlResourceSqlContainerArgs', 'SqlResourceSqlContainer']

@pulumi.input_type
class SqlResourceSqlContainerArgs:
    def __init__(__self__):
        """
        The set of arguments for constructing a SqlResourceSqlContainer resource.
        """
        pass


class SqlResourceSqlContainer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None):
        """
        An Azure Cosmos DB container.
        API Version: 2021-03-15.

        ## Example Usage
        ### CosmosDBSqlContainerCreateUpdate

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        sql_resource_sql_container = azure_native.documentdb.SqlResourceSqlContainer("sqlResourceSqlContainer",
            account_name="ddb1",
            container_name="containerName",
            database_name="databaseName",
            location="West US",
            options=azure_native.documentdb.CreateUpdateOptionsArgs(),
            resource=azure_native.documentdb.SqlContainerResourceArgs(
                conflict_resolution_policy=azure_native.documentdb.ConflictResolutionPolicyArgs(
                    conflict_resolution_path="/path",
                    mode="LastWriterWins",
                ),
                default_ttl=100,
                id="containerName",
                indexing_policy=azure_native.documentdb.IndexingPolicyArgs(
                    automatic=True,
                    excluded_paths=[],
                    included_paths=[azure_native.documentdb.IncludedPathArgs(
                        indexes=[
                            azure_native.documentdb.IndexesArgs(
                                data_type="String",
                                kind="Range",
                                precision=-1,
                            ),
                            azure_native.documentdb.IndexesArgs(
                                data_type="Number",
                                kind="Range",
                                precision=-1,
                            ),
                        ],
                        path="/*",
                    )],
                    indexing_mode="consistent",
                ),
                partition_key=azure_native.documentdb.ContainerPartitionKeyArgs(
                    kind="Hash",
                    paths=["/AccountNumber"],
                ),
                unique_key_policy=azure_native.documentdb.UniqueKeyPolicyArgs(
                    unique_keys=[azure_native.documentdb.UniqueKeyArgs(
                        paths=["/testPath"],
                    )],
                ),
            ),
            resource_group_name="rg1",
            tags={})

        ```

        ## Import

        An existing resource can be imported using its type token, name, and identifier, e.g.

        ```sh
        $ pulumi import azure-native:documentdb:SqlResourceSqlContainer containerName /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName 
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SqlResourceSqlContainerArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        An Azure Cosmos DB container.
        API Version: 2021-03-15.

        ## Example Usage
        ### CosmosDBSqlContainerCreateUpdate

        ```python
        import pulumi
        import pulumi_azure_native as azure_native

        sql_resource_sql_container = azure_native.documentdb.SqlResourceSqlContainer("sqlResourceSqlContainer",
            account_name="ddb1",
            container_name="containerName",
            database_name="databaseName",
            location="West US",
            options=azure_native.documentdb.CreateUpdateOptionsArgs(),
            resource=azure_native.documentdb.SqlContainerResourceArgs(
                conflict_resolution_policy=azure_native.documentdb.ConflictResolutionPolicyArgs(
                    conflict_resolution_path="/path",
                    mode="LastWriterWins",
                ),
                default_ttl=100,
                id="containerName",
                indexing_policy=azure_native.documentdb.IndexingPolicyArgs(
                    automatic=True,
                    excluded_paths=[],
                    included_paths=[azure_native.documentdb.IncludedPathArgs(
                        indexes=[
                            azure_native.documentdb.IndexesArgs(
                                data_type="String",
                                kind="Range",
                                precision=-1,
                            ),
                            azure_native.documentdb.IndexesArgs(
                                data_type="Number",
                                kind="Range",
                                precision=-1,
                            ),
                        ],
                        path="/*",
                    )],
                    indexing_mode="consistent",
                ),
                partition_key=azure_native.documentdb.ContainerPartitionKeyArgs(
                    kind="Hash",
                    paths=["/AccountNumber"],
                ),
                unique_key_policy=azure_native.documentdb.UniqueKeyPolicyArgs(
                    unique_keys=[azure_native.documentdb.UniqueKeyArgs(
                        paths=["/testPath"],
                    )],
                ),
            ),
            resource_group_name="rg1",
            tags={})

        ```

        ## Import

        An existing resource can be imported using its type token, name, and identifier, e.g.

        ```sh
        $ pulumi import azure-native:documentdb:SqlResourceSqlContainer containerName /subscriptions/subid/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/ddb1/sqlDatabases/databaseName/sqlContainers/containerName 
        ```

        :param str resource_name: The name of the resource.
        :param SqlResourceSqlContainerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SqlResourceSqlContainerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SqlResourceSqlContainerArgs.__new__(SqlResourceSqlContainerArgs)

            __props__.__dict__["resource"] = None
        super(SqlResourceSqlContainer, __self__).__init__(
            'azure-native:documentdb:SqlResourceSqlContainer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'SqlResourceSqlContainer':
        """
        Get an existing SqlResourceSqlContainer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = SqlResourceSqlContainerArgs.__new__(SqlResourceSqlContainerArgs)

        __props__.__dict__["resource"] = None
        return SqlResourceSqlContainer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Output[Optional['outputs.SqlContainerGetPropertiesResponseResource']]:
        return pulumi.get(self, "resource")

