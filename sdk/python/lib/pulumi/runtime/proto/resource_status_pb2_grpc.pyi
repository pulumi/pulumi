"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2025, Pulumi Corporation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import abc
import grpc
import grpc.aio
import typing
import pulumi.resource_status_pb2

class ResourceStatusStub:
    """ResourceStatus is an interface that can be called from a resource provider to update status about a resource."""

    def __init__(self, channel: grpc.Channel) -> None: ...
    PublishViewSteps: grpc.UnaryUnaryMultiCallable[
        pulumi.resource_status_pb2.PublishViewStepsRequest,
        pulumi.resource_status_pb2.PublishViewStepsResponse,
    ]
    """`PublishViewSteps` is used to publish a series of steps for a view resource.
    Views can be materialized via create and update steps, and more complex
    changes, such as replacements, can be modeled as a series of steps.
    The engine does not actually apply these steps, but rather flows them through
    the engine such that the view resources are written to state and the view
    resources are displayed in the UI.
    """

class ResourceStatusServicer(metaclass=abc.ABCMeta):
    """ResourceStatus is an interface that can be called from a resource provider to update status about a resource."""

    
    def PublishViewSteps(
        self,
        request: pulumi.resource_status_pb2.PublishViewStepsRequest,
        context: grpc.ServicerContext,
    ) -> pulumi.resource_status_pb2.PublishViewStepsResponse:
        """`PublishViewSteps` is used to publish a series of steps for a view resource.
        Views can be materialized via create and update steps, and more complex
        changes, such as replacements, can be modeled as a series of steps.
        The engine does not actually apply these steps, but rather flows them through
        the engine such that the view resources are written to state and the view
        resources are displayed in the UI.
        """

def add_ResourceStatusServicer_to_server(servicer: ResourceStatusServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
