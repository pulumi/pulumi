"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2025, Pulumi Corporation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class PackageInfo(google.protobuf.message.Message):
    """PackageInfo is a descripition of a Pulumi Package"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class LanguageEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.bytes
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.bytes = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    VERSION_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    KEYWORDS_FIELD_NUMBER: builtins.int
    HOMEPAGE_FIELD_NUMBER: builtins.int
    LICENSE_FIELD_NUMBER: builtins.int
    ATTRIBUTION_FIELD_NUMBER: builtins.int
    REPOSITORY_FIELD_NUMBER: builtins.int
    LOGO_URL_FIELD_NUMBER: builtins.int
    PLUGIN_DOWNLOAD_URL_FIELD_NUMBER: builtins.int
    PUBLISHER_FIELD_NUMBER: builtins.int
    META_FIELD_NUMBER: builtins.int
    PROVIDER_FIELD_NUMBER: builtins.int
    LANGUAGE_FIELD_NUMBER: builtins.int
    PARAMETERIZATION_FIELD_NUMBER: builtins.int
    ALLOWED_PACKAGE_NAMES_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The unqualified name of the package (e.g. "aws", "azure", "gcp", "kubernetes", "random")"""
    display_name: builtins.str
    """The human-friendly display name of the package"""
    version: builtins.str
    """The version of the package. The version must be valid semver"""
    description: builtins.str
    """The description of the package. Descriptions are interpreted as Markdown"""
    @property
    def keywords(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """The list of keywords associated with the package if any"""
    homepage: builtins.str
    """The URL to the package's homepage"""
    license: builtins.str
    """The license under which the package is distributed"""
    attribution: builtins.str
    """Freeform text attribution of derived work, if required"""
    repository: builtins.str
    """The URL to the package's repository"""
    logo_url: builtins.str
    """The URL to the package's logo"""
    plugin_download_url: builtins.str
    """The URL to use when downloading the provider plugin binary"""
    publisher: builtins.str
    """The name of the person or organization that published the package"""
    @property
    def meta(self) -> global___Meta:
        """Format metadata about this package"""
    @property
    def provider(self) -> global___ResourceSpec:
        """The provider type for this package"""
    @property
    def language(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.bytes]:
        """Additional language-specific data about the package"""
    @property
    def parameterization(self) -> global___Parameterization:
        """AN optional object to define parameterization for the package"""
    @property
    def allowed_package_names(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """A list of allowed package names in addition to the name property"""
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        display_name: builtins.str | None = ...,
        version: builtins.str | None = ...,
        description: builtins.str | None = ...,
        keywords: collections.abc.Iterable[builtins.str] | None = ...,
        homepage: builtins.str | None = ...,
        license: builtins.str | None = ...,
        attribution: builtins.str | None = ...,
        repository: builtins.str | None = ...,
        logo_url: builtins.str | None = ...,
        plugin_download_url: builtins.str | None = ...,
        publisher: builtins.str | None = ...,
        meta: global___Meta | None = ...,
        provider: global___ResourceSpec | None = ...,
        language: collections.abc.Mapping[builtins.str, builtins.bytes] | None = ...,
        parameterization: global___Parameterization | None = ...,
        allowed_package_names: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_attribution", b"_attribution", "_description", b"_description", "_display_name", b"_display_name", "_homepage", b"_homepage", "_license", b"_license", "_logo_url", b"_logo_url", "_meta", b"_meta", "_parameterization", b"_parameterization", "_plugin_download_url", b"_plugin_download_url", "_provider", b"_provider", "_publisher", b"_publisher", "_repository", b"_repository", "_version", b"_version", "attribution", b"attribution", "description", b"description", "display_name", b"display_name", "homepage", b"homepage", "license", b"license", "logo_url", b"logo_url", "meta", b"meta", "parameterization", b"parameterization", "plugin_download_url", b"plugin_download_url", "provider", b"provider", "publisher", b"publisher", "repository", b"repository", "version", b"version"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_attribution", b"_attribution", "_description", b"_description", "_display_name", b"_display_name", "_homepage", b"_homepage", "_license", b"_license", "_logo_url", b"_logo_url", "_meta", b"_meta", "_parameterization", b"_parameterization", "_plugin_download_url", b"_plugin_download_url", "_provider", b"_provider", "_publisher", b"_publisher", "_repository", b"_repository", "_version", b"_version", "allowed_package_names", b"allowed_package_names", "attribution", b"attribution", "description", b"description", "display_name", b"display_name", "homepage", b"homepage", "keywords", b"keywords", "language", b"language", "license", b"license", "logo_url", b"logo_url", "meta", b"meta", "name", b"name", "parameterization", b"parameterization", "plugin_download_url", b"plugin_download_url", "provider", b"provider", "publisher", b"publisher", "repository", b"repository", "version", b"version"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_attribution", b"_attribution"]) -> typing_extensions.Literal["attribution"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_description", b"_description"]) -> typing_extensions.Literal["description"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_display_name", b"_display_name"]) -> typing_extensions.Literal["display_name"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_homepage", b"_homepage"]) -> typing_extensions.Literal["homepage"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_license", b"_license"]) -> typing_extensions.Literal["license"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_logo_url", b"_logo_url"]) -> typing_extensions.Literal["logo_url"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_meta", b"_meta"]) -> typing_extensions.Literal["meta"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_parameterization", b"_parameterization"]) -> typing_extensions.Literal["parameterization"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_plugin_download_url", b"_plugin_download_url"]) -> typing_extensions.Literal["plugin_download_url"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_provider", b"_provider"]) -> typing_extensions.Literal["provider"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_publisher", b"_publisher"]) -> typing_extensions.Literal["publisher"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_repository", b"_repository"]) -> typing_extensions.Literal["repository"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_version", b"_version"]) -> typing_extensions.Literal["version"] | None: ...

global___PackageInfo = PackageInfo

@typing_extensions.final
class Parameterization(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PLUGIN_NAME_FIELD_NUMBER: builtins.int
    PLUGIN_VERSION_FIELD_NUMBER: builtins.int
    PARAMETER_FIELD_NUMBER: builtins.int
    plugin_name: builtins.str
    """The unqualified name of the plugin to be parameterized."""
    plugin_version: builtins.str
    """The version of the plugin to be parameterized. The version must be valid semver"""
    parameter: builtins.bytes
    """The parameter for the provider"""
    def __init__(
        self,
        *,
        plugin_name: builtins.str = ...,
        plugin_version: builtins.str = ...,
        parameter: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["parameter", b"parameter", "plugin_name", b"plugin_name", "plugin_version", b"plugin_version"]) -> None: ...

global___Parameterization = Parameterization

@typing_extensions.final
class BaseProvider(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    def __init__(
        self,
    ) -> None: ...

global___BaseProvider = BaseProvider

@typing_extensions.final
class Meta(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MODULE_FORMAT_FIELD_NUMBER: builtins.int
    SUPPORT_PACK_FIELD_NUMBER: builtins.int
    module_format: builtins.str
    """A regex that is used by the importer to extract a module name from the module portion of
    a type token. Packages that use the module format \\"namespace1/namespace2/.../namespaceN\\"
    do not need to specify a format. The regex must define one capturing group that contains
    the module name, which must be formatted as \\"namespace1/namespace2/...namespaceN\\"
    """
    support_pack: builtins.bool
    """Write the package to support the pack command"""
    def __init__(
        self,
        *,
        module_format: builtins.str | None = ...,
        support_pack: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_module_format", b"_module_format", "module_format", b"module_format"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_module_format", b"_module_format", "module_format", b"module_format", "support_pack", b"support_pack"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_module_format", b"_module_format"]) -> typing_extensions.Literal["module_format"] | None: ...

global___Meta = Meta

@typing_extensions.final
class TypeSpec(google.protobuf.message.Message):
    """A reference to the type."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PLAIN_FIELD_NUMBER: builtins.int
    PRIMITIVE_TYPE_FIELD_NUMBER: builtins.int
    ARRAY_TYPE_FIELD_NUMBER: builtins.int
    MAP_TYPE_FIELD_NUMBER: builtins.int
    REF_FIELD_NUMBER: builtins.int
    UNION_FIELD_NUMBER: builtins.int
    plain: builtins.bool
    """Indicates that when used as an input, this type does not accept eventual values."""
    primitive_type: builtins.str
    """A reference to a primitive type."""
    @property
    def array_type(self) -> global___TypeList:
        """A reference to an array type."""
    @property
    def map_type(self) -> global___TypeMap:
        """A reference to a map type."""
    @property
    def ref(self) -> global___Ref:
        """A reference to a type by its name."""
    @property
    def union(self) -> global___UnionType:
        """A reference to a union type."""
    def __init__(
        self,
        *,
        plain: builtins.bool = ...,
        primitive_type: builtins.str = ...,
        array_type: global___TypeList | None = ...,
        map_type: global___TypeMap | None = ...,
        ref: global___Ref | None = ...,
        union: global___UnionType | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["array_type", b"array_type", "map_type", b"map_type", "primitive_type", b"primitive_type", "ref", b"ref", "type", b"type", "union", b"union"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["array_type", b"array_type", "map_type", b"map_type", "plain", b"plain", "primitive_type", b"primitive_type", "ref", b"ref", "type", b"type", "union", b"union"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["type", b"type"]) -> typing_extensions.Literal["primitive_type", "array_type", "map_type", "ref", "union"] | None: ...

global___TypeSpec = TypeSpec

@typing_extensions.final
class Ref(google.protobuf.message.Message):
    """A referenced type"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SCHEMA_PATH_FIELD_NUMBER: builtins.int
    TYPE_PATH_FIELD_NUMBER: builtins.int
    schema_path: builtins.str
    """The path to the schema file"""
    type_path: builtins.str
    """The name of the type"""
    def __init__(
        self,
        *,
        schema_path: builtins.str | None = ...,
        type_path: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_schema_path", b"_schema_path", "_type_path", b"_type_path", "schema_path", b"schema_path", "type_path", b"type_path"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_schema_path", b"_schema_path", "_type_path", b"_type_path", "schema_path", b"schema_path", "type_path", b"type_path"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_schema_path", b"_schema_path"]) -> typing_extensions.Literal["schema_path"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_type_path", b"_type_path"]) -> typing_extensions.Literal["type_path"] | None: ...

global___Ref = Ref

@typing_extensions.final
class TypeList(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    @property
    def type(self) -> global___TypeSpec:
        """An array of elements"""
    def __init__(
        self,
        *,
        type: global___TypeSpec | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["type", b"type"]) -> None: ...

global___TypeList = TypeList

@typing_extensions.final
class TypeMap(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TYPE_FIELD_NUMBER: builtins.int
    @property
    def type(self) -> global___TypeSpec:
        """A map of elements"""
    def __init__(
        self,
        *,
        type: global___TypeSpec | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["type", b"type"]) -> None: ...

global___TypeMap = TypeMap

@typing_extensions.final
class PropertySpec(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class LanguageEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    TYPE_SPEC_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    CONST_FIELD_NUMBER: builtins.int
    DEFAULT_FIELD_NUMBER: builtins.int
    DEFAULT_INFO_FIELD_NUMBER: builtins.int
    DEPRECATION_MESSAGE_FIELD_NUMBER: builtins.int
    LANGUAGE_FIELD_NUMBER: builtins.int
    SECRET_FIELD_NUMBER: builtins.int
    REPLACE_ON_CHANGES_FIELD_NUMBER: builtins.int
    WILL_REPLACE_ON_CHANGES_FIELD_NUMBER: builtins.int
    @property
    def type_spec(self) -> global___TypeSpec:
        """The typespec of the property"""
    description: builtins.str
    """The description of the property if any. Interpreted as Markdown"""
    @property
    def const(self) -> global___Value:
        """The constant value for the property. Must be assignable to the type of the property."""
    @property
    def default(self) -> global___Value:
        """The default value for the property if any.  Must by assignable to the type of the property."""
    @property
    def default_info(self) -> global___DefaultInfo:
        """Additional information about the property's default value if any."""
    deprecation_message: builtins.str
    """Indicates whether a property is deprecated."""
    @property
    def language(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """Additional language-specific data about the property"""
    secret: builtins.bool
    """Indicates whether the property is secret."""
    replace_on_changes: builtins.bool
    """Indicates whether the property should be replaced on changes."""
    will_replace_on_changes: builtins.bool
    """Indicates whether the provider will replace the resource when this property is changed."""
    def __init__(
        self,
        *,
        type_spec: global___TypeSpec | None = ...,
        description: builtins.str | None = ...,
        const: global___Value | None = ...,
        default: global___Value | None = ...,
        default_info: global___DefaultInfo | None = ...,
        deprecation_message: builtins.str | None = ...,
        language: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        secret: builtins.bool = ...,
        replace_on_changes: builtins.bool = ...,
        will_replace_on_changes: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_const", b"_const", "_default", b"_default", "_default_info", b"_default_info", "_deprecation_message", b"_deprecation_message", "_description", b"_description", "const", b"const", "default", b"default", "default_info", b"default_info", "deprecation_message", b"deprecation_message", "description", b"description", "type_spec", b"type_spec"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_const", b"_const", "_default", b"_default", "_default_info", b"_default_info", "_deprecation_message", b"_deprecation_message", "_description", b"_description", "const", b"const", "default", b"default", "default_info", b"default_info", "deprecation_message", b"deprecation_message", "description", b"description", "language", b"language", "replace_on_changes", b"replace_on_changes", "secret", b"secret", "type_spec", b"type_spec", "will_replace_on_changes", b"will_replace_on_changes"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_const", b"_const"]) -> typing_extensions.Literal["const"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_default", b"_default"]) -> typing_extensions.Literal["default"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_default_info", b"_default_info"]) -> typing_extensions.Literal["default_info"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_deprecation_message", b"_deprecation_message"]) -> typing_extensions.Literal["deprecation_message"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_description", b"_description"]) -> typing_extensions.Literal["description"] | None: ...

global___PropertySpec = PropertySpec

@typing_extensions.final
class ObjectTypeSpec(google.protobuf.message.Message):
    """Describes an object type"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class PropertiesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___PropertySpec: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___PropertySpec | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class LanguageEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    DESCRIPTION_FIELD_NUMBER: builtins.int
    PROPERTIES_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    REQUIRED_FIELD_NUMBER: builtins.int
    LANGUAGE_FIELD_NUMBER: builtins.int
    IS_OVERLAY_FIELD_NUMBER: builtins.int
    OVERLAY_SUPPORTED_LANGUAGES_FIELD_NUMBER: builtins.int
    description: builtins.str
    """The description of the type if any"""
    @property
    def properties(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___PropertySpec]:
        """A map of property name to property spec that describes the objects properties"""
    type: builtins.str
    """The type of the object"""
    @property
    def required(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """A list of names of an object typ's required properties. These properties must be set for inputs and will always be set for outputs."""
    @property
    def language(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """Additional language-specific data about the object type"""
    is_overlay: builtins.bool
    """Indicates whether the type is an overlay provided by the package"""
    @property
    def overlay_supported_languages(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """A list of languages that the overlay supports"""
    def __init__(
        self,
        *,
        description: builtins.str | None = ...,
        properties: collections.abc.Mapping[builtins.str, global___PropertySpec] | None = ...,
        type: builtins.str | None = ...,
        required: collections.abc.Iterable[builtins.str] | None = ...,
        language: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
        is_overlay: builtins.bool = ...,
        overlay_supported_languages: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_description", b"_description", "_type", b"_type", "description", b"description", "type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_description", b"_description", "_type", b"_type", "description", b"description", "is_overlay", b"is_overlay", "language", b"language", "overlay_supported_languages", b"overlay_supported_languages", "properties", b"properties", "required", b"required", "type", b"type"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_description", b"_description"]) -> typing_extensions.Literal["description"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_type", b"_type"]) -> typing_extensions.Literal["type"] | None: ...

global___ObjectTypeSpec = ObjectTypeSpec

@typing_extensions.final
class ResourceSpec(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class MethodsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    OBJECT_TYPE_SPEC_FIELD_NUMBER: builtins.int
    REQUIRED_INPUTS_FIELD_NUMBER: builtins.int
    STATE_INPUTS_FIELD_NUMBER: builtins.int
    ALIASES_FIELD_NUMBER: builtins.int
    DEPRECATION_MESSAGE_FIELD_NUMBER: builtins.int
    IS_COMPONENT_FIELD_NUMBER: builtins.int
    METHODS_FIELD_NUMBER: builtins.int
    @property
    def object_type_spec(self) -> global___ObjectTypeSpec:
        """The object type spec that describes the resource"""
    @property
    def required_inputs(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """A list of the names of the resource's required input properties."""
    @property
    def state_inputs(self) -> global___ObjectTypeSpec:
        """An optional object type spec that describes additional inputs that may be necessary to get an existing resource.
        If this is unset only an ID is necessary
        """
    @property
    def aliases(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Alias]:
        """The list of aliases for the resource"""
    deprecation_message: builtins.str
    """Indicates whether the resource is deprecated"""
    is_component: builtins.bool
    """Indicates whether the resource is a component."""
    @property
    def methods(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """A map of method name to function token that describes the resource's method set"""
    def __init__(
        self,
        *,
        object_type_spec: global___ObjectTypeSpec | None = ...,
        required_inputs: collections.abc.Iterable[builtins.str] | None = ...,
        state_inputs: global___ObjectTypeSpec | None = ...,
        aliases: collections.abc.Iterable[global___Alias] | None = ...,
        deprecation_message: builtins.str | None = ...,
        is_component: builtins.bool = ...,
        methods: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_deprecation_message", b"_deprecation_message", "_state_inputs", b"_state_inputs", "deprecation_message", b"deprecation_message", "object_type_spec", b"object_type_spec", "state_inputs", b"state_inputs"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_deprecation_message", b"_deprecation_message", "_state_inputs", b"_state_inputs", "aliases", b"aliases", "deprecation_message", b"deprecation_message", "is_component", b"is_component", "methods", b"methods", "object_type_spec", b"object_type_spec", "required_inputs", b"required_inputs", "state_inputs", b"state_inputs"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_deprecation_message", b"_deprecation_message"]) -> typing_extensions.Literal["deprecation_message"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_state_inputs", b"_state_inputs"]) -> typing_extensions.Literal["state_inputs"] | None: ...

global___ResourceSpec = ResourceSpec

@typing_extensions.final
class Alias(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    PROJECT_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    name: builtins.str
    """The name of the alias"""
    project: builtins.str
    """The project portion of the alias"""
    type: builtins.str
    """The type portion of the alias"""
    def __init__(
        self,
        *,
        name: builtins.str | None = ...,
        project: builtins.str | None = ...,
        type: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_name", b"_name", "_project", b"_project", "_type", b"_type", "name", b"name", "project", b"project", "type", b"type"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_name", b"_name", "_project", b"_project", "_type", b"_type", "name", b"name", "project", b"project", "type", b"type"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_name", b"_name"]) -> typing_extensions.Literal["name"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_project", b"_project"]) -> typing_extensions.Literal["project"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_type", b"_type"]) -> typing_extensions.Literal["type"] | None: ...

global___Alias = Alias

@typing_extensions.final
class Value(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NUMBER_VALUE_FIELD_NUMBER: builtins.int
    STRING_VALUE_FIELD_NUMBER: builtins.int
    BOOL_VALUE_FIELD_NUMBER: builtins.int
    number_value: builtins.float
    string_value: builtins.str
    bool_value: builtins.bool
    def __init__(
        self,
        *,
        number_value: builtins.float = ...,
        string_value: builtins.str = ...,
        bool_value: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bool_value", b"bool_value", "kind", b"kind", "number_value", b"number_value", "string_value", b"string_value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bool_value", b"bool_value", "kind", b"kind", "number_value", b"number_value", "string_value", b"string_value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["kind", b"kind"]) -> typing_extensions.Literal["number_value", "string_value", "bool_value"] | None: ...

global___Value = Value

@typing_extensions.final
class UnionType(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ONE_OF_FIELD_NUMBER: builtins.int
    DISCRIMINATOR_FIELD_NUMBER: builtins.int
    @property
    def one_of(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TypeSpec]:
        """Indicates that the value may be one of the listed types"""
    @property
    def discriminator(self) -> global___Discriminator:
        """Informs the consumer of an alternative schema based on the value associated with it"""
    def __init__(
        self,
        *,
        one_of: collections.abc.Iterable[global___TypeSpec] | None = ...,
        discriminator: global___Discriminator | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_discriminator", b"_discriminator", "discriminator", b"discriminator"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_discriminator", b"_discriminator", "discriminator", b"discriminator", "one_of", b"one_of"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_discriminator", b"_discriminator"]) -> typing_extensions.Literal["discriminator"] | None: ...

global___UnionType = UnionType

@typing_extensions.final
class Discriminator(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class MappingEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    PROPERTY_NAME_FIELD_NUMBER: builtins.int
    MAPPING_FIELD_NUMBER: builtins.int
    property_name: builtins.str
    """The name of the property in the payload that will hold the discriminator value"""
    @property
    def mapping(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """An optional object to hold mappings between payload values and schema names or references"""
    def __init__(
        self,
        *,
        property_name: builtins.str = ...,
        mapping: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["mapping", b"mapping", "property_name", b"property_name"]) -> None: ...

global___Discriminator = Discriminator

@typing_extensions.final
class DefaultInfo(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class LanguageEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    ENVIRONMENT_FIELD_NUMBER: builtins.int
    LANGUAGE_FIELD_NUMBER: builtins.int
    @property
    def environment(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """A set of environment variables to probe for a default value"""
    @property
    def language(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """Additional language-specific data about the default value"""
    def __init__(
        self,
        *,
        environment: collections.abc.Iterable[builtins.str] | None = ...,
        language: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["environment", b"environment", "language", b"language"]) -> None: ...

global___DefaultInfo = DefaultInfo
