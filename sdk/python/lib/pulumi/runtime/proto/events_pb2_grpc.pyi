"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2025, Pulumi Corporation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import abc
import collections.abc
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing
import grpc.aio
import pulumi.events_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class EventsStub:
    """Events is a service for receiving engine events over gRPC.
    This service allows the Pulumi CLI to send engine events to clients
    (such as the Automation API) over a gRPC stream instead of writing them to
    a file on the filesystem and reading them from there.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    StreamEvents: grpc.StreamUnaryMultiCallable[
        pulumi.events_pb2.EventRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """StreamEvents allows the client to stream multiple engine events to the server.
    The client sends multiple EventRequest messages over the stream, and the server
    processes them as they arrive. When the client is done sending events, it closes
    the stream.
    """

class EventsAsyncStub:
    """Events is a service for receiving engine events over gRPC.
    This service allows the Pulumi CLI to send engine events to clients
    (such as the Automation API) over a gRPC stream instead of writing them to
    a file on the filesystem and reading them from there.
    """

    StreamEvents: grpc.aio.StreamUnaryMultiCallable[
        pulumi.events_pb2.EventRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """StreamEvents allows the client to stream multiple engine events to the server.
    The client sends multiple EventRequest messages over the stream, and the server
    processes them as they arrive. When the client is done sending events, it closes
    the stream.
    """

class EventsServicer(metaclass=abc.ABCMeta):
    """Events is a service for receiving engine events over gRPC.
    This service allows the Pulumi CLI to send engine events to clients
    (such as the Automation API) over a gRPC stream instead of writing them to
    a file on the filesystem and reading them from there.
    """

    
    def StreamEvents(
        self,
        request_iterator: _MaybeAsyncIterator[pulumi.events_pb2.EventRequest],
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """StreamEvents allows the client to stream multiple engine events to the server.
        The client sends multiple EventRequest messages over the stream, and the server
        processes them as they arrive. When the client is done sending events, it closes
        the stream.
        """

def add_EventsServicer_to_server(servicer: EventsServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
