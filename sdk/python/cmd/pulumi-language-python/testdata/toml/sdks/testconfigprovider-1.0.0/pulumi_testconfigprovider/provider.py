# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from ._inputs import *

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 b1: Optional[pulumi.Input[bool]] = None,
                 b2: Optional[pulumi.Input[bool]] = None,
                 b3: Optional[pulumi.Input[bool]] = None,
                 i1: Optional[pulumi.Input[int]] = None,
                 i2: Optional[pulumi.Input[int]] = None,
                 i3: Optional[pulumi.Input[int]] = None,
                 lb1: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None,
                 lb2: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None,
                 lb3: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None,
                 li1: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 li2: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 li3: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ln1: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 ln2: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 ln3: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 ls1: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ls2: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ls3: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mb1: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 mb2: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 mb3: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 mi1: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None,
                 mi2: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None,
                 mi3: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None,
                 mn1: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
                 mn2: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
                 mn3: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
                 ms1: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ms2: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ms3: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 n1: Optional[pulumi.Input[float]] = None,
                 n2: Optional[pulumi.Input[float]] = None,
                 n3: Optional[pulumi.Input[float]] = None,
                 ob1: Optional[pulumi.Input['Tb1Args']] = None,
                 ob2: Optional[pulumi.Input['Tb2Args']] = None,
                 ob3: Optional[pulumi.Input['Tb3Args']] = None,
                 oi1: Optional[pulumi.Input['Ti1Args']] = None,
                 oi2: Optional[pulumi.Input['Ti2Args']] = None,
                 oi3: Optional[pulumi.Input['Ti3Args']] = None,
                 on1: Optional[pulumi.Input['Tn1Args']] = None,
                 on2: Optional[pulumi.Input['Tn2Args']] = None,
                 on3: Optional[pulumi.Input['Tn3Args']] = None,
                 os1: Optional[pulumi.Input['Ts1Args']] = None,
                 os2: Optional[pulumi.Input['Ts2Args']] = None,
                 os3: Optional[pulumi.Input['Ts3Args']] = None,
                 s1: Optional[pulumi.Input[str]] = None,
                 s2: Optional[pulumi.Input[str]] = None,
                 s3: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        """
        if b1 is not None:
            pulumi.set(__self__, "b1", b1)
        if b2 is not None:
            pulumi.set(__self__, "b2", b2)
        if b3 is not None:
            pulumi.set(__self__, "b3", b3)
        if i1 is not None:
            pulumi.set(__self__, "i1", i1)
        if i2 is not None:
            pulumi.set(__self__, "i2", i2)
        if i3 is not None:
            pulumi.set(__self__, "i3", i3)
        if lb1 is not None:
            pulumi.set(__self__, "lb1", lb1)
        if lb2 is not None:
            pulumi.set(__self__, "lb2", lb2)
        if lb3 is not None:
            pulumi.set(__self__, "lb3", lb3)
        if li1 is not None:
            pulumi.set(__self__, "li1", li1)
        if li2 is not None:
            pulumi.set(__self__, "li2", li2)
        if li3 is not None:
            pulumi.set(__self__, "li3", li3)
        if ln1 is not None:
            pulumi.set(__self__, "ln1", ln1)
        if ln2 is not None:
            pulumi.set(__self__, "ln2", ln2)
        if ln3 is not None:
            pulumi.set(__self__, "ln3", ln3)
        if ls1 is not None:
            pulumi.set(__self__, "ls1", ls1)
        if ls2 is not None:
            pulumi.set(__self__, "ls2", ls2)
        if ls3 is not None:
            pulumi.set(__self__, "ls3", ls3)
        if mb1 is not None:
            pulumi.set(__self__, "mb1", mb1)
        if mb2 is not None:
            pulumi.set(__self__, "mb2", mb2)
        if mb3 is not None:
            pulumi.set(__self__, "mb3", mb3)
        if mi1 is not None:
            pulumi.set(__self__, "mi1", mi1)
        if mi2 is not None:
            pulumi.set(__self__, "mi2", mi2)
        if mi3 is not None:
            pulumi.set(__self__, "mi3", mi3)
        if mn1 is not None:
            pulumi.set(__self__, "mn1", mn1)
        if mn2 is not None:
            pulumi.set(__self__, "mn2", mn2)
        if mn3 is not None:
            pulumi.set(__self__, "mn3", mn3)
        if ms1 is not None:
            pulumi.set(__self__, "ms1", ms1)
        if ms2 is not None:
            pulumi.set(__self__, "ms2", ms2)
        if ms3 is not None:
            pulumi.set(__self__, "ms3", ms3)
        if n1 is not None:
            pulumi.set(__self__, "n1", n1)
        if n2 is not None:
            pulumi.set(__self__, "n2", n2)
        if n3 is not None:
            pulumi.set(__self__, "n3", n3)
        if ob1 is not None:
            pulumi.set(__self__, "ob1", ob1)
        if ob2 is not None:
            pulumi.set(__self__, "ob2", ob2)
        if ob3 is not None:
            pulumi.set(__self__, "ob3", ob3)
        if oi1 is not None:
            pulumi.set(__self__, "oi1", oi1)
        if oi2 is not None:
            pulumi.set(__self__, "oi2", oi2)
        if oi3 is not None:
            pulumi.set(__self__, "oi3", oi3)
        if on1 is not None:
            pulumi.set(__self__, "on1", on1)
        if on2 is not None:
            pulumi.set(__self__, "on2", on2)
        if on3 is not None:
            pulumi.set(__self__, "on3", on3)
        if os1 is not None:
            pulumi.set(__self__, "os1", os1)
        if os2 is not None:
            pulumi.set(__self__, "os2", os2)
        if os3 is not None:
            pulumi.set(__self__, "os3", os3)
        if s1 is not None:
            pulumi.set(__self__, "s1", s1)
        if s2 is not None:
            pulumi.set(__self__, "s2", s2)
        if s3 is not None:
            pulumi.set(__self__, "s3", s3)

    @property
    @pulumi.getter
    def b1(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "b1")

    @b1.setter
    def b1(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "b1", value)

    @property
    @pulumi.getter
    def b2(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "b2")

    @b2.setter
    def b2(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "b2", value)

    @property
    @pulumi.getter
    def b3(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "b3")

    @b3.setter
    def b3(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "b3", value)

    @property
    @pulumi.getter
    def i1(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "i1")

    @i1.setter
    def i1(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "i1", value)

    @property
    @pulumi.getter
    def i2(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "i2")

    @i2.setter
    def i2(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "i2", value)

    @property
    @pulumi.getter
    def i3(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "i3")

    @i3.setter
    def i3(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "i3", value)

    @property
    @pulumi.getter
    def lb1(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]:
        return pulumi.get(self, "lb1")

    @lb1.setter
    def lb1(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]):
        pulumi.set(self, "lb1", value)

    @property
    @pulumi.getter
    def lb2(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]:
        return pulumi.get(self, "lb2")

    @lb2.setter
    def lb2(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]):
        pulumi.set(self, "lb2", value)

    @property
    @pulumi.getter
    def lb3(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]:
        return pulumi.get(self, "lb3")

    @lb3.setter
    def lb3(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]]):
        pulumi.set(self, "lb3", value)

    @property
    @pulumi.getter
    def li1(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "li1")

    @li1.setter
    def li1(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "li1", value)

    @property
    @pulumi.getter
    def li2(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "li2")

    @li2.setter
    def li2(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "li2", value)

    @property
    @pulumi.getter
    def li3(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "li3")

    @li3.setter
    def li3(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "li3", value)

    @property
    @pulumi.getter
    def ln1(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "ln1")

    @ln1.setter
    def ln1(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "ln1", value)

    @property
    @pulumi.getter
    def ln2(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "ln2")

    @ln2.setter
    def ln2(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "ln2", value)

    @property
    @pulumi.getter
    def ln3(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]:
        return pulumi.get(self, "ln3")

    @ln3.setter
    def ln3(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]]):
        pulumi.set(self, "ln3", value)

    @property
    @pulumi.getter
    def ls1(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ls1")

    @ls1.setter
    def ls1(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ls1", value)

    @property
    @pulumi.getter
    def ls2(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ls2")

    @ls2.setter
    def ls2(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ls2", value)

    @property
    @pulumi.getter
    def ls3(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ls3")

    @ls3.setter
    def ls3(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ls3", value)

    @property
    @pulumi.getter
    def mb1(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]:
        return pulumi.get(self, "mb1")

    @mb1.setter
    def mb1(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]):
        pulumi.set(self, "mb1", value)

    @property
    @pulumi.getter
    def mb2(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]:
        return pulumi.get(self, "mb2")

    @mb2.setter
    def mb2(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]):
        pulumi.set(self, "mb2", value)

    @property
    @pulumi.getter
    def mb3(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]:
        return pulumi.get(self, "mb3")

    @mb3.setter
    def mb3(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]]):
        pulumi.set(self, "mb3", value)

    @property
    @pulumi.getter
    def mi1(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]:
        return pulumi.get(self, "mi1")

    @mi1.setter
    def mi1(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]):
        pulumi.set(self, "mi1", value)

    @property
    @pulumi.getter
    def mi2(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]:
        return pulumi.get(self, "mi2")

    @mi2.setter
    def mi2(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]):
        pulumi.set(self, "mi2", value)

    @property
    @pulumi.getter
    def mi3(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]:
        return pulumi.get(self, "mi3")

    @mi3.setter
    def mi3(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]]):
        pulumi.set(self, "mi3", value)

    @property
    @pulumi.getter
    def mn1(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]:
        return pulumi.get(self, "mn1")

    @mn1.setter
    def mn1(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]):
        pulumi.set(self, "mn1", value)

    @property
    @pulumi.getter
    def mn2(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]:
        return pulumi.get(self, "mn2")

    @mn2.setter
    def mn2(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]):
        pulumi.set(self, "mn2", value)

    @property
    @pulumi.getter
    def mn3(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]:
        return pulumi.get(self, "mn3")

    @mn3.setter
    def mn3(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]]):
        pulumi.set(self, "mn3", value)

    @property
    @pulumi.getter
    def ms1(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "ms1")

    @ms1.setter
    def ms1(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "ms1", value)

    @property
    @pulumi.getter
    def ms2(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "ms2")

    @ms2.setter
    def ms2(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "ms2", value)

    @property
    @pulumi.getter
    def ms3(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "ms3")

    @ms3.setter
    def ms3(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "ms3", value)

    @property
    @pulumi.getter
    def n1(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "n1")

    @n1.setter
    def n1(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "n1", value)

    @property
    @pulumi.getter
    def n2(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "n2")

    @n2.setter
    def n2(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "n2", value)

    @property
    @pulumi.getter
    def n3(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "n3")

    @n3.setter
    def n3(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "n3", value)

    @property
    @pulumi.getter
    def ob1(self) -> Optional[pulumi.Input['Tb1Args']]:
        return pulumi.get(self, "ob1")

    @ob1.setter
    def ob1(self, value: Optional[pulumi.Input['Tb1Args']]):
        pulumi.set(self, "ob1", value)

    @property
    @pulumi.getter
    def ob2(self) -> Optional[pulumi.Input['Tb2Args']]:
        return pulumi.get(self, "ob2")

    @ob2.setter
    def ob2(self, value: Optional[pulumi.Input['Tb2Args']]):
        pulumi.set(self, "ob2", value)

    @property
    @pulumi.getter
    def ob3(self) -> Optional[pulumi.Input['Tb3Args']]:
        return pulumi.get(self, "ob3")

    @ob3.setter
    def ob3(self, value: Optional[pulumi.Input['Tb3Args']]):
        pulumi.set(self, "ob3", value)

    @property
    @pulumi.getter
    def oi1(self) -> Optional[pulumi.Input['Ti1Args']]:
        return pulumi.get(self, "oi1")

    @oi1.setter
    def oi1(self, value: Optional[pulumi.Input['Ti1Args']]):
        pulumi.set(self, "oi1", value)

    @property
    @pulumi.getter
    def oi2(self) -> Optional[pulumi.Input['Ti2Args']]:
        return pulumi.get(self, "oi2")

    @oi2.setter
    def oi2(self, value: Optional[pulumi.Input['Ti2Args']]):
        pulumi.set(self, "oi2", value)

    @property
    @pulumi.getter
    def oi3(self) -> Optional[pulumi.Input['Ti3Args']]:
        return pulumi.get(self, "oi3")

    @oi3.setter
    def oi3(self, value: Optional[pulumi.Input['Ti3Args']]):
        pulumi.set(self, "oi3", value)

    @property
    @pulumi.getter
    def on1(self) -> Optional[pulumi.Input['Tn1Args']]:
        return pulumi.get(self, "on1")

    @on1.setter
    def on1(self, value: Optional[pulumi.Input['Tn1Args']]):
        pulumi.set(self, "on1", value)

    @property
    @pulumi.getter
    def on2(self) -> Optional[pulumi.Input['Tn2Args']]:
        return pulumi.get(self, "on2")

    @on2.setter
    def on2(self, value: Optional[pulumi.Input['Tn2Args']]):
        pulumi.set(self, "on2", value)

    @property
    @pulumi.getter
    def on3(self) -> Optional[pulumi.Input['Tn3Args']]:
        return pulumi.get(self, "on3")

    @on3.setter
    def on3(self, value: Optional[pulumi.Input['Tn3Args']]):
        pulumi.set(self, "on3", value)

    @property
    @pulumi.getter
    def os1(self) -> Optional[pulumi.Input['Ts1Args']]:
        return pulumi.get(self, "os1")

    @os1.setter
    def os1(self, value: Optional[pulumi.Input['Ts1Args']]):
        pulumi.set(self, "os1", value)

    @property
    @pulumi.getter
    def os2(self) -> Optional[pulumi.Input['Ts2Args']]:
        return pulumi.get(self, "os2")

    @os2.setter
    def os2(self, value: Optional[pulumi.Input['Ts2Args']]):
        pulumi.set(self, "os2", value)

    @property
    @pulumi.getter
    def os3(self) -> Optional[pulumi.Input['Ts3Args']]:
        return pulumi.get(self, "os3")

    @os3.setter
    def os3(self, value: Optional[pulumi.Input['Ts3Args']]):
        pulumi.set(self, "os3", value)

    @property
    @pulumi.getter
    def s1(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s1")

    @s1.setter
    def s1(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s1", value)

    @property
    @pulumi.getter
    def s2(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s2")

    @s2.setter
    def s2(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s2", value)

    @property
    @pulumi.getter
    def s3(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3")

    @s3.setter
    def s3(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 b1: Optional[pulumi.Input[bool]] = None,
                 b2: Optional[pulumi.Input[bool]] = None,
                 b3: Optional[pulumi.Input[bool]] = None,
                 i1: Optional[pulumi.Input[int]] = None,
                 i2: Optional[pulumi.Input[int]] = None,
                 i3: Optional[pulumi.Input[int]] = None,
                 lb1: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None,
                 lb2: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None,
                 lb3: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None,
                 li1: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 li2: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 li3: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ln1: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 ln2: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 ln3: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 ls1: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ls2: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ls3: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mb1: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 mb2: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 mb3: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 mi1: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None,
                 mi2: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None,
                 mi3: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None,
                 mn1: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
                 mn2: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
                 mn3: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
                 ms1: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ms2: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ms3: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 n1: Optional[pulumi.Input[float]] = None,
                 n2: Optional[pulumi.Input[float]] = None,
                 n3: Optional[pulumi.Input[float]] = None,
                 ob1: Optional[pulumi.Input[Union['Tb1Args', 'Tb1ArgsDict']]] = None,
                 ob2: Optional[pulumi.Input[Union['Tb2Args', 'Tb2ArgsDict']]] = None,
                 ob3: Optional[pulumi.Input[Union['Tb3Args', 'Tb3ArgsDict']]] = None,
                 oi1: Optional[pulumi.Input[Union['Ti1Args', 'Ti1ArgsDict']]] = None,
                 oi2: Optional[pulumi.Input[Union['Ti2Args', 'Ti2ArgsDict']]] = None,
                 oi3: Optional[pulumi.Input[Union['Ti3Args', 'Ti3ArgsDict']]] = None,
                 on1: Optional[pulumi.Input[Union['Tn1Args', 'Tn1ArgsDict']]] = None,
                 on2: Optional[pulumi.Input[Union['Tn2Args', 'Tn2ArgsDict']]] = None,
                 on3: Optional[pulumi.Input[Union['Tn3Args', 'Tn3ArgsDict']]] = None,
                 os1: Optional[pulumi.Input[Union['Ts1Args', 'Ts1ArgsDict']]] = None,
                 os2: Optional[pulumi.Input[Union['Ts2Args', 'Ts2ArgsDict']]] = None,
                 os3: Optional[pulumi.Input[Union['Ts3Args', 'Ts3ArgsDict']]] = None,
                 s1: Optional[pulumi.Input[str]] = None,
                 s2: Optional[pulumi.Input[str]] = None,
                 s3: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Testconfigprovider resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Testconfigprovider resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 b1: Optional[pulumi.Input[bool]] = None,
                 b2: Optional[pulumi.Input[bool]] = None,
                 b3: Optional[pulumi.Input[bool]] = None,
                 i1: Optional[pulumi.Input[int]] = None,
                 i2: Optional[pulumi.Input[int]] = None,
                 i3: Optional[pulumi.Input[int]] = None,
                 lb1: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None,
                 lb2: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None,
                 lb3: Optional[pulumi.Input[Sequence[pulumi.Input[bool]]]] = None,
                 li1: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 li2: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 li3: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ln1: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 ln2: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 ln3: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 ls1: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ls2: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ls3: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mb1: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 mb2: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 mb3: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 mi1: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None,
                 mi2: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None,
                 mi3: Optional[pulumi.Input[Mapping[str, pulumi.Input[int]]]] = None,
                 mn1: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
                 mn2: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
                 mn3: Optional[pulumi.Input[Mapping[str, pulumi.Input[float]]]] = None,
                 ms1: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ms2: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 ms3: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 n1: Optional[pulumi.Input[float]] = None,
                 n2: Optional[pulumi.Input[float]] = None,
                 n3: Optional[pulumi.Input[float]] = None,
                 ob1: Optional[pulumi.Input[Union['Tb1Args', 'Tb1ArgsDict']]] = None,
                 ob2: Optional[pulumi.Input[Union['Tb2Args', 'Tb2ArgsDict']]] = None,
                 ob3: Optional[pulumi.Input[Union['Tb3Args', 'Tb3ArgsDict']]] = None,
                 oi1: Optional[pulumi.Input[Union['Ti1Args', 'Ti1ArgsDict']]] = None,
                 oi2: Optional[pulumi.Input[Union['Ti2Args', 'Ti2ArgsDict']]] = None,
                 oi3: Optional[pulumi.Input[Union['Ti3Args', 'Ti3ArgsDict']]] = None,
                 on1: Optional[pulumi.Input[Union['Tn1Args', 'Tn1ArgsDict']]] = None,
                 on2: Optional[pulumi.Input[Union['Tn2Args', 'Tn2ArgsDict']]] = None,
                 on3: Optional[pulumi.Input[Union['Tn3Args', 'Tn3ArgsDict']]] = None,
                 os1: Optional[pulumi.Input[Union['Ts1Args', 'Ts1ArgsDict']]] = None,
                 os2: Optional[pulumi.Input[Union['Ts2Args', 'Ts2ArgsDict']]] = None,
                 os3: Optional[pulumi.Input[Union['Ts3Args', 'Ts3ArgsDict']]] = None,
                 s1: Optional[pulumi.Input[str]] = None,
                 s2: Optional[pulumi.Input[str]] = None,
                 s3: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["b1"] = pulumi.Output.from_input(b1).apply(pulumi.runtime.to_json) if b1 is not None else None
            __props__.__dict__["b2"] = pulumi.Output.from_input(b2).apply(pulumi.runtime.to_json) if b2 is not None else None
            __props__.__dict__["b3"] = pulumi.Output.from_input(b3).apply(pulumi.runtime.to_json) if b3 is not None else None
            __props__.__dict__["i1"] = pulumi.Output.from_input(i1).apply(pulumi.runtime.to_json) if i1 is not None else None
            __props__.__dict__["i2"] = pulumi.Output.from_input(i2).apply(pulumi.runtime.to_json) if i2 is not None else None
            __props__.__dict__["i3"] = pulumi.Output.from_input(i3).apply(pulumi.runtime.to_json) if i3 is not None else None
            __props__.__dict__["lb1"] = pulumi.Output.from_input(lb1).apply(pulumi.runtime.to_json) if lb1 is not None else None
            __props__.__dict__["lb2"] = pulumi.Output.from_input(lb2).apply(pulumi.runtime.to_json) if lb2 is not None else None
            __props__.__dict__["lb3"] = pulumi.Output.from_input(lb3).apply(pulumi.runtime.to_json) if lb3 is not None else None
            __props__.__dict__["li1"] = pulumi.Output.from_input(li1).apply(pulumi.runtime.to_json) if li1 is not None else None
            __props__.__dict__["li2"] = pulumi.Output.from_input(li2).apply(pulumi.runtime.to_json) if li2 is not None else None
            __props__.__dict__["li3"] = pulumi.Output.from_input(li3).apply(pulumi.runtime.to_json) if li3 is not None else None
            __props__.__dict__["ln1"] = pulumi.Output.from_input(ln1).apply(pulumi.runtime.to_json) if ln1 is not None else None
            __props__.__dict__["ln2"] = pulumi.Output.from_input(ln2).apply(pulumi.runtime.to_json) if ln2 is not None else None
            __props__.__dict__["ln3"] = pulumi.Output.from_input(ln3).apply(pulumi.runtime.to_json) if ln3 is not None else None
            __props__.__dict__["ls1"] = pulumi.Output.from_input(ls1).apply(pulumi.runtime.to_json) if ls1 is not None else None
            __props__.__dict__["ls2"] = pulumi.Output.from_input(ls2).apply(pulumi.runtime.to_json) if ls2 is not None else None
            __props__.__dict__["ls3"] = pulumi.Output.from_input(ls3).apply(pulumi.runtime.to_json) if ls3 is not None else None
            __props__.__dict__["mb1"] = pulumi.Output.from_input(mb1).apply(pulumi.runtime.to_json) if mb1 is not None else None
            __props__.__dict__["mb2"] = pulumi.Output.from_input(mb2).apply(pulumi.runtime.to_json) if mb2 is not None else None
            __props__.__dict__["mb3"] = pulumi.Output.from_input(mb3).apply(pulumi.runtime.to_json) if mb3 is not None else None
            __props__.__dict__["mi1"] = pulumi.Output.from_input(mi1).apply(pulumi.runtime.to_json) if mi1 is not None else None
            __props__.__dict__["mi2"] = pulumi.Output.from_input(mi2).apply(pulumi.runtime.to_json) if mi2 is not None else None
            __props__.__dict__["mi3"] = pulumi.Output.from_input(mi3).apply(pulumi.runtime.to_json) if mi3 is not None else None
            __props__.__dict__["mn1"] = pulumi.Output.from_input(mn1).apply(pulumi.runtime.to_json) if mn1 is not None else None
            __props__.__dict__["mn2"] = pulumi.Output.from_input(mn2).apply(pulumi.runtime.to_json) if mn2 is not None else None
            __props__.__dict__["mn3"] = pulumi.Output.from_input(mn3).apply(pulumi.runtime.to_json) if mn3 is not None else None
            __props__.__dict__["ms1"] = pulumi.Output.from_input(ms1).apply(pulumi.runtime.to_json) if ms1 is not None else None
            __props__.__dict__["ms2"] = pulumi.Output.from_input(ms2).apply(pulumi.runtime.to_json) if ms2 is not None else None
            __props__.__dict__["ms3"] = pulumi.Output.from_input(ms3).apply(pulumi.runtime.to_json) if ms3 is not None else None
            __props__.__dict__["n1"] = pulumi.Output.from_input(n1).apply(pulumi.runtime.to_json) if n1 is not None else None
            __props__.__dict__["n2"] = pulumi.Output.from_input(n2).apply(pulumi.runtime.to_json) if n2 is not None else None
            __props__.__dict__["n3"] = pulumi.Output.from_input(n3).apply(pulumi.runtime.to_json) if n3 is not None else None
            __props__.__dict__["ob1"] = pulumi.Output.from_input(ob1).apply(pulumi.runtime.to_json) if ob1 is not None else None
            __props__.__dict__["ob2"] = pulumi.Output.from_input(ob2).apply(pulumi.runtime.to_json) if ob2 is not None else None
            __props__.__dict__["ob3"] = pulumi.Output.from_input(ob3).apply(pulumi.runtime.to_json) if ob3 is not None else None
            __props__.__dict__["oi1"] = pulumi.Output.from_input(oi1).apply(pulumi.runtime.to_json) if oi1 is not None else None
            __props__.__dict__["oi2"] = pulumi.Output.from_input(oi2).apply(pulumi.runtime.to_json) if oi2 is not None else None
            __props__.__dict__["oi3"] = pulumi.Output.from_input(oi3).apply(pulumi.runtime.to_json) if oi3 is not None else None
            __props__.__dict__["on1"] = pulumi.Output.from_input(on1).apply(pulumi.runtime.to_json) if on1 is not None else None
            __props__.__dict__["on2"] = pulumi.Output.from_input(on2).apply(pulumi.runtime.to_json) if on2 is not None else None
            __props__.__dict__["on3"] = pulumi.Output.from_input(on3).apply(pulumi.runtime.to_json) if on3 is not None else None
            __props__.__dict__["os1"] = pulumi.Output.from_input(os1).apply(pulumi.runtime.to_json) if os1 is not None else None
            __props__.__dict__["os2"] = pulumi.Output.from_input(os2).apply(pulumi.runtime.to_json) if os2 is not None else None
            __props__.__dict__["os3"] = pulumi.Output.from_input(os3).apply(pulumi.runtime.to_json) if os3 is not None else None
            __props__.__dict__["s1"] = s1
            __props__.__dict__["s2"] = s2
            __props__.__dict__["s3"] = s3
        super(Provider, __self__).__init__(
            'testconfigprovider',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter
    def s1(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "s1")

    @property
    @pulumi.getter
    def s2(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "s2")

    @property
    @pulumi.getter
    def s3(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "s3")

