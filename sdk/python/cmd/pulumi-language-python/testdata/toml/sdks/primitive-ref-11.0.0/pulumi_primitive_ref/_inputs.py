# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'DataArgs',
    'DataArgsDict',
]

MYPY = False

if not MYPY:
    class DataArgsDict(TypedDict):
        bool_array: pulumi.Input[Sequence[pulumi.Input[_builtins.bool]]]
        boolean: pulumi.Input[_builtins.bool]
        float: pulumi.Input[_builtins.float]
        integer: pulumi.Input[_builtins.int]
        string: pulumi.Input[_builtins.str]
        string_map: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]
elif False:
    DataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataArgs:
    def __init__(__self__, *,
                 bool_array: pulumi.Input[Sequence[pulumi.Input[_builtins.bool]]],
                 boolean: pulumi.Input[_builtins.bool],
                 float: pulumi.Input[_builtins.float],
                 integer: pulumi.Input[_builtins.int],
                 string: pulumi.Input[_builtins.str],
                 string_map: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]):
        pulumi.set(__self__, "bool_array", bool_array)
        pulumi.set(__self__, "boolean", boolean)
        pulumi.set(__self__, "float", float)
        pulumi.set(__self__, "integer", integer)
        pulumi.set(__self__, "string", string)
        pulumi.set(__self__, "string_map", string_map)

    @_builtins.property
    @pulumi.getter(name="boolArray")
    def bool_array(self) -> pulumi.Input[Sequence[pulumi.Input[_builtins.bool]]]:
        return pulumi.get(self, "bool_array")

    @bool_array.setter
    def bool_array(self, value: pulumi.Input[Sequence[pulumi.Input[_builtins.bool]]]):
        pulumi.set(self, "bool_array", value)

    @_builtins.property
    @pulumi.getter
    def boolean(self) -> pulumi.Input[_builtins.bool]:
        return pulumi.get(self, "boolean")

    @boolean.setter
    def boolean(self, value: pulumi.Input[_builtins.bool]):
        pulumi.set(self, "boolean", value)

    @_builtins.property
    @pulumi.getter
    def float(self) -> pulumi.Input[_builtins.float]:
        return pulumi.get(self, "float")

    @float.setter
    def float(self, value: pulumi.Input[_builtins.float]):
        pulumi.set(self, "float", value)

    @_builtins.property
    @pulumi.getter
    def integer(self) -> pulumi.Input[_builtins.int]:
        return pulumi.get(self, "integer")

    @integer.setter
    def integer(self, value: pulumi.Input[_builtins.int]):
        pulumi.set(self, "integer", value)

    @_builtins.property
    @pulumi.getter
    def string(self) -> pulumi.Input[_builtins.str]:
        return pulumi.get(self, "string")

    @string.setter
    def string(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "string", value)

    @_builtins.property
    @pulumi.getter(name="stringMap")
    def string_map(self) -> pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]:
        return pulumi.get(self, "string_map")

    @string_map.setter
    def string_map(self, value: pulumi.Input[Mapping[str, pulumi.Input[_builtins.str]]]):
        pulumi.set(self, "string_map", value)


