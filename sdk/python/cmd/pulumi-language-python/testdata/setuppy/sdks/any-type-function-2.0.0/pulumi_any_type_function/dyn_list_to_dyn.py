# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'DynListToDynResult',
    'AwaitableDynListToDynResult',
    'dyn_list_to_dyn',
    'dyn_list_to_dyn_output',
]

@pulumi.output_type
class DynListToDynResult:
    def __init__(__self__, result=None):
        if result and not isinstance(result, dict):
            raise TypeError("Expected argument 'result' to be a dict")
        pulumi.set(__self__, "result", result)

    @property
    @pulumi.getter
    def result(self) -> Any:
        return pulumi.get(self, "result")


class AwaitableDynListToDynResult(DynListToDynResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return DynListToDynResult(
            result=self.result)


def dyn_list_to_dyn(inputs: Optional[Sequence[Any]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableDynListToDynResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['inputs'] = inputs
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('any-type-function:index:dynListToDyn', __args__, opts=opts, typ=DynListToDynResult).value

    return AwaitableDynListToDynResult(
        result=pulumi.get(__ret__, 'result'))
def dyn_list_to_dyn_output(inputs: Optional[pulumi.Input[Optional[Sequence[Any]]]] = None,
                           opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[DynListToDynResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['inputs'] = inputs
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('any-type-function:index:dynListToDyn', __args__, opts=opts, typ=DynListToDynResult)
    return __ret__.apply(lambda __response__: DynListToDynResult(
        result=pulumi.get(__response__, 'result')))
