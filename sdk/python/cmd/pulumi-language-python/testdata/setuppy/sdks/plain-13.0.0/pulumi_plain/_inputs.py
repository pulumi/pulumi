# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'DataArgs',
    'DataArgsDict',
    'InnerDataArgs',
    'InnerDataArgsDict',
]

MYPY = False

if not MYPY:
    class DataArgsDict(TypedDict):
        bool_array: Sequence[_builtins.bool]
        boolean: _builtins.bool
        float: _builtins.float
        inner_data: 'InnerDataArgsDict'
        integer: _builtins.int
        string: _builtins.str
        string_map: Mapping[str, _builtins.str]
elif False:
    DataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class DataArgs:
    def __init__(__self__, *,
                 bool_array: Sequence[_builtins.bool],
                 boolean: _builtins.bool,
                 float: _builtins.float,
                 inner_data: 'InnerDataArgs',
                 integer: _builtins.int,
                 string: _builtins.str,
                 string_map: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "bool_array", bool_array)
        pulumi.set(__self__, "boolean", boolean)
        pulumi.set(__self__, "float", float)
        pulumi.set(__self__, "inner_data", inner_data)
        pulumi.set(__self__, "integer", integer)
        pulumi.set(__self__, "string", string)
        pulumi.set(__self__, "string_map", string_map)

    @_builtins.property
    @pulumi.getter(name="boolArray")
    def bool_array(self) -> Sequence[_builtins.bool]:
        return pulumi.get(self, "bool_array")

    @bool_array.setter
    def bool_array(self, value: Sequence[_builtins.bool]):
        pulumi.set(self, "bool_array", value)

    @_builtins.property
    @pulumi.getter
    def boolean(self) -> _builtins.bool:
        return pulumi.get(self, "boolean")

    @boolean.setter
    def boolean(self, value: _builtins.bool):
        pulumi.set(self, "boolean", value)

    @_builtins.property
    @pulumi.getter
    def float(self) -> _builtins.float:
        return pulumi.get(self, "float")

    @float.setter
    def float(self, value: _builtins.float):
        pulumi.set(self, "float", value)

    @_builtins.property
    @pulumi.getter(name="innerData")
    def inner_data(self) -> 'InnerDataArgs':
        return pulumi.get(self, "inner_data")

    @inner_data.setter
    def inner_data(self, value: 'InnerDataArgs'):
        pulumi.set(self, "inner_data", value)

    @_builtins.property
    @pulumi.getter
    def integer(self) -> _builtins.int:
        return pulumi.get(self, "integer")

    @integer.setter
    def integer(self, value: _builtins.int):
        pulumi.set(self, "integer", value)

    @_builtins.property
    @pulumi.getter
    def string(self) -> _builtins.str:
        return pulumi.get(self, "string")

    @string.setter
    def string(self, value: _builtins.str):
        pulumi.set(self, "string", value)

    @_builtins.property
    @pulumi.getter(name="stringMap")
    def string_map(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "string_map")

    @string_map.setter
    def string_map(self, value: Mapping[str, _builtins.str]):
        pulumi.set(self, "string_map", value)


if not MYPY:
    class InnerDataArgsDict(TypedDict):
        bool_array: Sequence[_builtins.bool]
        boolean: _builtins.bool
        float: _builtins.float
        integer: _builtins.int
        string: _builtins.str
        string_map: Mapping[str, _builtins.str]
elif False:
    InnerDataArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class InnerDataArgs:
    def __init__(__self__, *,
                 bool_array: Sequence[_builtins.bool],
                 boolean: _builtins.bool,
                 float: _builtins.float,
                 integer: _builtins.int,
                 string: _builtins.str,
                 string_map: Mapping[str, _builtins.str]):
        pulumi.set(__self__, "bool_array", bool_array)
        pulumi.set(__self__, "boolean", boolean)
        pulumi.set(__self__, "float", float)
        pulumi.set(__self__, "integer", integer)
        pulumi.set(__self__, "string", string)
        pulumi.set(__self__, "string_map", string_map)

    @_builtins.property
    @pulumi.getter(name="boolArray")
    def bool_array(self) -> Sequence[_builtins.bool]:
        return pulumi.get(self, "bool_array")

    @bool_array.setter
    def bool_array(self, value: Sequence[_builtins.bool]):
        pulumi.set(self, "bool_array", value)

    @_builtins.property
    @pulumi.getter
    def boolean(self) -> _builtins.bool:
        return pulumi.get(self, "boolean")

    @boolean.setter
    def boolean(self, value: _builtins.bool):
        pulumi.set(self, "boolean", value)

    @_builtins.property
    @pulumi.getter
    def float(self) -> _builtins.float:
        return pulumi.get(self, "float")

    @float.setter
    def float(self, value: _builtins.float):
        pulumi.set(self, "float", value)

    @_builtins.property
    @pulumi.getter
    def integer(self) -> _builtins.int:
        return pulumi.get(self, "integer")

    @integer.setter
    def integer(self, value: _builtins.int):
        pulumi.set(self, "integer", value)

    @_builtins.property
    @pulumi.getter
    def string(self) -> _builtins.str:
        return pulumi.get(self, "string")

    @string.setter
    def string(self, value: _builtins.str):
        pulumi.set(self, "string", value)

    @_builtins.property
    @pulumi.getter(name="stringMap")
    def string_map(self) -> Mapping[str, _builtins.str]:
        return pulumi.get(self, "string_map")

    @string_map.setter
    def string_map(self, value: Mapping[str, _builtins.str]):
        pulumi.set(self, "string_map", value)


