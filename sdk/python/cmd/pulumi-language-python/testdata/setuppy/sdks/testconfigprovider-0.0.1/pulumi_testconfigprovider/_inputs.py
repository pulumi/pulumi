# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'Tb',
    'TbDict',
    'Tb1Args',
    'Tb1ArgsDict',
    'Tb2Args',
    'Tb2ArgsDict',
    'Tb3Args',
    'Tb3ArgsDict',
    'Ti',
    'TiDict',
    'Ti1Args',
    'Ti1ArgsDict',
    'Ti2Args',
    'Ti2ArgsDict',
    'Ti3Args',
    'Ti3ArgsDict',
    'Tn',
    'TnDict',
    'Tn1Args',
    'Tn1ArgsDict',
    'Tn2Args',
    'Tn2ArgsDict',
    'Tn3Args',
    'Tn3ArgsDict',
    'Ts',
    'TsDict',
    'Ts1Args',
    'Ts1ArgsDict',
    'Ts2Args',
    'Ts2ArgsDict',
    'Ts3Args',
    'Ts3ArgsDict',
]

MYPY = False

if not MYPY:
    class TbDict(TypedDict):
        x: NotRequired[bool]
elif False:
    TbDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tb:
    def __init__(__self__, *,
                 x: Optional[bool] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[bool]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[bool]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tb1ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[bool]]
elif False:
    Tb1ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tb1Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[bool]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tb2ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[bool]]
elif False:
    Tb2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tb2Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[bool]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tb3ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[bool]]
elif False:
    Tb3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tb3Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[bool]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class TiDict(TypedDict):
        x: NotRequired[int]
elif False:
    TiDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ti:
    def __init__(__self__, *,
                 x: Optional[int] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[int]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[int]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Ti1ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[int]]
elif False:
    Ti1ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ti1Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[int]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Ti2ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[int]]
elif False:
    Ti2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ti2Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[int]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Ti3ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[int]]
elif False:
    Ti3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ti3Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[int]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class TnDict(TypedDict):
        x: NotRequired[float]
elif False:
    TnDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tn:
    def __init__(__self__, *,
                 x: Optional[float] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[float]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[float]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tn1ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[float]]
elif False:
    Tn1ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tn1Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[float]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tn2ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[float]]
elif False:
    Tn2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tn2Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[float]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tn3ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[float]]
elif False:
    Tn3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tn3Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[float]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class TsDict(TypedDict):
        x: NotRequired[str]
elif False:
    TsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ts:
    def __init__(__self__, *,
                 x: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[str]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Ts1ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[str]]
elif False:
    Ts1ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ts1Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[str]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Ts2ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[str]]
elif False:
    Ts2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ts2Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[str]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Ts3ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[str]]
elif False:
    Ts3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Ts3Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[str]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x", value)


