# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ResourceArgs', 'Resource']

@pulumi.input_type
class ResourceArgs:
    def __init__(__self__, *,
                 a: pulumi.Input[Sequence[pulumi.Input[float]]],
                 b: pulumi.Input[bool],
                 f: pulumi.Input[float],
                 i: pulumi.Input[int],
                 m: pulumi.Input[Mapping[str, pulumi.Input[bool]]],
                 s: pulumi.Input[str]):
        """
        The set of arguments for constructing a Resource resource.
        """
        pulumi.set(__self__, "a", a)
        pulumi.set(__self__, "b", b)
        pulumi.set(__self__, "f", f)
        pulumi.set(__self__, "i", i)
        pulumi.set(__self__, "m", m)
        pulumi.set(__self__, "s", s)

    @property
    @pulumi.getter
    def a(self) -> pulumi.Input[Sequence[pulumi.Input[float]]]:
        return pulumi.get(self, "a")

    @a.setter
    def a(self, value: pulumi.Input[Sequence[pulumi.Input[float]]]):
        pulumi.set(self, "a", value)

    @property
    @pulumi.getter
    def b(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "b")

    @b.setter
    def b(self, value: pulumi.Input[bool]):
        pulumi.set(self, "b", value)

    @property
    @pulumi.getter
    def f(self) -> pulumi.Input[float]:
        return pulumi.get(self, "f")

    @f.setter
    def f(self, value: pulumi.Input[float]):
        pulumi.set(self, "f", value)

    @property
    @pulumi.getter
    def i(self) -> pulumi.Input[int]:
        return pulumi.get(self, "i")

    @i.setter
    def i(self, value: pulumi.Input[int]):
        pulumi.set(self, "i", value)

    @property
    @pulumi.getter
    def m(self) -> pulumi.Input[Mapping[str, pulumi.Input[bool]]]:
        return pulumi.get(self, "m")

    @m.setter
    def m(self, value: pulumi.Input[Mapping[str, pulumi.Input[bool]]]):
        pulumi.set(self, "m", value)

    @property
    @pulumi.getter
    def s(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s")

    @s.setter
    def s(self, value: pulumi.Input[str]):
        pulumi.set(self, "s", value)


class Resource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 a: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 b: Optional[pulumi.Input[bool]] = None,
                 f: Optional[pulumi.Input[float]] = None,
                 i: Optional[pulumi.Input[int]] = None,
                 m: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 s: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Resource resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ResourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Resource resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ResourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ResourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 a: Optional[pulumi.Input[Sequence[pulumi.Input[float]]]] = None,
                 b: Optional[pulumi.Input[bool]] = None,
                 f: Optional[pulumi.Input[float]] = None,
                 i: Optional[pulumi.Input[int]] = None,
                 m: Optional[pulumi.Input[Mapping[str, pulumi.Input[bool]]]] = None,
                 s: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ResourceArgs.__new__(ResourceArgs)

            if a is None and not opts.urn:
                raise TypeError("Missing required property 'a'")
            __props__.__dict__["a"] = a
            if b is None and not opts.urn:
                raise TypeError("Missing required property 'b'")
            __props__.__dict__["b"] = b
            if f is None and not opts.urn:
                raise TypeError("Missing required property 'f'")
            __props__.__dict__["f"] = f
            if i is None and not opts.urn:
                raise TypeError("Missing required property 'i'")
            __props__.__dict__["i"] = i
            if m is None and not opts.urn:
                raise TypeError("Missing required property 'm'")
            __props__.__dict__["m"] = m
            if s is None and not opts.urn:
                raise TypeError("Missing required property 's'")
            __props__.__dict__["s"] = s
        super(Resource, __self__).__init__(
            'primitive:index:Resource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Resource':
        """
        Get an existing Resource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = ResourceArgs.__new__(ResourceArgs)

        __props__.__dict__["a"] = None
        __props__.__dict__["b"] = None
        __props__.__dict__["f"] = None
        __props__.__dict__["i"] = None
        __props__.__dict__["m"] = None
        __props__.__dict__["s"] = None
        return Resource(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def a(self) -> pulumi.Output[Sequence[float]]:
        return pulumi.get(self, "a")

    @property
    @pulumi.getter
    def b(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "b")

    @property
    @pulumi.getter
    def f(self) -> pulumi.Output[float]:
        return pulumi.get(self, "f")

    @property
    @pulumi.getter
    def i(self) -> pulumi.Output[int]:
        return pulumi.get(self, "i")

    @property
    @pulumi.getter
    def m(self) -> pulumi.Output[Mapping[str, bool]]:
        return pulumi.get(self, "m")

    @property
    @pulumi.getter
    def s(self) -> pulumi.Output[str]:
        return pulumi.get(self, "s")

