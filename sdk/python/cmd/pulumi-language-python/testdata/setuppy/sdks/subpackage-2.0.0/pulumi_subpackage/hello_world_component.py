# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['HelloWorldComponentArgs', 'HelloWorldComponent']

@pulumi.input_type
class HelloWorldComponentArgs:
    def __init__(__self__):
        """
        The set of arguments for constructing a HelloWorldComponent resource.
        """
        pass


class HelloWorldComponent(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None):
        """
        Create a HelloWorldComponent resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[HelloWorldComponentArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a HelloWorldComponent resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param HelloWorldComponentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HelloWorldComponentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HelloWorldComponentArgs.__new__(HelloWorldComponentArgs)

            __props__.__dict__["parameter_value"] = None
        super(HelloWorldComponent, __self__).__init__(
            'subpackage:index:HelloWorldComponent',
            resource_name,
            __props__,
            opts,
            remote=True,
            package_ref=_utilities.get_package())

    @property
    @pulumi.getter(name="parameterValue")
    def parameter_value(self) -> pulumi.Output[str]:
        return pulumi.get(self, "parameter_value")

