# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ComponentCallableArgs', 'ComponentCallable']

@pulumi.input_type
class ComponentCallableArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str]):
        """
        The set of arguments for constructing a ComponentCallable resource.
        """
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


class ComponentCallable(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        A component resource that has callable methods.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComponentCallableArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A component resource that has callable methods.

        :param str resource_name: The name of the resource.
        :param ComponentCallableArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComponentCallableArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComponentCallableArgs.__new__(ComponentCallableArgs)

            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = value
        super(ComponentCallable, __self__).__init__(
            'component:index:ComponentCallable',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output[str]:
        return pulumi.get(self, "value")

    @pulumi.output_type
    class IdentityResult:
        def __init__(__self__, result=None):
            if result and not isinstance(result, str):
                raise TypeError("Expected argument 'result' to be a str")
            pulumi.set(__self__, "result", result)

        @property
        @pulumi.getter
        def result(self) -> str:
            return pulumi.get(self, "result")

    def identity(__self__) -> pulumi.Output['ComponentCallable.IdentityResult']:
        """
        The `identity` method of the `ComponentCallable` component resource. Returns the component's `value` unaltered.
        """
        __args__ = dict()
        __args__['__self__'] = __self__
        return pulumi.runtime.call('component:index:ComponentCallable/identity', __args__, res=__self__, typ=ComponentCallable.IdentityResult)

    @pulumi.output_type
    class PrefixedResult:
        def __init__(__self__, result=None):
            if result and not isinstance(result, str):
                raise TypeError("Expected argument 'result' to be a str")
            pulumi.set(__self__, "result", result)

        @property
        @pulumi.getter
        def result(self) -> str:
            return pulumi.get(self, "result")

    def prefixed(__self__, *,
                 prefix: pulumi.Input[str]) -> pulumi.Output['ComponentCallable.PrefixedResult']:
        """
        The `prefixed` method of the `ComponentCallable` component resource. Accepts a string and returns the component's `value` prefixed with that string.
        """
        __args__ = dict()
        __args__['__self__'] = __self__
        __args__['prefix'] = prefix
        return pulumi.runtime.call('component:index:ComponentCallable/prefixed', __args__, res=__self__, typ=ComponentCallable.PrefixedResult)

