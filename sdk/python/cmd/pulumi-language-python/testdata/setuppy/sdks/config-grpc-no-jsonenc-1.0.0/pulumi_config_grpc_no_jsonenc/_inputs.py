# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = [
    'Tbool1',
    'Tbool1Dict',
    'Tbool1Args',
    'Tbool1ArgsDict',
    'Tbool2',
    'Tbool2Dict',
    'Tbool2Args',
    'Tbool2ArgsDict',
    'Tbool3',
    'Tbool3Dict',
    'Tbool3Args',
    'Tbool3ArgsDict',
    'Tint1',
    'Tint1Dict',
    'Tint1Args',
    'Tint1ArgsDict',
    'Tint2',
    'Tint2Dict',
    'Tint2Args',
    'Tint2ArgsDict',
    'Tint3',
    'Tint3Dict',
    'Tint3Args',
    'Tint3ArgsDict',
    'Tnum1',
    'Tnum1Dict',
    'Tnum1Args',
    'Tnum1ArgsDict',
    'Tnum2',
    'Tnum2Dict',
    'Tnum2Args',
    'Tnum2ArgsDict',
    'Tnum3',
    'Tnum3Dict',
    'Tnum3Args',
    'Tnum3ArgsDict',
    'TsecretBool1',
    'TsecretBool1Dict',
    'TsecretBool1Args',
    'TsecretBool1ArgsDict',
    'TsecretBool2',
    'TsecretBool2Dict',
    'TsecretBool2Args',
    'TsecretBool2ArgsDict',
    'TsecretBool3',
    'TsecretBool3Dict',
    'TsecretBool3Args',
    'TsecretBool3ArgsDict',
    'TsecretInt1',
    'TsecretInt1Dict',
    'TsecretInt1Args',
    'TsecretInt1ArgsDict',
    'TsecretInt2',
    'TsecretInt2Dict',
    'TsecretInt2Args',
    'TsecretInt2ArgsDict',
    'TsecretInt3',
    'TsecretInt3Dict',
    'TsecretInt3Args',
    'TsecretInt3ArgsDict',
    'TsecretNum1',
    'TsecretNum1Dict',
    'TsecretNum1Args',
    'TsecretNum1ArgsDict',
    'TsecretNum2',
    'TsecretNum2Dict',
    'TsecretNum2Args',
    'TsecretNum2ArgsDict',
    'TsecretNum3',
    'TsecretNum3Dict',
    'TsecretNum3Args',
    'TsecretNum3ArgsDict',
    'TsecretString1',
    'TsecretString1Dict',
    'TsecretString1Args',
    'TsecretString1ArgsDict',
    'TsecretString2',
    'TsecretString2Dict',
    'TsecretString2Args',
    'TsecretString2ArgsDict',
    'TsecretString3',
    'TsecretString3Dict',
    'TsecretString3Args',
    'TsecretString3ArgsDict',
    'Tstring1',
    'Tstring1Dict',
    'Tstring1Args',
    'Tstring1ArgsDict',
    'Tstring2',
    'Tstring2Dict',
    'Tstring2Args',
    'Tstring2ArgsDict',
    'Tstring3',
    'Tstring3Dict',
    'Tstring3Args',
    'Tstring3ArgsDict',
]

MYPY = False

if not MYPY:
    class Tbool1Dict(TypedDict):
        x: NotRequired[bool]
elif False:
    Tbool1Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tbool1:
    def __init__(__self__, *,
                 x: Optional[bool] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[bool]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[bool]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tbool1ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[bool]]
elif False:
    Tbool1ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tbool1Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[bool]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tbool2Dict(TypedDict):
        x: NotRequired[bool]
elif False:
    Tbool2Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tbool2:
    def __init__(__self__, *,
                 x: Optional[bool] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[bool]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[bool]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tbool2ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[bool]]
elif False:
    Tbool2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tbool2Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[bool]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tbool3Dict(TypedDict):
        x: NotRequired[bool]
elif False:
    Tbool3Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tbool3:
    def __init__(__self__, *,
                 x: Optional[bool] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[bool]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[bool]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tbool3ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[bool]]
elif False:
    Tbool3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tbool3Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[bool]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tint1Dict(TypedDict):
        x: NotRequired[int]
elif False:
    Tint1Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tint1:
    def __init__(__self__, *,
                 x: Optional[int] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[int]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[int]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tint1ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[int]]
elif False:
    Tint1ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tint1Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[int]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tint2Dict(TypedDict):
        x: NotRequired[int]
elif False:
    Tint2Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tint2:
    def __init__(__self__, *,
                 x: Optional[int] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[int]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[int]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tint2ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[int]]
elif False:
    Tint2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tint2Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[int]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tint3Dict(TypedDict):
        x: NotRequired[int]
elif False:
    Tint3Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tint3:
    def __init__(__self__, *,
                 x: Optional[int] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[int]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[int]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tint3ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[int]]
elif False:
    Tint3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tint3Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[int]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tnum1Dict(TypedDict):
        x: NotRequired[float]
elif False:
    Tnum1Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tnum1:
    def __init__(__self__, *,
                 x: Optional[float] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[float]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[float]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tnum1ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[float]]
elif False:
    Tnum1ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tnum1Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[float]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tnum2Dict(TypedDict):
        x: NotRequired[float]
elif False:
    Tnum2Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tnum2:
    def __init__(__self__, *,
                 x: Optional[float] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[float]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[float]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tnum2ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[float]]
elif False:
    Tnum2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tnum2Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[float]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tnum3Dict(TypedDict):
        x: NotRequired[float]
elif False:
    Tnum3Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tnum3:
    def __init__(__self__, *,
                 x: Optional[float] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[float]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[float]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tnum3ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[float]]
elif False:
    Tnum3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tnum3Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[float]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class TsecretBool1Dict(TypedDict):
        secret_x: NotRequired[bool]
elif False:
    TsecretBool1Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretBool1:
    def __init__(__self__, *,
                 secret_x: Optional[bool] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[bool]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[bool]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretBool1ArgsDict(TypedDict):
        secret_x: NotRequired[pulumi.Input[bool]]
elif False:
    TsecretBool1ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretBool1Args:
    def __init__(__self__, *,
                 secret_x: Optional[pulumi.Input[bool]] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretBool2Dict(TypedDict):
        secret_x: NotRequired[bool]
elif False:
    TsecretBool2Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretBool2:
    def __init__(__self__, *,
                 secret_x: Optional[bool] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[bool]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[bool]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretBool2ArgsDict(TypedDict):
        secret_x: NotRequired[pulumi.Input[bool]]
elif False:
    TsecretBool2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretBool2Args:
    def __init__(__self__, *,
                 secret_x: Optional[pulumi.Input[bool]] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretBool3Dict(TypedDict):
        secret_x: NotRequired[bool]
elif False:
    TsecretBool3Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretBool3:
    def __init__(__self__, *,
                 secret_x: Optional[bool] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[bool]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[bool]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretBool3ArgsDict(TypedDict):
        secret_x: NotRequired[pulumi.Input[bool]]
elif False:
    TsecretBool3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretBool3Args:
    def __init__(__self__, *,
                 secret_x: Optional[pulumi.Input[bool]] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretInt1Dict(TypedDict):
        secret_x: NotRequired[int]
elif False:
    TsecretInt1Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretInt1:
    def __init__(__self__, *,
                 secret_x: Optional[int] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[int]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[int]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretInt1ArgsDict(TypedDict):
        secret_x: NotRequired[pulumi.Input[int]]
elif False:
    TsecretInt1ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretInt1Args:
    def __init__(__self__, *,
                 secret_x: Optional[pulumi.Input[int]] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretInt2Dict(TypedDict):
        secret_x: NotRequired[int]
elif False:
    TsecretInt2Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretInt2:
    def __init__(__self__, *,
                 secret_x: Optional[int] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[int]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[int]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretInt2ArgsDict(TypedDict):
        secret_x: NotRequired[pulumi.Input[int]]
elif False:
    TsecretInt2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretInt2Args:
    def __init__(__self__, *,
                 secret_x: Optional[pulumi.Input[int]] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretInt3Dict(TypedDict):
        secret_x: NotRequired[int]
elif False:
    TsecretInt3Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretInt3:
    def __init__(__self__, *,
                 secret_x: Optional[int] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[int]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[int]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretInt3ArgsDict(TypedDict):
        secret_x: NotRequired[pulumi.Input[int]]
elif False:
    TsecretInt3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretInt3Args:
    def __init__(__self__, *,
                 secret_x: Optional[pulumi.Input[int]] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretNum1Dict(TypedDict):
        secret_x: NotRequired[float]
elif False:
    TsecretNum1Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretNum1:
    def __init__(__self__, *,
                 secret_x: Optional[float] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[float]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[float]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretNum1ArgsDict(TypedDict):
        secret_x: NotRequired[pulumi.Input[float]]
elif False:
    TsecretNum1ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretNum1Args:
    def __init__(__self__, *,
                 secret_x: Optional[pulumi.Input[float]] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretNum2Dict(TypedDict):
        secret_x: NotRequired[float]
elif False:
    TsecretNum2Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretNum2:
    def __init__(__self__, *,
                 secret_x: Optional[float] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[float]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[float]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretNum2ArgsDict(TypedDict):
        secret_x: NotRequired[pulumi.Input[float]]
elif False:
    TsecretNum2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretNum2Args:
    def __init__(__self__, *,
                 secret_x: Optional[pulumi.Input[float]] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretNum3Dict(TypedDict):
        secret_x: NotRequired[float]
elif False:
    TsecretNum3Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretNum3:
    def __init__(__self__, *,
                 secret_x: Optional[float] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[float]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[float]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretNum3ArgsDict(TypedDict):
        secret_x: NotRequired[pulumi.Input[float]]
elif False:
    TsecretNum3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretNum3Args:
    def __init__(__self__, *,
                 secret_x: Optional[pulumi.Input[float]] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretString1Dict(TypedDict):
        secret_x: NotRequired[str]
elif False:
    TsecretString1Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretString1:
    def __init__(__self__, *,
                 secret_x: Optional[str] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[str]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[str]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretString1ArgsDict(TypedDict):
        secret_x: NotRequired[pulumi.Input[str]]
elif False:
    TsecretString1ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretString1Args:
    def __init__(__self__, *,
                 secret_x: Optional[pulumi.Input[str]] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretString2Dict(TypedDict):
        secret_x: NotRequired[str]
elif False:
    TsecretString2Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretString2:
    def __init__(__self__, *,
                 secret_x: Optional[str] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[str]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[str]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretString2ArgsDict(TypedDict):
        secret_x: NotRequired[pulumi.Input[str]]
elif False:
    TsecretString2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretString2Args:
    def __init__(__self__, *,
                 secret_x: Optional[pulumi.Input[str]] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretString3Dict(TypedDict):
        secret_x: NotRequired[str]
elif False:
    TsecretString3Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretString3:
    def __init__(__self__, *,
                 secret_x: Optional[str] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[str]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[str]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class TsecretString3ArgsDict(TypedDict):
        secret_x: NotRequired[pulumi.Input[str]]
elif False:
    TsecretString3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class TsecretString3Args:
    def __init__(__self__, *,
                 secret_x: Optional[pulumi.Input[str]] = None):
        if secret_x is not None:
            pulumi.set(__self__, "secret_x", secret_x)

    @property
    @pulumi.getter(name="secretX")
    def secret_x(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_x")

    @secret_x.setter
    def secret_x(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_x", value)


if not MYPY:
    class Tstring1Dict(TypedDict):
        x: NotRequired[str]
elif False:
    Tstring1Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tstring1:
    def __init__(__self__, *,
                 x: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[str]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tstring1ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[str]]
elif False:
    Tstring1ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tstring1Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[str]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tstring2Dict(TypedDict):
        x: NotRequired[str]
elif False:
    Tstring2Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tstring2:
    def __init__(__self__, *,
                 x: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[str]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tstring2ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[str]]
elif False:
    Tstring2ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tstring2Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[str]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tstring3Dict(TypedDict):
        x: NotRequired[str]
elif False:
    Tstring3Dict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tstring3:
    def __init__(__self__, *,
                 x: Optional[str] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[str]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[str]):
        pulumi.set(self, "x", value)


if not MYPY:
    class Tstring3ArgsDict(TypedDict):
        x: NotRequired[pulumi.Input[str]]
elif False:
    Tstring3ArgsDict: TypeAlias = Mapping[str, Any]

@pulumi.input_type
class Tstring3Args:
    def __init__(__self__, *,
                 x: Optional[pulumi.Input[str]] = None):
        if x is not None:
            pulumi.set(__self__, "x", x)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "x", value)


