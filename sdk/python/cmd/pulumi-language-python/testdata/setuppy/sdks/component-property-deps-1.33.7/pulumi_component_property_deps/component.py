# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins
import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from .custom import Custom

__all__ = ['ComponentArgs', 'Component']

@pulumi.input_type
class ComponentArgs:
    def __init__(__self__, *,
                 resource: 'Custom',
                 resource_list: Sequence['Custom'],
                 resource_map: Mapping[str, 'Custom']):
        """
        The set of arguments for constructing a Component resource.
        """
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "resource_list", resource_list)
        pulumi.set(__self__, "resource_map", resource_map)

    @property
    @pulumi.getter
    def resource(self) -> 'Custom':
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: 'Custom'):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter(name="resourceList")
    def resource_list(self) -> Sequence['Custom']:
        return pulumi.get(self, "resource_list")

    @resource_list.setter
    def resource_list(self, value: Sequence['Custom']):
        pulumi.set(self, "resource_list", value)

    @property
    @pulumi.getter(name="resourceMap")
    def resource_map(self) -> Mapping[str, 'Custom']:
        return pulumi.get(self, "resource_map")

    @resource_map.setter
    def resource_map(self, value: Mapping[str, 'Custom']):
        pulumi.set(self, "resource_map", value)


@pulumi.type_token("component-property-deps:index:Component")
class Component(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 resource: Optional['Custom'] = None,
                 resource_list: Optional[Sequence['Custom']] = None,
                 resource_map: Optional[Mapping[str, 'Custom']] = None,
                 __props__=None):
        """
        A component resource that accepts a list of resources. The construct request's property dependencies are returned as an output.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ComponentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        A component resource that accepts a list of resources. The construct request's property dependencies are returned as an output.

        :param str resource_name: The name of the resource.
        :param ComponentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComponentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 resource: Optional['Custom'] = None,
                 resource_list: Optional[Sequence['Custom']] = None,
                 resource_map: Optional[Mapping[str, 'Custom']] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComponentArgs.__new__(ComponentArgs)

            if resource is None and not opts.urn:
                raise TypeError("Missing required property 'resource'")
            __props__.__dict__["resource"] = resource
            if resource_list is None and not opts.urn:
                raise TypeError("Missing required property 'resource_list'")
            __props__.__dict__["resource_list"] = resource_list
            if resource_map is None and not opts.urn:
                raise TypeError("Missing required property 'resource_map'")
            __props__.__dict__["resource_map"] = resource_map
            __props__.__dict__["property_deps"] = None
        super(Component, __self__).__init__(
            'component-property-deps:index:Component',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter(name="propertyDeps")
    def property_deps(self) -> pulumi.Output[Mapping[str, Sequence[builtins.str]]]:
        return pulumi.get(self, "property_deps")

    @pulumi.output_type
    class RefsResult:
        def __init__(__self__, result=None):
            if result and not isinstance(result, dict):
                raise TypeError("Expected argument 'result' to be a dict")
            pulumi.set(__self__, "result", result)

        @property
        @pulumi.getter
        def result(self) -> Mapping[str, Sequence[builtins.str]]:
            return pulumi.get(self, "result")

    def refs(__self__, *,
             resource: 'Custom',
             resource_list: Sequence[pulumi.Input['Custom']],
             resource_map: Mapping[str, pulumi.Input['Custom']]) -> pulumi.Output['Component.RefsResult']:
        """
        The `refs` method of the `Component` component resource. Returns the call request's property dependencies.
        """
        __args__ = dict()
        __args__['__self__'] = __self__
        __args__['resource'] = resource
        __args__['resourceList'] = resource_list
        __args__['resourceMap'] = resource_map
        return pulumi.runtime.call('component-property-deps:index:Component/refs', __args__, res=__self__, typ=Component.RefsResult)

