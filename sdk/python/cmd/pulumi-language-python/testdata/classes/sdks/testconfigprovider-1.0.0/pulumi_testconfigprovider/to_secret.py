# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'ToSecretResult',
    'AwaitableToSecretResult',
    'to_secret',
    'to_secret_output',
]

@pulumi.output_type
class ToSecretResult:
    def __init__(__self__, b=None, i=None, lb=None, li=None, ln=None, ls=None, mb=None, mi=None, mn=None, ms=None, n=None, ob=None, oi=None, on=None, os=None, s=None):
        if b and not isinstance(b, bool):
            raise TypeError("Expected argument 'b' to be a bool")
        pulumi.set(__self__, "b", b)
        if i and not isinstance(i, int):
            raise TypeError("Expected argument 'i' to be a int")
        pulumi.set(__self__, "i", i)
        if lb and not isinstance(lb, list):
            raise TypeError("Expected argument 'lb' to be a list")
        pulumi.set(__self__, "lb", lb)
        if li and not isinstance(li, list):
            raise TypeError("Expected argument 'li' to be a list")
        pulumi.set(__self__, "li", li)
        if ln and not isinstance(ln, list):
            raise TypeError("Expected argument 'ln' to be a list")
        pulumi.set(__self__, "ln", ln)
        if ls and not isinstance(ls, list):
            raise TypeError("Expected argument 'ls' to be a list")
        pulumi.set(__self__, "ls", ls)
        if mb and not isinstance(mb, dict):
            raise TypeError("Expected argument 'mb' to be a dict")
        pulumi.set(__self__, "mb", mb)
        if mi and not isinstance(mi, dict):
            raise TypeError("Expected argument 'mi' to be a dict")
        pulumi.set(__self__, "mi", mi)
        if mn and not isinstance(mn, dict):
            raise TypeError("Expected argument 'mn' to be a dict")
        pulumi.set(__self__, "mn", mn)
        if ms and not isinstance(ms, dict):
            raise TypeError("Expected argument 'ms' to be a dict")
        pulumi.set(__self__, "ms", ms)
        if n and not isinstance(n, float):
            raise TypeError("Expected argument 'n' to be a float")
        pulumi.set(__self__, "n", n)
        if ob and not isinstance(ob, dict):
            raise TypeError("Expected argument 'ob' to be a dict")
        pulumi.set(__self__, "ob", ob)
        if oi and not isinstance(oi, dict):
            raise TypeError("Expected argument 'oi' to be a dict")
        pulumi.set(__self__, "oi", oi)
        if on and not isinstance(on, dict):
            raise TypeError("Expected argument 'on' to be a dict")
        pulumi.set(__self__, "on", on)
        if os and not isinstance(os, dict):
            raise TypeError("Expected argument 'os' to be a dict")
        pulumi.set(__self__, "os", os)
        if s and not isinstance(s, str):
            raise TypeError("Expected argument 's' to be a str")
        pulumi.set(__self__, "s", s)

    @property
    @pulumi.getter
    def b(self) -> bool:
        return pulumi.get(self, "b")

    @property
    @pulumi.getter
    def i(self) -> int:
        return pulumi.get(self, "i")

    @property
    @pulumi.getter
    def lb(self) -> Sequence[bool]:
        return pulumi.get(self, "lb")

    @property
    @pulumi.getter
    def li(self) -> Sequence[int]:
        return pulumi.get(self, "li")

    @property
    @pulumi.getter
    def ln(self) -> Sequence[float]:
        return pulumi.get(self, "ln")

    @property
    @pulumi.getter
    def ls(self) -> Sequence[str]:
        return pulumi.get(self, "ls")

    @property
    @pulumi.getter
    def mb(self) -> Mapping[str, bool]:
        return pulumi.get(self, "mb")

    @property
    @pulumi.getter
    def mi(self) -> Mapping[str, int]:
        return pulumi.get(self, "mi")

    @property
    @pulumi.getter
    def mn(self) -> Mapping[str, float]:
        return pulumi.get(self, "mn")

    @property
    @pulumi.getter
    def ms(self) -> Mapping[str, str]:
        return pulumi.get(self, "ms")

    @property
    @pulumi.getter
    def n(self) -> float:
        return pulumi.get(self, "n")

    @property
    @pulumi.getter
    def ob(self) -> 'outputs.Tb':
        return pulumi.get(self, "ob")

    @property
    @pulumi.getter
    def oi(self) -> 'outputs.Ti':
        return pulumi.get(self, "oi")

    @property
    @pulumi.getter
    def on(self) -> 'outputs.Tn':
        return pulumi.get(self, "on")

    @property
    @pulumi.getter
    def os(self) -> 'outputs.Ts':
        return pulumi.get(self, "os")

    @property
    @pulumi.getter
    def s(self) -> str:
        return pulumi.get(self, "s")


class AwaitableToSecretResult(ToSecretResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ToSecretResult(
            b=self.b,
            i=self.i,
            lb=self.lb,
            li=self.li,
            ln=self.ln,
            ls=self.ls,
            mb=self.mb,
            mi=self.mi,
            mn=self.mn,
            ms=self.ms,
            n=self.n,
            ob=self.ob,
            oi=self.oi,
            on=self.on,
            os=self.os,
            s=self.s)


def to_secret(b: Optional[bool] = None,
              i: Optional[int] = None,
              lb: Optional[Sequence[bool]] = None,
              li: Optional[Sequence[int]] = None,
              ln: Optional[Sequence[float]] = None,
              ls: Optional[Sequence[str]] = None,
              mb: Optional[Mapping[str, bool]] = None,
              mi: Optional[Mapping[str, int]] = None,
              mn: Optional[Mapping[str, float]] = None,
              ms: Optional[Mapping[str, str]] = None,
              n: Optional[float] = None,
              ob: Optional[pulumi.InputType['Tb']] = None,
              oi: Optional[pulumi.InputType['Ti']] = None,
              on: Optional[pulumi.InputType['Tn']] = None,
              os: Optional[pulumi.InputType['Ts']] = None,
              s: Optional[str] = None,
              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableToSecretResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['b'] = b
    __args__['i'] = i
    __args__['lb'] = lb
    __args__['li'] = li
    __args__['ln'] = ln
    __args__['ls'] = ls
    __args__['mb'] = mb
    __args__['mi'] = mi
    __args__['mn'] = mn
    __args__['ms'] = ms
    __args__['n'] = n
    __args__['ob'] = ob
    __args__['oi'] = oi
    __args__['on'] = on
    __args__['os'] = os
    __args__['s'] = s
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('testconfigprovider:index:toSecret', __args__, opts=opts, typ=ToSecretResult).value

    return AwaitableToSecretResult(
        b=pulumi.get(__ret__, 'b'),
        i=pulumi.get(__ret__, 'i'),
        lb=pulumi.get(__ret__, 'lb'),
        li=pulumi.get(__ret__, 'li'),
        ln=pulumi.get(__ret__, 'ln'),
        ls=pulumi.get(__ret__, 'ls'),
        mb=pulumi.get(__ret__, 'mb'),
        mi=pulumi.get(__ret__, 'mi'),
        mn=pulumi.get(__ret__, 'mn'),
        ms=pulumi.get(__ret__, 'ms'),
        n=pulumi.get(__ret__, 'n'),
        ob=pulumi.get(__ret__, 'ob'),
        oi=pulumi.get(__ret__, 'oi'),
        on=pulumi.get(__ret__, 'on'),
        os=pulumi.get(__ret__, 'os'),
        s=pulumi.get(__ret__, 's'))
def to_secret_output(b: Optional[pulumi.Input[Optional[bool]]] = None,
                     i: Optional[pulumi.Input[Optional[int]]] = None,
                     lb: Optional[pulumi.Input[Optional[Sequence[bool]]]] = None,
                     li: Optional[pulumi.Input[Optional[Sequence[int]]]] = None,
                     ln: Optional[pulumi.Input[Optional[Sequence[float]]]] = None,
                     ls: Optional[pulumi.Input[Optional[Sequence[str]]]] = None,
                     mb: Optional[pulumi.Input[Optional[Mapping[str, bool]]]] = None,
                     mi: Optional[pulumi.Input[Optional[Mapping[str, int]]]] = None,
                     mn: Optional[pulumi.Input[Optional[Mapping[str, float]]]] = None,
                     ms: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                     n: Optional[pulumi.Input[Optional[float]]] = None,
                     ob: Optional[pulumi.Input[Optional[pulumi.InputType['Tb']]]] = None,
                     oi: Optional[pulumi.Input[Optional[pulumi.InputType['Ti']]]] = None,
                     on: Optional[pulumi.Input[Optional[pulumi.InputType['Tn']]]] = None,
                     os: Optional[pulumi.Input[Optional[pulumi.InputType['Ts']]]] = None,
                     s: Optional[pulumi.Input[Optional[str]]] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ToSecretResult]:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['b'] = b
    __args__['i'] = i
    __args__['lb'] = lb
    __args__['li'] = li
    __args__['ln'] = ln
    __args__['ls'] = ls
    __args__['mb'] = mb
    __args__['mi'] = mi
    __args__['mn'] = mn
    __args__['ms'] = ms
    __args__['n'] = n
    __args__['ob'] = ob
    __args__['oi'] = oi
    __args__['on'] = on
    __args__['os'] = os
    __args__['s'] = s
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('testconfigprovider:index:toSecret', __args__, opts=opts, typ=ToSecretResult)
    return __ret__.apply(lambda __response__: ToSecretResult(
        b=pulumi.get(__response__, 'b'),
        i=pulumi.get(__response__, 'i'),
        lb=pulumi.get(__response__, 'lb'),
        li=pulumi.get(__response__, 'li'),
        ln=pulumi.get(__response__, 'ln'),
        ls=pulumi.get(__response__, 'ls'),
        mb=pulumi.get(__response__, 'mb'),
        mi=pulumi.get(__response__, 'mi'),
        mn=pulumi.get(__response__, 'mn'),
        ms=pulumi.get(__response__, 'ms'),
        n=pulumi.get(__response__, 'n'),
        ob=pulumi.get(__response__, 'ob'),
        oi=pulumi.get(__response__, 'oi'),
        on=pulumi.get(__response__, 'on'),
        os=pulumi.get(__response__, 'os'),
        s=pulumi.get(__response__, 's')))
