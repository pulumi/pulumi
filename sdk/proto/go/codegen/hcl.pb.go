// Copyright 2016-2023, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.5
// source: pulumi/codegen/hcl.proto

package codegen

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_	= protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_	= protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DiagnosticSeverity is the severity level of a diagnostic message.
type DiagnosticSeverity int32

const (
	// DIAG_INVALID is the invalid zero value of DiagnosticSeverity
	DiagnosticSeverity_DIAG_INVALID	DiagnosticSeverity	= 0
	// DIAG_ERROR indicates that the problem reported by a diagnostic prevents
	// further progress in parsing and/or evaluating the subject.
	DiagnosticSeverity_DIAG_ERROR	DiagnosticSeverity	= 1
	// DIAG_WARNING indicates that the problem reported by a diagnostic warrants
	// user attention but does not prevent further progress. It is most
	// commonly used for showing deprecation notices.
	DiagnosticSeverity_DIAG_WARNING	DiagnosticSeverity	= 2
)

// Enum value maps for DiagnosticSeverity.
var (
	DiagnosticSeverity_name	= map[int32]string{
		0:	"DIAG_INVALID",
		1:	"DIAG_ERROR",
		2:	"DIAG_WARNING",
	}
	DiagnosticSeverity_value	= map[string]int32{
		"DIAG_INVALID":	0,
		"DIAG_ERROR":	1,
		"DIAG_WARNING":	2,
	}
)

func (x DiagnosticSeverity) Enum() *DiagnosticSeverity {
	p := new(DiagnosticSeverity)
	*p = x
	return p
}

func (x DiagnosticSeverity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiagnosticSeverity) Descriptor() protoreflect.EnumDescriptor {
	return file_pulumi_codegen_hcl_proto_enumTypes[0].Descriptor()
}

func (DiagnosticSeverity) Type() protoreflect.EnumType {
	return &file_pulumi_codegen_hcl_proto_enumTypes[0]
}

func (x DiagnosticSeverity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiagnosticSeverity.Descriptor instead.
func (DiagnosticSeverity) EnumDescriptor() ([]byte, []int) {
	return file_pulumi_codegen_hcl_proto_rawDescGZIP(), []int{0}
}

// Pos represents a single position in a source file, by addressing the start byte of a unicode character
// encoded in UTF-8.
type Pos struct {
	state	protoimpl.MessageState	`protogen:"open.v1"`
	// Line is the source code line where this position points. Lines are counted starting at 1 and
	// incremented for each newline character encountered.
	Line	int64	`protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	// Column is the source code column where this position points, in unicode characters, with counting
	// starting at 1.
	//
	// Column counts characters as they appear visually, so for example a latin letter with a combining
	// diacritic mark counts as one character. This is intended for rendering visual markers against source
	// code in contexts where these diacritics would be rendered in a single character cell. Technically
	// speaking, Column is counting grapheme clusters as used in unicode normalization.
	Column	int64	`protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	// Byte is the byte offset into the file where the indicated character begins. This is a zero-based offset
	// to the first byte of the first UTF-8 codepoint sequence in the character, and thus gives a position
	// that can be resolved _without_ awareness of Unicode characters.
	Byte		int64	`protobuf:"varint,3,opt,name=byte,proto3" json:"byte,omitempty"`
	unknownFields	protoimpl.UnknownFields
	sizeCache	protoimpl.SizeCache
}

func (x *Pos) Reset() {
	*x = Pos{}
	mi := &file_pulumi_codegen_hcl_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pos) ProtoMessage()	{}

func (x *Pos) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_hcl_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pos.ProtoReflect.Descriptor instead.
func (*Pos) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_hcl_proto_rawDescGZIP(), []int{0}
}

func (x *Pos) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Pos) GetColumn() int64 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *Pos) GetByte() int64 {
	if x != nil {
		return x.Byte
	}
	return 0
}

// Range represents a span of characters between two positions in a source file.
type Range struct {
	state	protoimpl.MessageState	`protogen:"open.v1"`
	// Filename is the name of the file into which this range's positions point.
	Filename	string	`protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	// Start and End represent the bounds of this range. Start is inclusive and End is exclusive.
	Start		*Pos	`protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End		*Pos	`protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields	protoimpl.UnknownFields
	sizeCache	protoimpl.SizeCache
}

func (x *Range) Reset() {
	*x = Range{}
	mi := &file_pulumi_codegen_hcl_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage()	{}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_hcl_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_hcl_proto_rawDescGZIP(), []int{1}
}

func (x *Range) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Range) GetStart() *Pos {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Range) GetEnd() *Pos {
	if x != nil {
		return x.End
	}
	return nil
}

// Diagnostic represents information to be presented to a user about an error or anomaly in parsing or evaluating configuration.
type Diagnostic struct {
	state		protoimpl.MessageState	`protogen:"open.v1"`
	Severity	DiagnosticSeverity	`protobuf:"varint,1,opt,name=severity,proto3,enum=pulumirpc.codegen.DiagnosticSeverity" json:"severity,omitempty"`
	// Summary and Detail contain the English-language description of the
	// problem. Summary is a terse description of the general problem and
	// detail is a more elaborate, often-multi-sentence description of
	// the problem and what might be done to solve it.
	Summary	string	`protobuf:"bytes,2,opt,name=summary,proto3" json:"summary,omitempty"`
	Detail	string	`protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
	// Subject and Context are both source ranges relating to the diagnostic.
	//
	// Subject is a tight range referring to exactly the construct that
	// is problematic, while Context is an optional broader range (which should
	// fully contain Subject) that ought to be shown around Subject when
	// generating isolated source-code snippets in diagnostic messages.
	// If Context is nil, the Subject is also the Context.
	//
	// Some diagnostics have no source ranges at all. If Context is set then
	// Subject should always also be set.
	Subject		*Range	`protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	Context		*Range	`protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	unknownFields	protoimpl.UnknownFields
	sizeCache	protoimpl.SizeCache
}

func (x *Diagnostic) Reset() {
	*x = Diagnostic{}
	mi := &file_pulumi_codegen_hcl_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Diagnostic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diagnostic) ProtoMessage()	{}

func (x *Diagnostic) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_codegen_hcl_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diagnostic.ProtoReflect.Descriptor instead.
func (*Diagnostic) Descriptor() ([]byte, []int) {
	return file_pulumi_codegen_hcl_proto_rawDescGZIP(), []int{2}
}

func (x *Diagnostic) GetSeverity() DiagnosticSeverity {
	if x != nil {
		return x.Severity
	}
	return DiagnosticSeverity_DIAG_INVALID
}

func (x *Diagnostic) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Diagnostic) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *Diagnostic) GetSubject() *Range {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Diagnostic) GetContext() *Range {
	if x != nil {
		return x.Context
	}
	return nil
}

var File_pulumi_codegen_hcl_proto protoreflect.FileDescriptor

const file_pulumi_codegen_hcl_proto_rawDesc = "" +
	"\n" +
	"\x18pulumi/codegen/hcl.proto\x12\x11pulumirpc.codegen\"E\n" +
	"\x03Pos\x12\x12\n" +
	"\x04line\x18\x01 \x01(\x03R\x04line\x12\x16\n" +
	"\x06column\x18\x02 \x01(\x03R\x06column\x12\x12\n" +
	"\x04byte\x18\x03 \x01(\x03R\x04byte\"{\n" +
	"\x05Range\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12,\n" +
	"\x05start\x18\x02 \x01(\v2\x16.pulumirpc.codegen.PosR\x05start\x12(\n" +
	"\x03end\x18\x03 \x01(\v2\x16.pulumirpc.codegen.PosR\x03end\"\xe9\x01\n" +
	"\n" +
	"Diagnostic\x12A\n" +
	"\bseverity\x18\x01 \x01(\x0e2%.pulumirpc.codegen.DiagnosticSeverityR\bseverity\x12\x18\n" +
	"\asummary\x18\x02 \x01(\tR\asummary\x12\x16\n" +
	"\x06detail\x18\x03 \x01(\tR\x06detail\x122\n" +
	"\asubject\x18\x04 \x01(\v2\x18.pulumirpc.codegen.RangeR\asubject\x122\n" +
	"\acontext\x18\x05 \x01(\v2\x18.pulumirpc.codegen.RangeR\acontext*H\n" +
	"\x12DiagnosticSeverity\x12\x10\n" +
	"\fDIAG_INVALID\x10\x00\x12\x0e\n" +
	"\n" +
	"DIAG_ERROR\x10\x01\x12\x10\n" +
	"\fDIAG_WARNING\x10\x02B2Z0github.com/pulumi/pulumi/sdk/v3/proto/go/codegenb\x06proto3"

var (
	file_pulumi_codegen_hcl_proto_rawDescOnce	sync.Once
	file_pulumi_codegen_hcl_proto_rawDescData	[]byte
)

func file_pulumi_codegen_hcl_proto_rawDescGZIP() []byte {
	file_pulumi_codegen_hcl_proto_rawDescOnce.Do(func() {
		file_pulumi_codegen_hcl_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pulumi_codegen_hcl_proto_rawDesc), len(file_pulumi_codegen_hcl_proto_rawDesc)))
	})
	return file_pulumi_codegen_hcl_proto_rawDescData
}

var file_pulumi_codegen_hcl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pulumi_codegen_hcl_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pulumi_codegen_hcl_proto_goTypes = []any{
	(DiagnosticSeverity)(0),	// 0: pulumirpc.codegen.DiagnosticSeverity
	(*Pos)(nil),			// 1: pulumirpc.codegen.Pos
	(*Range)(nil),			// 2: pulumirpc.codegen.Range
	(*Diagnostic)(nil),		// 3: pulumirpc.codegen.Diagnostic
}
var file_pulumi_codegen_hcl_proto_depIdxs = []int32{
	1,	// 0: pulumirpc.codegen.Range.start:type_name -> pulumirpc.codegen.Pos
	1,	// 1: pulumirpc.codegen.Range.end:type_name -> pulumirpc.codegen.Pos
	0,	// 2: pulumirpc.codegen.Diagnostic.severity:type_name -> pulumirpc.codegen.DiagnosticSeverity
	2,	// 3: pulumirpc.codegen.Diagnostic.subject:type_name -> pulumirpc.codegen.Range
	2,	// 4: pulumirpc.codegen.Diagnostic.context:type_name -> pulumirpc.codegen.Range
	5,	// [5:5] is the sub-list for method output_type
	5,	// [5:5] is the sub-list for method input_type
	5,	// [5:5] is the sub-list for extension type_name
	5,	// [5:5] is the sub-list for extension extendee
	0,	// [0:5] is the sub-list for field type_name
}

func init()	{ file_pulumi_codegen_hcl_proto_init() }
func file_pulumi_codegen_hcl_proto_init() {
	if File_pulumi_codegen_hcl_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath:	reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor:	unsafe.Slice(unsafe.StringData(file_pulumi_codegen_hcl_proto_rawDesc), len(file_pulumi_codegen_hcl_proto_rawDesc)),
			NumEnums:	1,
			NumMessages:	3,
			NumExtensions:	0,
			NumServices:	0,
		},
		GoTypes:		file_pulumi_codegen_hcl_proto_goTypes,
		DependencyIndexes:	file_pulumi_codegen_hcl_proto_depIdxs,
		EnumInfos:		file_pulumi_codegen_hcl_proto_enumTypes,
		MessageInfos:		file_pulumi_codegen_hcl_proto_msgTypes,
	}.Build()
	File_pulumi_codegen_hcl_proto = out.File
	file_pulumi_codegen_hcl_proto_goTypes = nil
	file_pulumi_codegen_hcl_proto_depIdxs = nil
}
