// Code generated by protoc-gen-go.
// source: coin.proto
// DO NOT EDIT!

package pulumirpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type OfferRequest struct {
	Coins   int64   `protobuf:"varint,1,opt,name=coins" json:"coins,omitempty"`
	Price   float32 `protobuf:"fixed32,2,opt,name=price" json:"price,omitempty"`
	Reason  string  `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	Classic bool    `protobuf:"varint,4,opt,name=classic" json:"classic,omitempty"`
	Ethical float32 `protobuf:"fixed32,5,opt,name=ethical" json:"ethical,omitempty"`
}

func (m *OfferRequest) Reset()                    { *m = OfferRequest{} }
func (m *OfferRequest) String() string            { return proto.CompactTextString(m) }
func (*OfferRequest) ProtoMessage()               {}
func (*OfferRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *OfferRequest) GetCoins() int64 {
	if m != nil {
		return m.Coins
	}
	return 0
}

func (m *OfferRequest) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OfferRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *OfferRequest) GetClassic() bool {
	if m != nil {
		return m.Classic
	}
	return false
}

func (m *OfferRequest) GetEthical() float32 {
	if m != nil {
		return m.Ethical
	}
	return 0
}

type OfferResponse struct {
	Buyers  int64 `protobuf:"varint,1,opt,name=buyers" json:"buyers,omitempty"`
	Hodlers int64 `protobuf:"varint,2,opt,name=hodlers" json:"hodlers,omitempty"`
}

func (m *OfferResponse) Reset()                    { *m = OfferResponse{} }
func (m *OfferResponse) String() string            { return proto.CompactTextString(m) }
func (*OfferResponse) ProtoMessage()               {}
func (*OfferResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *OfferResponse) GetBuyers() int64 {
	if m != nil {
		return m.Buyers
	}
	return 0
}

func (m *OfferResponse) GetHodlers() int64 {
	if m != nil {
		return m.Hodlers
	}
	return 0
}

type PumpRequest struct {
	TargetPrice   float32 `protobuf:"fixed32,1,opt,name=target_price,json=targetPrice" json:"target_price,omitempty"`
	MaxTime       int64   `protobuf:"varint,2,opt,name=max_time,json=maxTime" json:"max_time,omitempty"`
	CoverYoTracks bool    `protobuf:"varint,3,opt,name=cover_yo_tracks,json=coverYoTracks" json:"cover_yo_tracks,omitempty"`
}

func (m *PumpRequest) Reset()                    { *m = PumpRequest{} }
func (m *PumpRequest) String() string            { return proto.CompactTextString(m) }
func (*PumpRequest) ProtoMessage()               {}
func (*PumpRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *PumpRequest) GetTargetPrice() float32 {
	if m != nil {
		return m.TargetPrice
	}
	return 0
}

func (m *PumpRequest) GetMaxTime() int64 {
	if m != nil {
		return m.MaxTime
	}
	return 0
}

func (m *PumpRequest) GetCoverYoTracks() bool {
	if m != nil {
		return m.CoverYoTracks
	}
	return false
}

type PumpResponse struct {
	CurrentPrice float32 `protobuf:"fixed32,1,opt,name=current_price,json=currentPrice" json:"current_price,omitempty"`
	Participants int64   `protobuf:"varint,2,opt,name=participants" json:"participants,omitempty"`
}

func (m *PumpResponse) Reset()                    { *m = PumpResponse{} }
func (m *PumpResponse) String() string            { return proto.CompactTextString(m) }
func (*PumpResponse) ProtoMessage()               {}
func (*PumpResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *PumpResponse) GetCurrentPrice() float32 {
	if m != nil {
		return m.CurrentPrice
	}
	return 0
}

func (m *PumpResponse) GetParticipants() int64 {
	if m != nil {
		return m.Participants
	}
	return 0
}

type DumpRequest struct {
	Threshold float32 `protobuf:"fixed32,1,opt,name=threshold" json:"threshold,omitempty"`
}

func (m *DumpRequest) Reset()                    { *m = DumpRequest{} }
func (m *DumpRequest) String() string            { return proto.CompactTextString(m) }
func (*DumpRequest) ProtoMessage()               {}
func (*DumpRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *DumpRequest) GetThreshold() float32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

type DumpResponse struct {
	Coins      int64   `protobuf:"varint,1,opt,name=coins" json:"coins,omitempty"`
	FinalPrice float32 `protobuf:"fixed32,2,opt,name=final_price,json=finalPrice" json:"final_price,omitempty"`
	Amiwhale   bool    `protobuf:"varint,3,opt,name=amiwhale" json:"amiwhale,omitempty"`
}

func (m *DumpResponse) Reset()                    { *m = DumpResponse{} }
func (m *DumpResponse) String() string            { return proto.CompactTextString(m) }
func (*DumpResponse) ProtoMessage()               {}
func (*DumpResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *DumpResponse) GetCoins() int64 {
	if m != nil {
		return m.Coins
	}
	return 0
}

func (m *DumpResponse) GetFinalPrice() float32 {
	if m != nil {
		return m.FinalPrice
	}
	return 0
}

func (m *DumpResponse) GetAmiwhale() bool {
	if m != nil {
		return m.Amiwhale
	}
	return false
}

func init() {
	proto.RegisterType((*OfferRequest)(nil), "pulumirpc.OfferRequest")
	proto.RegisterType((*OfferResponse)(nil), "pulumirpc.OfferResponse")
	proto.RegisterType((*PumpRequest)(nil), "pulumirpc.PumpRequest")
	proto.RegisterType((*PumpResponse)(nil), "pulumirpc.PumpResponse")
	proto.RegisterType((*DumpRequest)(nil), "pulumirpc.DumpRequest")
	proto.RegisterType((*DumpResponse)(nil), "pulumirpc.DumpResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CoinProvider service

type CoinProviderClient interface {
	// Offer offers a new Initial Coin Offering (ICO) to the investment and mining community at large.
	Offer(ctx context.Context, in *OfferRequest, opts ...grpc.CallOption) (*OfferResponse, error)
	// Pump that coin price!
	Pump(ctx context.Context, in *PumpRequest, opts ...grpc.CallOption) (*PumpResponse, error)
	// Dump that coin and get rich!
	Dump(ctx context.Context, in *DumpRequest, opts ...grpc.CallOption) (*DumpResponse, error)
}

type coinProviderClient struct {
	cc *grpc.ClientConn
}

func NewCoinProviderClient(cc *grpc.ClientConn) CoinProviderClient {
	return &coinProviderClient{cc}
}

func (c *coinProviderClient) Offer(ctx context.Context, in *OfferRequest, opts ...grpc.CallOption) (*OfferResponse, error) {
	out := new(OfferResponse)
	err := grpc.Invoke(ctx, "/pulumirpc.CoinProvider/Offer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinProviderClient) Pump(ctx context.Context, in *PumpRequest, opts ...grpc.CallOption) (*PumpResponse, error) {
	out := new(PumpResponse)
	err := grpc.Invoke(ctx, "/pulumirpc.CoinProvider/Pump", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coinProviderClient) Dump(ctx context.Context, in *DumpRequest, opts ...grpc.CallOption) (*DumpResponse, error) {
	out := new(DumpResponse)
	err := grpc.Invoke(ctx, "/pulumirpc.CoinProvider/Dump", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CoinProvider service

type CoinProviderServer interface {
	// Offer offers a new Initial Coin Offering (ICO) to the investment and mining community at large.
	Offer(context.Context, *OfferRequest) (*OfferResponse, error)
	// Pump that coin price!
	Pump(context.Context, *PumpRequest) (*PumpResponse, error)
	// Dump that coin and get rich!
	Dump(context.Context, *DumpRequest) (*DumpResponse, error)
}

func RegisterCoinProviderServer(s *grpc.Server, srv CoinProviderServer) {
	s.RegisterService(&_CoinProvider_serviceDesc, srv)
}

func _CoinProvider_Offer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinProviderServer).Offer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pulumirpc.CoinProvider/Offer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinProviderServer).Offer(ctx, req.(*OfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinProvider_Pump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinProviderServer).Pump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pulumirpc.CoinProvider/Pump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinProviderServer).Pump(ctx, req.(*PumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoinProvider_Dump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinProviderServer).Dump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pulumirpc.CoinProvider/Dump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinProviderServer).Dump(ctx, req.(*DumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoinProvider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pulumirpc.CoinProvider",
	HandlerType: (*CoinProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Offer",
			Handler:    _CoinProvider_Offer_Handler,
		},
		{
			MethodName: "Pump",
			Handler:    _CoinProvider_Pump_Handler,
		},
		{
			MethodName: "Dump",
			Handler:    _CoinProvider_Dump_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coin.proto",
}

func init() { proto.RegisterFile("coin.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x53, 0x51, 0xab, 0xd3, 0x30,
	0x14, 0x36, 0xbb, 0x77, 0xd7, 0xee, 0xb4, 0x43, 0x08, 0x72, 0x57, 0x87, 0x60, 0x8d, 0x20, 0x05,
	0x61, 0x0f, 0xfa, 0x24, 0xf8, 0x22, 0xf6, 0xdd, 0x51, 0x06, 0xe2, 0x53, 0xc9, 0xb2, 0xcc, 0x06,
	0xdb, 0x26, 0x26, 0xe9, 0xdc, 0xfe, 0x80, 0x3f, 0xcc, 0x5f, 0x26, 0x4d, 0xda, 0xd9, 0x39, 0xef,
	0xe3, 0xf7, 0x9d, 0x9c, 0xef, 0x7c, 0x5f, 0xcf, 0x29, 0x00, 0x93, 0xa2, 0x59, 0x29, 0x2d, 0xad,
	0xc4, 0x33, 0xd5, 0x56, 0x6d, 0x2d, 0xb4, 0x62, 0xe4, 0x17, 0x82, 0xe8, 0xf3, 0x7e, 0xcf, 0x75,
	0xce, 0x7f, 0xb4, 0xdc, 0x58, 0xfc, 0x14, 0xa6, 0xdd, 0x4b, 0x13, 0xa3, 0x04, 0xa5, 0x37, 0xb9,
	0x07, 0x1d, 0xab, 0xb4, 0x60, 0x3c, 0x9e, 0x24, 0x28, 0x9d, 0xe4, 0x1e, 0xe0, 0x7b, 0xb8, 0xd3,
	0x9c, 0x1a, 0xd9, 0xc4, 0x37, 0x09, 0x4a, 0x67, 0x79, 0x8f, 0x70, 0x0c, 0x8f, 0x59, 0x45, 0x8d,
	0x11, 0x2c, 0xbe, 0x4d, 0x50, 0x1a, 0xe4, 0x03, 0xec, 0x2a, 0xdc, 0x96, 0x82, 0xd1, 0x2a, 0x9e,
	0x3a, 0xa5, 0x01, 0x92, 0x8f, 0x30, 0xef, 0x7d, 0x18, 0x25, 0x1b, 0xe3, 0xc4, 0xb7, 0xed, 0x89,
	0xeb, 0xc1, 0x49, 0x8f, 0x3a, 0x89, 0x52, 0xee, 0xaa, 0xae, 0x30, 0x71, 0x85, 0x01, 0x12, 0x03,
	0xe1, 0xba, 0xad, 0xd5, 0x90, 0xe4, 0x25, 0x44, 0x96, 0xea, 0x6f, 0xdc, 0x16, 0xde, 0x3a, 0x72,
	0x03, 0x43, 0xcf, 0xad, 0x5d, 0x80, 0x67, 0x10, 0xd4, 0xf4, 0x58, 0x58, 0x51, 0xf3, 0x41, 0xac,
	0xa6, 0xc7, 0x8d, 0xa8, 0x39, 0x7e, 0x0d, 0x4f, 0x98, 0x3c, 0x70, 0x5d, 0x9c, 0x64, 0x61, 0x35,
	0x65, 0xdf, 0x8d, 0x0b, 0x19, 0xe4, 0x73, 0x47, 0x7f, 0x95, 0x1b, 0x47, 0x92, 0x2f, 0x10, 0xf9,
	0xa1, 0xbd, 0xed, 0x57, 0x30, 0x67, 0xad, 0xd6, 0xbc, 0xb9, 0x1c, 0x1b, 0xf5, 0xa4, 0x9f, 0x4b,
	0x20, 0x52, 0x54, 0x5b, 0xc1, 0x84, 0xa2, 0x8d, 0x1d, 0x82, 0x5c, 0x70, 0xe4, 0x0d, 0x84, 0xd9,
	0x28, 0xcd, 0x73, 0x98, 0xd9, 0x52, 0x73, 0x53, 0xca, 0x6a, 0xd7, 0x6b, 0xfe, 0x25, 0x08, 0x85,
	0x28, 0x1b, 0xbb, 0xf8, 0xff, 0x16, 0x5f, 0x40, 0xb8, 0x17, 0x0d, 0xad, 0x8a, 0xf1, 0x2e, 0xc1,
	0x51, 0xde, 0xd7, 0x12, 0x02, 0x5a, 0x8b, 0x9f, 0x25, 0xad, 0x78, 0x9f, 0xf6, 0x8c, 0xdf, 0xfe,
	0x46, 0x10, 0x7d, 0x92, 0xa2, 0x59, 0x6b, 0x79, 0x10, 0x3b, 0xae, 0xf1, 0x07, 0x98, 0xba, 0x8d,
	0xe1, 0xc5, 0xea, 0x7c, 0x4f, 0xab, 0xf1, 0x2d, 0x2d, 0xe3, 0xeb, 0x82, 0xf7, 0x47, 0x1e, 0xe1,
	0xf7, 0x70, 0xdb, 0x7d, 0x37, 0x7c, 0x3f, 0x7a, 0x33, 0xda, 0xde, 0x72, 0x71, 0xc5, 0x8f, 0x5b,
	0xb3, 0x7f, 0x5b, 0xb3, 0x07, 0x5a, 0xb3, 0x8b, 0xd6, 0xed, 0x9d, 0xfb, 0x01, 0xde, 0xfd, 0x09,
	0x00, 0x00, 0xff, 0xff, 0x59, 0xa9, 0x8e, 0x63, 0x0e, 0x03, 0x00, 0x00,
}
