// Copyright 2016-2023, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.5
// source: pulumi/converter.proto

package pulumirpc

import (
	codegen "github.com/pulumi/pulumi/sdk/v3/proto/go/codegen"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_	= protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_	= protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConvertStateRequest struct {
	state	protoimpl.MessageState	`protogen:"open.v1"`
	// the gRPC target of the mapper service.
	MapperTarget	string	`protobuf:"bytes,1,opt,name=mapper_target,json=mapperTarget,proto3" json:"mapper_target,omitempty"`
	// the args passed to `pulumi import` for this conversion. Normally used to specifiy a state file to
	// import from.
	Args		[]string	`protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	unknownFields	protoimpl.UnknownFields
	sizeCache	protoimpl.SizeCache
}

func (x *ConvertStateRequest) Reset() {
	*x = ConvertStateRequest{}
	mi := &file_pulumi_converter_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConvertStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertStateRequest) ProtoMessage()	{}

func (x *ConvertStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_converter_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertStateRequest.ProtoReflect.Descriptor instead.
func (*ConvertStateRequest) Descriptor() ([]byte, []int) {
	return file_pulumi_converter_proto_rawDescGZIP(), []int{0}
}

func (x *ConvertStateRequest) GetMapperTarget() string {
	if x != nil {
		return x.MapperTarget
	}
	return ""
}

func (x *ConvertStateRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

// A ResourceImport specifies a resource to import.
type ResourceImport struct {
	state	protoimpl.MessageState	`protogen:"open.v1"`
	// the type token for the resource.
	Type	string	`protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// the name of the resource.
	Name	string	`protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// the ID of the resource.
	Id	string	`protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// the provider version to use for the resource, if any.
	Version	string	`protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// the provider PluginDownloadURL to use for the resource, if any.
	PluginDownloadURL	string	`protobuf:"bytes,5,opt,name=pluginDownloadURL,proto3" json:"pluginDownloadURL,omitempty"`
	// the logical name of the resource.
	LogicalName	string	`protobuf:"bytes,6,opt,name=logical_name,json=logicalName,proto3" json:"logical_name,omitempty"`
	// true if this is a component resource.
	IsComponent	bool	`protobuf:"varint,7,opt,name=is_component,json=isComponent,proto3" json:"is_component,omitempty"`
	// true if this is a remote resource. Ignored if is_component is false.
	IsRemote	bool	`protobuf:"varint,8,opt,name=is_remote,json=isRemote,proto3" json:"is_remote,omitempty"`
	unknownFields	protoimpl.UnknownFields
	sizeCache	protoimpl.SizeCache
}

func (x *ResourceImport) Reset() {
	*x = ResourceImport{}
	mi := &file_pulumi_converter_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceImport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceImport) ProtoMessage()	{}

func (x *ResourceImport) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_converter_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceImport.ProtoReflect.Descriptor instead.
func (*ResourceImport) Descriptor() ([]byte, []int) {
	return file_pulumi_converter_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceImport) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ResourceImport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResourceImport) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResourceImport) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ResourceImport) GetPluginDownloadURL() string {
	if x != nil {
		return x.PluginDownloadURL
	}
	return ""
}

func (x *ResourceImport) GetLogicalName() string {
	if x != nil {
		return x.LogicalName
	}
	return ""
}

func (x *ResourceImport) GetIsComponent() bool {
	if x != nil {
		return x.IsComponent
	}
	return false
}

func (x *ResourceImport) GetIsRemote() bool {
	if x != nil {
		return x.IsRemote
	}
	return false
}

type ConvertStateResponse struct {
	state	protoimpl.MessageState	`protogen:"open.v1"`
	// a list of resources to import.
	Resources	[]*ResourceImport	`protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty"`
	// any diagnostics from state conversion.
	Diagnostics	[]*codegen.Diagnostic	`protobuf:"bytes,2,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	unknownFields	protoimpl.UnknownFields
	sizeCache	protoimpl.SizeCache
}

func (x *ConvertStateResponse) Reset() {
	*x = ConvertStateResponse{}
	mi := &file_pulumi_converter_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConvertStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertStateResponse) ProtoMessage()	{}

func (x *ConvertStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_converter_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertStateResponse.ProtoReflect.Descriptor instead.
func (*ConvertStateResponse) Descriptor() ([]byte, []int) {
	return file_pulumi_converter_proto_rawDescGZIP(), []int{2}
}

func (x *ConvertStateResponse) GetResources() []*ResourceImport {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ConvertStateResponse) GetDiagnostics() []*codegen.Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

type ConvertProgramRequest struct {
	state	protoimpl.MessageState	`protogen:"open.v1"`
	// the source directory containing the program to convert from.
	SourceDirectory	string	`protobuf:"bytes,1,opt,name=source_directory,json=sourceDirectory,proto3" json:"source_directory,omitempty"`
	// a target directory to write the resulting PCL code and project file to.
	TargetDirectory	string	`protobuf:"bytes,2,opt,name=target_directory,json=targetDirectory,proto3" json:"target_directory,omitempty"`
	// the gRPC target of the mapper service.
	MapperTarget	string	`protobuf:"bytes,3,opt,name=mapper_target,json=mapperTarget,proto3" json:"mapper_target,omitempty"`
	// The target of a codegen.LoaderServer to use for loading schemas.
	LoaderTarget	string	`protobuf:"bytes,4,opt,name=loader_target,json=loaderTarget,proto3" json:"loader_target,omitempty"`
	// the args passed to `pulumi convert` for this conversion. Normally used to specifiy a root file, or conversion options.
	Args	[]string	`protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`
	// the directory where the final generated project for the eventual destination language will be written.
	// use to determine relative paths of any asset that will be copied over.
	// Do not write files to this directory as these files might be overwritten in
	// the project generation process.
	GeneratedProjectDirectory	string	`protobuf:"bytes,6,opt,name=generated_project_directory,json=generatedProjectDirectory,proto3" json:"generated_project_directory,omitempty"`
	unknownFields			protoimpl.UnknownFields
	sizeCache			protoimpl.SizeCache
}

func (x *ConvertProgramRequest) Reset() {
	*x = ConvertProgramRequest{}
	mi := &file_pulumi_converter_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConvertProgramRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertProgramRequest) ProtoMessage()	{}

func (x *ConvertProgramRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_converter_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertProgramRequest.ProtoReflect.Descriptor instead.
func (*ConvertProgramRequest) Descriptor() ([]byte, []int) {
	return file_pulumi_converter_proto_rawDescGZIP(), []int{3}
}

func (x *ConvertProgramRequest) GetSourceDirectory() string {
	if x != nil {
		return x.SourceDirectory
	}
	return ""
}

func (x *ConvertProgramRequest) GetTargetDirectory() string {
	if x != nil {
		return x.TargetDirectory
	}
	return ""
}

func (x *ConvertProgramRequest) GetMapperTarget() string {
	if x != nil {
		return x.MapperTarget
	}
	return ""
}

func (x *ConvertProgramRequest) GetLoaderTarget() string {
	if x != nil {
		return x.LoaderTarget
	}
	return ""
}

func (x *ConvertProgramRequest) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ConvertProgramRequest) GetGeneratedProjectDirectory() string {
	if x != nil {
		return x.GeneratedProjectDirectory
	}
	return ""
}

type ConvertProgramResponse struct {
	state	protoimpl.MessageState	`protogen:"open.v1"`
	// any diagnostics from code generation.
	Diagnostics	[]*codegen.Diagnostic	`protobuf:"bytes,1,rep,name=diagnostics,proto3" json:"diagnostics,omitempty"`
	unknownFields	protoimpl.UnknownFields
	sizeCache	protoimpl.SizeCache
}

func (x *ConvertProgramResponse) Reset() {
	*x = ConvertProgramResponse{}
	mi := &file_pulumi_converter_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConvertProgramResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvertProgramResponse) ProtoMessage()	{}

func (x *ConvertProgramResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_converter_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvertProgramResponse.ProtoReflect.Descriptor instead.
func (*ConvertProgramResponse) Descriptor() ([]byte, []int) {
	return file_pulumi_converter_proto_rawDescGZIP(), []int{4}
}

func (x *ConvertProgramResponse) GetDiagnostics() []*codegen.Diagnostic {
	if x != nil {
		return x.Diagnostics
	}
	return nil
}

var File_pulumi_converter_proto protoreflect.FileDescriptor

const file_pulumi_converter_proto_rawDesc = "" +
	"\n" +
	"\x16pulumi/converter.proto\x12\tpulumirpc\x1a\x18pulumi/codegen/hcl.proto\"N\n" +
	"\x13ConvertStateRequest\x12#\n" +
	"\rmapper_target\x18\x01 \x01(\tR\fmapperTarget\x12\x12\n" +
	"\x04args\x18\x02 \x03(\tR\x04args\"\xf3\x01\n" +
	"\x0eResourceImport\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x0e\n" +
	"\x02id\x18\x03 \x01(\tR\x02id\x12\x18\n" +
	"\aversion\x18\x04 \x01(\tR\aversion\x12,\n" +
	"\x11pluginDownloadURL\x18\x05 \x01(\tR\x11pluginDownloadURL\x12!\n" +
	"\flogical_name\x18\x06 \x01(\tR\vlogicalName\x12!\n" +
	"\fis_component\x18\a \x01(\bR\visComponent\x12\x1b\n" +
	"\tis_remote\x18\b \x01(\bR\bisRemote\"\x90\x01\n" +
	"\x14ConvertStateResponse\x127\n" +
	"\tresources\x18\x01 \x03(\v2\x19.pulumirpc.ResourceImportR\tresources\x12?\n" +
	"\vdiagnostics\x18\x02 \x03(\v2\x1d.pulumirpc.codegen.DiagnosticR\vdiagnostics\"\x8b\x02\n" +
	"\x15ConvertProgramRequest\x12)\n" +
	"\x10source_directory\x18\x01 \x01(\tR\x0fsourceDirectory\x12)\n" +
	"\x10target_directory\x18\x02 \x01(\tR\x0ftargetDirectory\x12#\n" +
	"\rmapper_target\x18\x03 \x01(\tR\fmapperTarget\x12#\n" +
	"\rloader_target\x18\x04 \x01(\tR\floaderTarget\x12\x12\n" +
	"\x04args\x18\x05 \x03(\tR\x04args\x12>\n" +
	"\x1bgenerated_project_directory\x18\x06 \x01(\tR\x19generatedProjectDirectory\"Y\n" +
	"\x16ConvertProgramResponse\x12?\n" +
	"\vdiagnostics\x18\x01 \x03(\v2\x1d.pulumirpc.codegen.DiagnosticR\vdiagnostics2\xb7\x01\n" +
	"\tConverter\x12Q\n" +
	"\fConvertState\x12\x1e.pulumirpc.ConvertStateRequest\x1a\x1f.pulumirpc.ConvertStateResponse\"\x00\x12W\n" +
	"\x0eConvertProgram\x12 .pulumirpc.ConvertProgramRequest\x1a!.pulumirpc.ConvertProgramResponse\"\x00B4Z2github.com/pulumi/pulumi/sdk/v3/proto/go;pulumirpcb\x06proto3"

var (
	file_pulumi_converter_proto_rawDescOnce	sync.Once
	file_pulumi_converter_proto_rawDescData	[]byte
)

func file_pulumi_converter_proto_rawDescGZIP() []byte {
	file_pulumi_converter_proto_rawDescOnce.Do(func() {
		file_pulumi_converter_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pulumi_converter_proto_rawDesc), len(file_pulumi_converter_proto_rawDesc)))
	})
	return file_pulumi_converter_proto_rawDescData
}

var file_pulumi_converter_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_pulumi_converter_proto_goTypes = []any{
	(*ConvertStateRequest)(nil),	// 0: pulumirpc.ConvertStateRequest
	(*ResourceImport)(nil),		// 1: pulumirpc.ResourceImport
	(*ConvertStateResponse)(nil),	// 2: pulumirpc.ConvertStateResponse
	(*ConvertProgramRequest)(nil),	// 3: pulumirpc.ConvertProgramRequest
	(*ConvertProgramResponse)(nil),	// 4: pulumirpc.ConvertProgramResponse
	(*codegen.Diagnostic)(nil),	// 5: pulumirpc.codegen.Diagnostic
}
var file_pulumi_converter_proto_depIdxs = []int32{
	1,	// 0: pulumirpc.ConvertStateResponse.resources:type_name -> pulumirpc.ResourceImport
	5,	// 1: pulumirpc.ConvertStateResponse.diagnostics:type_name -> pulumirpc.codegen.Diagnostic
	5,	// 2: pulumirpc.ConvertProgramResponse.diagnostics:type_name -> pulumirpc.codegen.Diagnostic
	0,	// 3: pulumirpc.Converter.ConvertState:input_type -> pulumirpc.ConvertStateRequest
	3,	// 4: pulumirpc.Converter.ConvertProgram:input_type -> pulumirpc.ConvertProgramRequest
	2,	// 5: pulumirpc.Converter.ConvertState:output_type -> pulumirpc.ConvertStateResponse
	4,	// 6: pulumirpc.Converter.ConvertProgram:output_type -> pulumirpc.ConvertProgramResponse
	5,	// [5:7] is the sub-list for method output_type
	3,	// [3:5] is the sub-list for method input_type
	3,	// [3:3] is the sub-list for extension type_name
	3,	// [3:3] is the sub-list for extension extendee
	0,	// [0:3] is the sub-list for field type_name
}

func init()	{ file_pulumi_converter_proto_init() }
func file_pulumi_converter_proto_init() {
	if File_pulumi_converter_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath:	reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor:	unsafe.Slice(unsafe.StringData(file_pulumi_converter_proto_rawDesc), len(file_pulumi_converter_proto_rawDesc)),
			NumEnums:	0,
			NumMessages:	5,
			NumExtensions:	0,
			NumServices:	1,
		},
		GoTypes:		file_pulumi_converter_proto_goTypes,
		DependencyIndexes:	file_pulumi_converter_proto_depIdxs,
		MessageInfos:		file_pulumi_converter_proto_msgTypes,
	}.Build()
	File_pulumi_converter_proto = out.File
	file_pulumi_converter_proto_goTypes = nil
	file_pulumi_converter_proto_depIdxs = nil
}
