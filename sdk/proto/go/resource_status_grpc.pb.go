// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: pulumi/resource_status.proto

package pulumirpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ResourceStatusClient is the client API for ResourceStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResourceStatusClient interface {
	// `PublishViewSteps` is used to publish a series of steps for a view resource.
	// Views can be materialized via create and update steps, and more complex
	// changes, such as replacements, can be modeled as a series of steps.
	// The engine does not actually apply these steps, but rather flows them through
	// the engine such that the view resources are written to state and the view
	// resources are displayed in the UI.
	PublishViewSteps(ctx context.Context, in *PublishViewStepsRequest, opts ...grpc.CallOption) (*PublishViewStepsResponse, error)
}

type resourceStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewResourceStatusClient(cc grpc.ClientConnInterface) ResourceStatusClient {
	return &resourceStatusClient{cc}
}

func (c *resourceStatusClient) PublishViewSteps(ctx context.Context, in *PublishViewStepsRequest, opts ...grpc.CallOption) (*PublishViewStepsResponse, error) {
	out := new(PublishViewStepsResponse)
	err := c.cc.Invoke(ctx, "/pulumirpc.ResourceStatus/PublishViewSteps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResourceStatusServer is the server API for ResourceStatus service.
// All implementations must embed UnimplementedResourceStatusServer
// for forward compatibility
type ResourceStatusServer interface {
	// `PublishViewSteps` is used to publish a series of steps for a view resource.
	// Views can be materialized via create and update steps, and more complex
	// changes, such as replacements, can be modeled as a series of steps.
	// The engine does not actually apply these steps, but rather flows them through
	// the engine such that the view resources are written to state and the view
	// resources are displayed in the UI.
	PublishViewSteps(context.Context, *PublishViewStepsRequest) (*PublishViewStepsResponse, error)
	mustEmbedUnimplementedResourceStatusServer()
}

// UnimplementedResourceStatusServer must be embedded to have forward compatible implementations.
type UnimplementedResourceStatusServer struct {
}

func (UnimplementedResourceStatusServer) PublishViewSteps(context.Context, *PublishViewStepsRequest) (*PublishViewStepsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishViewSteps not implemented")
}
func (UnimplementedResourceStatusServer) mustEmbedUnimplementedResourceStatusServer() {}

// UnsafeResourceStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResourceStatusServer will
// result in compilation errors.
type UnsafeResourceStatusServer interface {
	mustEmbedUnimplementedResourceStatusServer()
}

func RegisterResourceStatusServer(s grpc.ServiceRegistrar, srv ResourceStatusServer) {
	s.RegisterService(&ResourceStatus_ServiceDesc, srv)
}

func _ResourceStatus_PublishViewSteps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishViewStepsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceStatusServer).PublishViewSteps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pulumirpc.ResourceStatus/PublishViewSteps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceStatusServer).PublishViewSteps(ctx, req.(*PublishViewStepsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResourceStatus_ServiceDesc is the grpc.ServiceDesc for ResourceStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResourceStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pulumirpc.ResourceStatus",
	HandlerType: (*ResourceStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishViewSteps",
			Handler:    _ResourceStatus_PublishViewSteps_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pulumi/resource_status.proto",
}
