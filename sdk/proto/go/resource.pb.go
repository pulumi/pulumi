// Code generated by protoc-gen-go.
// source: resource.proto
// DO NOT EDIT!

package pulumirpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "github.com/golang/protobuf/ptypes/struct"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// RegisterResourceRequest contains information about a resource object that was newly allocated.
type RegisterResourceRequest struct {
	Type   string                   `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Name   string                   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Parent string                   `protobuf:"bytes,3,opt,name=parent" json:"parent,omitempty"`
	Custom bool                     `protobuf:"varint,4,opt,name=custom" json:"custom,omitempty"`
	Object *google_protobuf1.Struct `protobuf:"bytes,5,opt,name=object" json:"object,omitempty"`
}

func (m *RegisterResourceRequest) Reset()                    { *m = RegisterResourceRequest{} }
func (m *RegisterResourceRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterResourceRequest) ProtoMessage()               {}
func (*RegisterResourceRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *RegisterResourceRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *RegisterResourceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RegisterResourceRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *RegisterResourceRequest) GetCustom() bool {
	if m != nil {
		return m.Custom
	}
	return false
}

func (m *RegisterResourceRequest) GetObject() *google_protobuf1.Struct {
	if m != nil {
		return m.Object
	}
	return nil
}

// RegisterResourceResponse is returned by the engine after a resource has finished being initialized.  It includes the
// auto-assigned URN, the provider-assigned ID, and any other properties initialized by the engine.
type RegisterResourceResponse struct {
	Urn     string                   `protobuf:"bytes,1,opt,name=urn" json:"urn,omitempty"`
	Id      string                   `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Object  *google_protobuf1.Struct `protobuf:"bytes,3,opt,name=object" json:"object,omitempty"`
	Stable  bool                     `protobuf:"varint,4,opt,name=stable" json:"stable,omitempty"`
	Stables []string                 `protobuf:"bytes,5,rep,name=stables" json:"stables,omitempty"`
}

func (m *RegisterResourceResponse) Reset()                    { *m = RegisterResourceResponse{} }
func (m *RegisterResourceResponse) String() string            { return proto.CompactTextString(m) }
func (*RegisterResourceResponse) ProtoMessage()               {}
func (*RegisterResourceResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *RegisterResourceResponse) GetUrn() string {
	if m != nil {
		return m.Urn
	}
	return ""
}

func (m *RegisterResourceResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RegisterResourceResponse) GetObject() *google_protobuf1.Struct {
	if m != nil {
		return m.Object
	}
	return nil
}

func (m *RegisterResourceResponse) GetStable() bool {
	if m != nil {
		return m.Stable
	}
	return false
}

func (m *RegisterResourceResponse) GetStables() []string {
	if m != nil {
		return m.Stables
	}
	return nil
}

// RegisterResourceOutputsRequest adds extra resource outputs created by the program after registration has occurred.
type RegisterResourceOutputsRequest struct {
	Urn     string                   `protobuf:"bytes,1,opt,name=urn" json:"urn,omitempty"`
	Outputs *google_protobuf1.Struct `protobuf:"bytes,2,opt,name=outputs" json:"outputs,omitempty"`
}

func (m *RegisterResourceOutputsRequest) Reset()                    { *m = RegisterResourceOutputsRequest{} }
func (m *RegisterResourceOutputsRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterResourceOutputsRequest) ProtoMessage()               {}
func (*RegisterResourceOutputsRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *RegisterResourceOutputsRequest) GetUrn() string {
	if m != nil {
		return m.Urn
	}
	return ""
}

func (m *RegisterResourceOutputsRequest) GetOutputs() *google_protobuf1.Struct {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterResourceRequest)(nil), "pulumirpc.RegisterResourceRequest")
	proto.RegisterType((*RegisterResourceResponse)(nil), "pulumirpc.RegisterResourceResponse")
	proto.RegisterType((*RegisterResourceOutputsRequest)(nil), "pulumirpc.RegisterResourceOutputsRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ResourceMonitor service

type ResourceMonitorClient interface {
	Invoke(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*InvokeResponse, error)
	RegisterResource(ctx context.Context, in *RegisterResourceRequest, opts ...grpc.CallOption) (*RegisterResourceResponse, error)
	RegisterResourceOutputs(ctx context.Context, in *RegisterResourceOutputsRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type resourceMonitorClient struct {
	cc *grpc.ClientConn
}

func NewResourceMonitorClient(cc *grpc.ClientConn) ResourceMonitorClient {
	return &resourceMonitorClient{cc}
}

func (c *resourceMonitorClient) Invoke(ctx context.Context, in *InvokeRequest, opts ...grpc.CallOption) (*InvokeResponse, error) {
	out := new(InvokeResponse)
	err := grpc.Invoke(ctx, "/pulumirpc.ResourceMonitor/Invoke", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceMonitorClient) RegisterResource(ctx context.Context, in *RegisterResourceRequest, opts ...grpc.CallOption) (*RegisterResourceResponse, error) {
	out := new(RegisterResourceResponse)
	err := grpc.Invoke(ctx, "/pulumirpc.ResourceMonitor/RegisterResource", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resourceMonitorClient) RegisterResourceOutputs(ctx context.Context, in *RegisterResourceOutputsRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/pulumirpc.ResourceMonitor/RegisterResourceOutputs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ResourceMonitor service

type ResourceMonitorServer interface {
	Invoke(context.Context, *InvokeRequest) (*InvokeResponse, error)
	RegisterResource(context.Context, *RegisterResourceRequest) (*RegisterResourceResponse, error)
	RegisterResourceOutputs(context.Context, *RegisterResourceOutputsRequest) (*google_protobuf.Empty, error)
}

func RegisterResourceMonitorServer(s *grpc.Server, srv ResourceMonitorServer) {
	s.RegisterService(&_ResourceMonitor_serviceDesc, srv)
}

func _ResourceMonitor_Invoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InvokeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceMonitorServer).Invoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pulumirpc.ResourceMonitor/Invoke",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceMonitorServer).Invoke(ctx, req.(*InvokeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceMonitor_RegisterResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceMonitorServer).RegisterResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pulumirpc.ResourceMonitor/RegisterResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceMonitorServer).RegisterResource(ctx, req.(*RegisterResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResourceMonitor_RegisterResourceOutputs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterResourceOutputsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResourceMonitorServer).RegisterResourceOutputs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pulumirpc.ResourceMonitor/RegisterResourceOutputs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResourceMonitorServer).RegisterResourceOutputs(ctx, req.(*RegisterResourceOutputsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResourceMonitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pulumirpc.ResourceMonitor",
	HandlerType: (*ResourceMonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Invoke",
			Handler:    _ResourceMonitor_Invoke_Handler,
		},
		{
			MethodName: "RegisterResource",
			Handler:    _ResourceMonitor_RegisterResource_Handler,
		},
		{
			MethodName: "RegisterResourceOutputs",
			Handler:    _ResourceMonitor_RegisterResourceOutputs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resource.proto",
}

func init() { proto.RegisterFile("resource.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0x9b, 0xa4, 0x4d, 0xbf, 0xce, 0x07, 0xb5, 0xcc, 0xa2, 0x1d, 0xa3, 0x48, 0x88, 0x9b,
	0xb8, 0x49, 0xb1, 0x3e, 0x80, 0x2b, 0x17, 0x2e, 0x44, 0x18, 0xd7, 0x0a, 0x4d, 0x7a, 0x2d, 0xd1,
	0x26, 0x33, 0xce, 0x9f, 0x42, 0x1f, 0xc3, 0x27, 0x10, 0x7c, 0x52, 0x49, 0x66, 0x52, 0x6a, 0xa3,
	0xc5, 0xdd, 0xbd, 0xe7, 0x9e, 0x99, 0xfb, 0xe3, 0x70, 0xd1, 0x50, 0x80, 0x64, 0x5a, 0x64, 0x90,
	0x70, 0xc1, 0x14, 0xc3, 0x03, 0xae, 0x57, 0xba, 0xc8, 0x05, 0xcf, 0x82, 0x93, 0x25, 0x63, 0xcb,
	0x15, 0x4c, 0xeb, 0x41, 0xaa, 0x9f, 0xa7, 0x50, 0x70, 0xb5, 0x31, 0xbe, 0xe0, 0x74, 0x7f, 0x28,
	0x95, 0xd0, 0x99, 0xb2, 0xd3, 0x21, 0x17, 0x6c, 0x9d, 0x2f, 0x40, 0x98, 0x3e, 0xfa, 0x74, 0xd0,
	0x84, 0xc2, 0x32, 0x97, 0x0a, 0x04, 0xb5, 0x0b, 0x29, 0xbc, 0x69, 0x90, 0x0a, 0x63, 0xd4, 0x55,
	0x1b, 0x0e, 0xc4, 0x09, 0x9d, 0x78, 0x40, 0xeb, 0xba, 0xd2, 0xca, 0x79, 0x01, 0xc4, 0x35, 0x5a,
	0x55, 0xe3, 0x31, 0xf2, 0xf9, 0x5c, 0x40, 0xa9, 0x88, 0x57, 0xab, 0xb6, 0xab, 0xf4, 0x4c, 0x4b,
	0xc5, 0x0a, 0xd2, 0x0d, 0x9d, 0xf8, 0x1f, 0xb5, 0x1d, 0x9e, 0x22, 0x9f, 0xa5, 0x2f, 0x90, 0x29,
	0xd2, 0x0b, 0x9d, 0xf8, 0xff, 0x6c, 0x92, 0x18, 0xe4, 0xa4, 0x41, 0x4e, 0x1e, 0x6a, 0x64, 0x6a,
	0x6d, 0xd1, 0x87, 0x83, 0x48, 0x1b, 0x52, 0x72, 0x56, 0x4a, 0xc0, 0x23, 0xe4, 0x69, 0x51, 0x5a,
	0xc8, 0xaa, 0xc4, 0x43, 0xe4, 0xe6, 0x0b, 0x4b, 0xe8, 0xe6, 0x8b, 0x9d, 0x7d, 0xde, 0x9f, 0xf6,
	0x55, 0xe0, 0x52, 0xcd, 0xd3, 0x15, 0x34, 0xe0, 0xa6, 0xc3, 0x04, 0xf5, 0x4d, 0x25, 0x49, 0x2f,
	0xf4, 0xe2, 0x01, 0x6d, 0xda, 0x08, 0xd0, 0xd9, 0x3e, 0xe0, 0xbd, 0x56, 0x5c, 0x2b, 0xd9, 0x84,
	0xd9, 0xc6, 0xbc, 0x44, 0x7d, 0x66, 0x3c, 0x35, 0xeb, 0x01, 0xae, 0xc6, 0x37, 0x7b, 0x77, 0xd1,
	0x51, 0xf3, 0xff, 0x1d, 0x2b, 0x73, 0xc5, 0x04, 0xbe, 0x46, 0xfe, 0x6d, 0xb9, 0x66, 0xaf, 0x80,
	0x49, 0xb2, 0x3d, 0x91, 0xc4, 0x48, 0x76, 0x79, 0x70, 0xfc, 0xc3, 0xc4, 0xc4, 0x17, 0x75, 0xf0,
	0x23, 0x1a, 0xed, 0xb3, 0xe3, 0x68, 0xe7, 0xc1, 0x2f, 0xe7, 0x11, 0x9c, 0x1f, 0xf4, 0x6c, 0xbf,
	0x7f, 0x6a, 0x1f, 0x98, 0x8d, 0x06, 0x5f, 0x1c, 0xf8, 0xe1, 0x7b, 0x7c, 0xc1, 0xb8, 0x95, 0xcd,
	0x4d, 0x75, 0xf3, 0x51, 0x27, 0xf5, 0x6b, 0xe5, 0xea, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x62,
	0xce, 0xe0, 0x30, 0x03, 0x00, 0x00,
}
