// Copyright 2025, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.5
// source: pulumi/events.proto

package pulumirpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Events_StreamEvents_FullMethodName = "/pulumirpc.Events/StreamEvents"
)

// EventsClient is the client API for Events service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Events is a service for receiving engine events over gRPC.
// This service allows the Pulumi CLI to send engine events to clients
// (such as the Automation API) over a gRPC stream instead of writing them to
// a file on the filesystem and reading them from there.
type EventsClient interface {
	// StreamEvents allows the client to stream multiple engine events to the server.
	// The client sends multiple EventRequest messages over the stream, and the server
	// processes them as they arrive. When the client is done sending events, it closes
	// the stream.
	StreamEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EventRequest, emptypb.Empty], error)
}

type eventsClient struct {
	cc grpc.ClientConnInterface
}

func NewEventsClient(cc grpc.ClientConnInterface) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EventRequest, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Events_ServiceDesc.Streams[0], Events_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventRequest, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Events_StreamEventsClient = grpc.ClientStreamingClient[EventRequest, emptypb.Empty]

// EventsServer is the server API for Events service.
// All implementations must embed UnimplementedEventsServer
// for forward compatibility.
//
// Events is a service for receiving engine events over gRPC.
// This service allows the Pulumi CLI to send engine events to clients
// (such as the Automation API) over a gRPC stream instead of writing them to
// a file on the filesystem and reading them from there.
type EventsServer interface {
	// StreamEvents allows the client to stream multiple engine events to the server.
	// The client sends multiple EventRequest messages over the stream, and the server
	// processes them as they arrive. When the client is done sending events, it closes
	// the stream.
	StreamEvents(grpc.ClientStreamingServer[EventRequest, emptypb.Empty]) error
	mustEmbedUnimplementedEventsServer()
}

// UnimplementedEventsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEventsServer struct{}

func (UnimplementedEventsServer) StreamEvents(grpc.ClientStreamingServer[EventRequest, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedEventsServer) mustEmbedUnimplementedEventsServer() {}
func (UnimplementedEventsServer) testEmbeddedByValue()                {}

// UnsafeEventsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventsServer will
// result in compilation errors.
type UnsafeEventsServer interface {
	mustEmbedUnimplementedEventsServer()
}

func RegisterEventsServer(s grpc.ServiceRegistrar, srv EventsServer) {
	// If the following call pancis, it indicates UnimplementedEventsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Events_ServiceDesc, srv)
}

func _Events_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventsServer).StreamEvents(&grpc.GenericServerStream[EventRequest, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Events_StreamEventsServer = grpc.ClientStreamingServer[EventRequest, emptypb.Empty]

// Events_ServiceDesc is the grpc.ServiceDesc for Events service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Events_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pulumirpc.Events",
	HandlerType: (*EventsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _Events_StreamEvents_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pulumi/events.proto",
}
