// Copyright 2016-2018, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.0
// source: pulumi/plugin.proto

package pulumirpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PluginInfo is meta-information about a plugin that is used by the system.
type PluginInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"` // the semver for this plugin.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginInfo) Reset() {
	*x = PluginInfo{}
	mi := &file_pulumi_plugin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginInfo) ProtoMessage() {}

func (x *PluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_plugin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginInfo.ProtoReflect.Descriptor instead.
func (*PluginInfo) Descriptor() ([]byte, []int) {
	return file_pulumi_plugin_proto_rawDescGZIP(), []int{0}
}

func (x *PluginInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// PluginDependency is information about a plugin that a program may depend upon.
type PluginDependency struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Name    string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // the name of the plugin.
	Kind    string                 `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`       // the kind of plugin (e.g., language, etc).
	Version string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"` // the semver for this plugin.
	Server  string                 `protobuf:"bytes,4,opt,name=server,proto3" json:"server,omitempty"`   // the URL of a server that can be used to download this plugin, if needed.
	// a map of the checksums for the plugin, will be empty from old language runtimes. The keys should match
	// the os and architecture names used in pulumi releases, e.g. "darwin-amd64", "windows-arm64".
	Checksums     map[string][]byte `protobuf:"bytes,5,rep,name=checksums,proto3" json:"checksums,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginDependency) Reset() {
	*x = PluginDependency{}
	mi := &file_pulumi_plugin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginDependency) ProtoMessage() {}

func (x *PluginDependency) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_plugin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginDependency.ProtoReflect.Descriptor instead.
func (*PluginDependency) Descriptor() ([]byte, []int) {
	return file_pulumi_plugin_proto_rawDescGZIP(), []int{1}
}

func (x *PluginDependency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginDependency) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PluginDependency) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PluginDependency) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *PluginDependency) GetChecksums() map[string][]byte {
	if x != nil {
		return x.Checksums
	}
	return nil
}

// PluginAttach is used to attach an already running plugin to the engine.
//
// Normally the engine starts the plugin process itself and passes the engine address as the first argumnent.
// But when debugging it can be useful to have an already running provider that the engine instead attaches
// to, this message is used so the provider can still be passed the engine address to communicate with.
type PluginAttach struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // the grpc address for the engine
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PluginAttach) Reset() {
	*x = PluginAttach{}
	mi := &file_pulumi_plugin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginAttach) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginAttach) ProtoMessage() {}

func (x *PluginAttach) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_plugin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginAttach.ProtoReflect.Descriptor instead.
func (*PluginAttach) Descriptor() ([]byte, []int) {
	return file_pulumi_plugin_proto_rawDescGZIP(), []int{2}
}

func (x *PluginAttach) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type PackageParameterization struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // the parameterized package name.
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"` // the parameterized package version.
	Value         []byte                 `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`     // the parameter value for the parameterized package.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PackageParameterization) Reset() {
	*x = PackageParameterization{}
	mi := &file_pulumi_plugin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PackageParameterization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageParameterization) ProtoMessage() {}

func (x *PackageParameterization) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_plugin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageParameterization.ProtoReflect.Descriptor instead.
func (*PackageParameterization) Descriptor() ([]byte, []int) {
	return file_pulumi_plugin_proto_rawDescGZIP(), []int{3}
}

func (x *PackageParameterization) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PackageParameterization) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PackageParameterization) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// PackageDependency is information about a package that a program may depend upon.
type PackageDependency struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Name    string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // the name of the plugin.
	Kind    string                 `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`       // the kind of plugin (e.g., language, etc).
	Version string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"` // the semver for this plugin.
	Server  string                 `protobuf:"bytes,4,opt,name=server,proto3" json:"server,omitempty"`   // the URL of a server that can be used to download this plugin, if needed.
	// a map of the checksums for the plugin, will be empty from old language runtimes. The keys should match
	// the os and architecture names used in pulumi releases, e.g. "darwin-amd64", "windows-arm64".
	Checksums map[string][]byte `protobuf:"bytes,5,rep,name=checksums,proto3" json:"checksums,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// The optional parameterization for this package.
	Parameterization *PackageParameterization `protobuf:"bytes,6,opt,name=parameterization,proto3" json:"parameterization,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PackageDependency) Reset() {
	*x = PackageDependency{}
	mi := &file_pulumi_plugin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PackageDependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageDependency) ProtoMessage() {}

func (x *PackageDependency) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_plugin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageDependency.ProtoReflect.Descriptor instead.
func (*PackageDependency) Descriptor() ([]byte, []int) {
	return file_pulumi_plugin_proto_rawDescGZIP(), []int{4}
}

func (x *PackageDependency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PackageDependency) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PackageDependency) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PackageDependency) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *PackageDependency) GetChecksums() map[string][]byte {
	if x != nil {
		return x.Checksums
	}
	return nil
}

func (x *PackageDependency) GetParameterization() *PackageParameterization {
	if x != nil {
		return x.Parameterization
	}
	return nil
}

var File_pulumi_plugin_proto protoreflect.FileDescriptor

const file_pulumi_plugin_proto_rawDesc = "" +
	"\n" +
	"\x13pulumi/plugin.proto\x12\tpulumirpc\"&\n" +
	"\n" +
	"PluginInfo\x12\x18\n" +
	"\aversion\x18\x01 \x01(\tR\aversion\"\xf4\x01\n" +
	"\x10PluginDependency\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04kind\x18\x02 \x01(\tR\x04kind\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x12\x16\n" +
	"\x06server\x18\x04 \x01(\tR\x06server\x12H\n" +
	"\tchecksums\x18\x05 \x03(\v2*.pulumirpc.PluginDependency.ChecksumsEntryR\tchecksums\x1a<\n" +
	"\x0eChecksumsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\"(\n" +
	"\fPluginAttach\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\"]\n" +
	"\x17PackageParameterization\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12\x14\n" +
	"\x05value\x18\x03 \x01(\fR\x05value\"\xc6\x02\n" +
	"\x11PackageDependency\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04kind\x18\x02 \x01(\tR\x04kind\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x12\x16\n" +
	"\x06server\x18\x04 \x01(\tR\x06server\x12I\n" +
	"\tchecksums\x18\x05 \x03(\v2+.pulumirpc.PackageDependency.ChecksumsEntryR\tchecksums\x12N\n" +
	"\x10parameterization\x18\x06 \x01(\v2\".pulumirpc.PackageParameterizationR\x10parameterization\x1a<\n" +
	"\x0eChecksumsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01B4Z2github.com/pulumi/pulumi/sdk/v3/proto/go;pulumirpcb\x06proto3"

var (
	file_pulumi_plugin_proto_rawDescOnce sync.Once
	file_pulumi_plugin_proto_rawDescData []byte
)

func file_pulumi_plugin_proto_rawDescGZIP() []byte {
	file_pulumi_plugin_proto_rawDescOnce.Do(func() {
		file_pulumi_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pulumi_plugin_proto_rawDesc), len(file_pulumi_plugin_proto_rawDesc)))
	})
	return file_pulumi_plugin_proto_rawDescData
}

var file_pulumi_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_pulumi_plugin_proto_goTypes = []any{
	(*PluginInfo)(nil),              // 0: pulumirpc.PluginInfo
	(*PluginDependency)(nil),        // 1: pulumirpc.PluginDependency
	(*PluginAttach)(nil),            // 2: pulumirpc.PluginAttach
	(*PackageParameterization)(nil), // 3: pulumirpc.PackageParameterization
	(*PackageDependency)(nil),       // 4: pulumirpc.PackageDependency
	nil,                             // 5: pulumirpc.PluginDependency.ChecksumsEntry
	nil,                             // 6: pulumirpc.PackageDependency.ChecksumsEntry
}
var file_pulumi_plugin_proto_depIdxs = []int32{
	5, // 0: pulumirpc.PluginDependency.checksums:type_name -> pulumirpc.PluginDependency.ChecksumsEntry
	6, // 1: pulumirpc.PackageDependency.checksums:type_name -> pulumirpc.PackageDependency.ChecksumsEntry
	3, // 2: pulumirpc.PackageDependency.parameterization:type_name -> pulumirpc.PackageParameterization
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_pulumi_plugin_proto_init() }
func file_pulumi_plugin_proto_init() {
	if File_pulumi_plugin_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pulumi_plugin_proto_rawDesc), len(file_pulumi_plugin_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pulumi_plugin_proto_goTypes,
		DependencyIndexes: file_pulumi_plugin_proto_depIdxs,
		MessageInfos:      file_pulumi_plugin_proto_msgTypes,
	}.Build()
	File_pulumi_plugin_proto = out.File
	file_pulumi_plugin_proto_goTypes = nil
	file_pulumi_plugin_proto_depIdxs = nil
}
