// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: pulumi/engine/engine.proto

package engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EngineClient is the client API for Engine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EngineClient interface {
	// GetLanguageTests returns a list of all the language tests.
	GetLanguageTests(ctx context.Context, in *GetLanguageTestsRequest, opts ...grpc.CallOption) (*GetLanguageTestsResponse, error)
	// RunLanguageTest runs a single test of the language plugin.
	RunLanguageTest(ctx context.Context, in *RunLanguageTestRequest, opts ...grpc.CallOption) (*RunLanguageTestResponse, error)
}

type engineClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineClient(cc grpc.ClientConnInterface) EngineClient {
	return &engineClient{cc}
}

func (c *engineClient) GetLanguageTests(ctx context.Context, in *GetLanguageTestsRequest, opts ...grpc.CallOption) (*GetLanguageTestsResponse, error) {
	out := new(GetLanguageTestsResponse)
	err := c.cc.Invoke(ctx, "/pulumirpc.engine.Engine/GetLanguageTests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) RunLanguageTest(ctx context.Context, in *RunLanguageTestRequest, opts ...grpc.CallOption) (*RunLanguageTestResponse, error) {
	out := new(RunLanguageTestResponse)
	err := c.cc.Invoke(ctx, "/pulumirpc.engine.Engine/RunLanguageTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineServer is the server API for Engine service.
// All implementations must embed UnimplementedEngineServer
// for forward compatibility
type EngineServer interface {
	// GetLanguageTests returns a list of all the language tests.
	GetLanguageTests(context.Context, *GetLanguageTestsRequest) (*GetLanguageTestsResponse, error)
	// RunLanguageTest runs a single test of the language plugin.
	RunLanguageTest(context.Context, *RunLanguageTestRequest) (*RunLanguageTestResponse, error)
	mustEmbedUnimplementedEngineServer()
}

// UnimplementedEngineServer must be embedded to have forward compatible implementations.
type UnimplementedEngineServer struct {
}

func (UnimplementedEngineServer) GetLanguageTests(context.Context, *GetLanguageTestsRequest) (*GetLanguageTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguageTests not implemented")
}
func (UnimplementedEngineServer) RunLanguageTest(context.Context, *RunLanguageTestRequest) (*RunLanguageTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunLanguageTest not implemented")
}
func (UnimplementedEngineServer) mustEmbedUnimplementedEngineServer() {}

// UnsafeEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngineServer will
// result in compilation errors.
type UnsafeEngineServer interface {
	mustEmbedUnimplementedEngineServer()
}

func RegisterEngineServer(s grpc.ServiceRegistrar, srv EngineServer) {
	s.RegisterService(&Engine_ServiceDesc, srv)
}

func _Engine_GetLanguageTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguageTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).GetLanguageTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pulumirpc.engine.Engine/GetLanguageTests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).GetLanguageTests(ctx, req.(*GetLanguageTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_RunLanguageTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunLanguageTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).RunLanguageTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pulumirpc.engine.Engine/RunLanguageTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).RunLanguageTest(ctx, req.(*RunLanguageTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Engine_ServiceDesc is the grpc.ServiceDesc for Engine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Engine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pulumirpc.engine.Engine",
	HandlerType: (*EngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLanguageTests",
			Handler:    _Engine_GetLanguageTests_Handler,
		},
		{
			MethodName: "RunLanguageTest",
			Handler:    _Engine_RunLanguageTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pulumi/engine/engine.proto",
}
