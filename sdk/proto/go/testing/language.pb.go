// Copyright 2016-2023, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.5
// source: pulumi/testing/language.proto

package testing

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_	= protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_	= protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetLanguageTestsRequest struct {
	state		protoimpl.MessageState	`protogen:"open.v1"`
	unknownFields	protoimpl.UnknownFields
	sizeCache	protoimpl.SizeCache
}

func (x *GetLanguageTestsRequest) Reset() {
	*x = GetLanguageTestsRequest{}
	mi := &file_pulumi_testing_language_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLanguageTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLanguageTestsRequest) ProtoMessage()	{}

func (x *GetLanguageTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_testing_language_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLanguageTestsRequest.ProtoReflect.Descriptor instead.
func (*GetLanguageTestsRequest) Descriptor() ([]byte, []int) {
	return file_pulumi_testing_language_proto_rawDescGZIP(), []int{0}
}

type GetLanguageTestsResponse struct {
	state		protoimpl.MessageState	`protogen:"open.v1"`
	Tests		[]string		`protobuf:"bytes,1,rep,name=tests,proto3" json:"tests,omitempty"`
	unknownFields	protoimpl.UnknownFields
	sizeCache	protoimpl.SizeCache
}

func (x *GetLanguageTestsResponse) Reset() {
	*x = GetLanguageTestsResponse{}
	mi := &file_pulumi_testing_language_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLanguageTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLanguageTestsResponse) ProtoMessage()	{}

func (x *GetLanguageTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_testing_language_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLanguageTestsResponse.ProtoReflect.Descriptor instead.
func (*GetLanguageTestsResponse) Descriptor() ([]byte, []int) {
	return file_pulumi_testing_language_proto_rawDescGZIP(), []int{1}
}

func (x *GetLanguageTestsResponse) GetTests() []string {
	if x != nil {
		return x.Tests
	}
	return nil
}

type PrepareLanguageTestsRequest struct {
	state			protoimpl.MessageState				`protogen:"open.v1"`
	LanguagePluginName	string						`protobuf:"bytes,1,opt,name=language_plugin_name,json=languagePluginName,proto3" json:"language_plugin_name,omitempty"`
	LanguagePluginTarget	string						`protobuf:"bytes,2,opt,name=language_plugin_target,json=languagePluginTarget,proto3" json:"language_plugin_target,omitempty"`
	SnapshotDirectory	string						`protobuf:"bytes,3,opt,name=snapshot_directory,json=snapshotDirectory,proto3" json:"snapshot_directory,omitempty"`
	TemporaryDirectory	string						`protobuf:"bytes,4,opt,name=temporary_directory,json=temporaryDirectory,proto3" json:"temporary_directory,omitempty"`
	CoreSdkDirectory	string						`protobuf:"bytes,5,opt,name=core_sdk_directory,json=coreSdkDirectory,proto3" json:"core_sdk_directory,omitempty"`
	CoreSdkVersion		string						`protobuf:"bytes,6,opt,name=core_sdk_version,json=coreSdkVersion,proto3" json:"core_sdk_version,omitempty"`
	SnapshotEdits		[]*PrepareLanguageTestsRequest_Replacement	`protobuf:"bytes,7,rep,name=snapshot_edits,json=snapshotEdits,proto3" json:"snapshot_edits,omitempty"`
	// a JSON string that will be inserted into every schema loaded (for both GeneratePackage and GenerateProject) in
	// the "Languages[language_plugin_name]" field. This can be used to test language specific options such as
	// inputTypes in python.
	LanguageInfo	string	`protobuf:"bytes,8,opt,name=language_info,json=languageInfo,proto3" json:"language_info,omitempty"`
	// A map of test names to program overrides. This may be used to specify tests for which program generation should
	// not be run (e.g. because it does not support the necessary features), but where the test can still execute and
	// pass. This is useful in cases where e.g. a language's code SDK is relatively feature complete (and thus it's
	// desirable to test that feature set) but where program code generation is not yet complete enough to support
	// generating programs which exercise that functionality.
	ProgramOverrides	map[string]*PrepareLanguageTestsRequest_ProgramOverride	`protobuf:"bytes,9,rep,name=program_overrides,json=programOverrides,proto3" json:"program_overrides,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// A folder pointing to policy packs to use for the tests. This is used to test the language plugin's policy pack
	// support. These must be manually written.
	PolicyPackDirectory	string	`protobuf:"bytes,10,opt,name=policy_pack_directory,json=policyPackDirectory,proto3" json:"policy_pack_directory,omitempty"`
	// If true, tests will be run in "local" mode, meaning all SDKs will be generated with the `--local` flag and not packed.
	Local		bool	`protobuf:"varint,11,opt,name=local,proto3" json:"local,omitempty"`
	unknownFields	protoimpl.UnknownFields
	sizeCache	protoimpl.SizeCache
}

func (x *PrepareLanguageTestsRequest) Reset() {
	*x = PrepareLanguageTestsRequest{}
	mi := &file_pulumi_testing_language_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareLanguageTestsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareLanguageTestsRequest) ProtoMessage()	{}

func (x *PrepareLanguageTestsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_testing_language_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareLanguageTestsRequest.ProtoReflect.Descriptor instead.
func (*PrepareLanguageTestsRequest) Descriptor() ([]byte, []int) {
	return file_pulumi_testing_language_proto_rawDescGZIP(), []int{2}
}

func (x *PrepareLanguageTestsRequest) GetLanguagePluginName() string {
	if x != nil {
		return x.LanguagePluginName
	}
	return ""
}

func (x *PrepareLanguageTestsRequest) GetLanguagePluginTarget() string {
	if x != nil {
		return x.LanguagePluginTarget
	}
	return ""
}

func (x *PrepareLanguageTestsRequest) GetSnapshotDirectory() string {
	if x != nil {
		return x.SnapshotDirectory
	}
	return ""
}

func (x *PrepareLanguageTestsRequest) GetTemporaryDirectory() string {
	if x != nil {
		return x.TemporaryDirectory
	}
	return ""
}

func (x *PrepareLanguageTestsRequest) GetCoreSdkDirectory() string {
	if x != nil {
		return x.CoreSdkDirectory
	}
	return ""
}

func (x *PrepareLanguageTestsRequest) GetCoreSdkVersion() string {
	if x != nil {
		return x.CoreSdkVersion
	}
	return ""
}

func (x *PrepareLanguageTestsRequest) GetSnapshotEdits() []*PrepareLanguageTestsRequest_Replacement {
	if x != nil {
		return x.SnapshotEdits
	}
	return nil
}

func (x *PrepareLanguageTestsRequest) GetLanguageInfo() string {
	if x != nil {
		return x.LanguageInfo
	}
	return ""
}

func (x *PrepareLanguageTestsRequest) GetProgramOverrides() map[string]*PrepareLanguageTestsRequest_ProgramOverride {
	if x != nil {
		return x.ProgramOverrides
	}
	return nil
}

func (x *PrepareLanguageTestsRequest) GetPolicyPackDirectory() string {
	if x != nil {
		return x.PolicyPackDirectory
	}
	return ""
}

func (x *PrepareLanguageTestsRequest) GetLocal() bool {
	if x != nil {
		return x.Local
	}
	return false
}

type PrepareLanguageTestsResponse struct {
	state		protoimpl.MessageState	`protogen:"open.v1"`
	Token		string			`protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields	protoimpl.UnknownFields
	sizeCache	protoimpl.SizeCache
}

func (x *PrepareLanguageTestsResponse) Reset() {
	*x = PrepareLanguageTestsResponse{}
	mi := &file_pulumi_testing_language_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareLanguageTestsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareLanguageTestsResponse) ProtoMessage()	{}

func (x *PrepareLanguageTestsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_testing_language_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareLanguageTestsResponse.ProtoReflect.Descriptor instead.
func (*PrepareLanguageTestsResponse) Descriptor() ([]byte, []int) {
	return file_pulumi_testing_language_proto_rawDescGZIP(), []int{3}
}

func (x *PrepareLanguageTestsResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type RunLanguageTestRequest struct {
	state		protoimpl.MessageState	`protogen:"open.v1"`
	Token		string			`protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Test		string			`protobuf:"bytes,2,opt,name=test,proto3" json:"test,omitempty"`
	unknownFields	protoimpl.UnknownFields
	sizeCache	protoimpl.SizeCache
}

func (x *RunLanguageTestRequest) Reset() {
	*x = RunLanguageTestRequest{}
	mi := &file_pulumi_testing_language_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunLanguageTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunLanguageTestRequest) ProtoMessage()	{}

func (x *RunLanguageTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_testing_language_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunLanguageTestRequest.ProtoReflect.Descriptor instead.
func (*RunLanguageTestRequest) Descriptor() ([]byte, []int) {
	return file_pulumi_testing_language_proto_rawDescGZIP(), []int{4}
}

func (x *RunLanguageTestRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RunLanguageTestRequest) GetTest() string {
	if x != nil {
		return x.Test
	}
	return ""
}

type RunLanguageTestResponse struct {
	state		protoimpl.MessageState	`protogen:"open.v1"`
	Success		bool			`protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Messages	[]string		`protobuf:"bytes,2,rep,name=messages,proto3" json:"messages,omitempty"`
	Stdout		string			`protobuf:"bytes,3,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr		string			`protobuf:"bytes,4,opt,name=stderr,proto3" json:"stderr,omitempty"`
	unknownFields	protoimpl.UnknownFields
	sizeCache	protoimpl.SizeCache
}

func (x *RunLanguageTestResponse) Reset() {
	*x = RunLanguageTestResponse{}
	mi := &file_pulumi_testing_language_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunLanguageTestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunLanguageTestResponse) ProtoMessage()	{}

func (x *RunLanguageTestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_testing_language_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunLanguageTestResponse.ProtoReflect.Descriptor instead.
func (*RunLanguageTestResponse) Descriptor() ([]byte, []int) {
	return file_pulumi_testing_language_proto_rawDescGZIP(), []int{5}
}

func (x *RunLanguageTestResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RunLanguageTestResponse) GetMessages() []string {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *RunLanguageTestResponse) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *RunLanguageTestResponse) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

type PrepareLanguageTestsRequest_Replacement struct {
	state		protoimpl.MessageState	`protogen:"open.v1"`
	Path		string			`protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Pattern		string			`protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Replacement	string			`protobuf:"bytes,3,opt,name=replacement,proto3" json:"replacement,omitempty"`
	unknownFields	protoimpl.UnknownFields
	sizeCache	protoimpl.SizeCache
}

func (x *PrepareLanguageTestsRequest_Replacement) Reset() {
	*x = PrepareLanguageTestsRequest_Replacement{}
	mi := &file_pulumi_testing_language_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareLanguageTestsRequest_Replacement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareLanguageTestsRequest_Replacement) ProtoMessage()	{}

func (x *PrepareLanguageTestsRequest_Replacement) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_testing_language_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareLanguageTestsRequest_Replacement.ProtoReflect.Descriptor instead.
func (*PrepareLanguageTestsRequest_Replacement) Descriptor() ([]byte, []int) {
	return file_pulumi_testing_language_proto_rawDescGZIP(), []int{2, 0}
}

func (x *PrepareLanguageTestsRequest_Replacement) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PrepareLanguageTestsRequest_Replacement) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *PrepareLanguageTestsRequest_Replacement) GetReplacement() string {
	if x != nil {
		return x.Replacement
	}
	return ""
}

// ProgramOverrides represent overrides whereby a test may specify a set of hardcoded or pre-generated programs to
// be used, in place of running GenerateProject on source PCL. This is useful for testing SDK functionality when the
// requisite program code generation is not yet complete enough to support generating programs which exercise that
// functionality.
type PrepareLanguageTestsRequest_ProgramOverride struct {
	state	protoimpl.MessageState	`protogen:"open.v1"`
	// A list of paths to directories containing programs to use for the test. The length of this list should
	// correspond to the number of `Runs` in the test, with each entry being used for the corresponding run (e.g.
	// entry 0 for run 0, entry 1 for run 1, etc.).
	Paths		[]string	`protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	unknownFields	protoimpl.UnknownFields
	sizeCache	protoimpl.SizeCache
}

func (x *PrepareLanguageTestsRequest_ProgramOverride) Reset() {
	*x = PrepareLanguageTestsRequest_ProgramOverride{}
	mi := &file_pulumi_testing_language_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareLanguageTestsRequest_ProgramOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareLanguageTestsRequest_ProgramOverride) ProtoMessage()	{}

func (x *PrepareLanguageTestsRequest_ProgramOverride) ProtoReflect() protoreflect.Message {
	mi := &file_pulumi_testing_language_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareLanguageTestsRequest_ProgramOverride.ProtoReflect.Descriptor instead.
func (*PrepareLanguageTestsRequest_ProgramOverride) Descriptor() ([]byte, []int) {
	return file_pulumi_testing_language_proto_rawDescGZIP(), []int{2, 1}
}

func (x *PrepareLanguageTestsRequest_ProgramOverride) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

var File_pulumi_testing_language_proto protoreflect.FileDescriptor

const file_pulumi_testing_language_proto_rawDesc = "" +
	"\n" +
	"\x1dpulumi/testing/language.proto\x12\x11pulumirpc.testing\"\x19\n" +
	"\x17GetLanguageTestsRequest\"0\n" +
	"\x18GetLanguageTestsResponse\x12\x14\n" +
	"\x05tests\x18\x01 \x03(\tR\x05tests\"\x90\a\n" +
	"\x1bPrepareLanguageTestsRequest\x120\n" +
	"\x14language_plugin_name\x18\x01 \x01(\tR\x12languagePluginName\x124\n" +
	"\x16language_plugin_target\x18\x02 \x01(\tR\x14languagePluginTarget\x12-\n" +
	"\x12snapshot_directory\x18\x03 \x01(\tR\x11snapshotDirectory\x12/\n" +
	"\x13temporary_directory\x18\x04 \x01(\tR\x12temporaryDirectory\x12,\n" +
	"\x12core_sdk_directory\x18\x05 \x01(\tR\x10coreSdkDirectory\x12(\n" +
	"\x10core_sdk_version\x18\x06 \x01(\tR\x0ecoreSdkVersion\x12a\n" +
	"\x0esnapshot_edits\x18\a \x03(\v2:.pulumirpc.testing.PrepareLanguageTestsRequest.ReplacementR\rsnapshotEdits\x12#\n" +
	"\rlanguage_info\x18\b \x01(\tR\flanguageInfo\x12q\n" +
	"\x11program_overrides\x18\t \x03(\v2D.pulumirpc.testing.PrepareLanguageTestsRequest.ProgramOverridesEntryR\x10programOverrides\x122\n" +
	"\x15policy_pack_directory\x18\n" +
	" \x01(\tR\x13policyPackDirectory\x12\x14\n" +
	"\x05local\x18\v \x01(\bR\x05local\x1a]\n" +
	"\vReplacement\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x18\n" +
	"\apattern\x18\x02 \x01(\tR\apattern\x12 \n" +
	"\vreplacement\x18\x03 \x01(\tR\vreplacement\x1a'\n" +
	"\x0fProgramOverride\x12\x14\n" +
	"\x05paths\x18\x01 \x03(\tR\x05paths\x1a\x83\x01\n" +
	"\x15ProgramOverridesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12T\n" +
	"\x05value\x18\x02 \x01(\v2>.pulumirpc.testing.PrepareLanguageTestsRequest.ProgramOverrideR\x05value:\x028\x01\"4\n" +
	"\x1cPrepareLanguageTestsResponse\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\"B\n" +
	"\x16RunLanguageTestRequest\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12\x12\n" +
	"\x04test\x18\x02 \x01(\tR\x04test\"\x7f\n" +
	"\x17RunLanguageTestResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x1a\n" +
	"\bmessages\x18\x02 \x03(\tR\bmessages\x12\x16\n" +
	"\x06stdout\x18\x03 \x01(\tR\x06stdout\x12\x16\n" +
	"\x06stderr\x18\x04 \x01(\tR\x06stderr2\xe4\x02\n" +
	"\fLanguageTest\x12m\n" +
	"\x10GetLanguageTests\x12*.pulumirpc.testing.GetLanguageTestsRequest\x1a+.pulumirpc.testing.GetLanguageTestsResponse\"\x00\x12y\n" +
	"\x14PrepareLanguageTests\x12..pulumirpc.testing.PrepareLanguageTestsRequest\x1a/.pulumirpc.testing.PrepareLanguageTestsResponse\"\x00\x12j\n" +
	"\x0fRunLanguageTest\x12).pulumirpc.testing.RunLanguageTestRequest\x1a*.pulumirpc.testing.RunLanguageTestResponse\"\x00B2Z0github.com/pulumi/pulumi/sdk/v3/proto/go/testingb\x06proto3"

var (
	file_pulumi_testing_language_proto_rawDescOnce	sync.Once
	file_pulumi_testing_language_proto_rawDescData	[]byte
)

func file_pulumi_testing_language_proto_rawDescGZIP() []byte {
	file_pulumi_testing_language_proto_rawDescOnce.Do(func() {
		file_pulumi_testing_language_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pulumi_testing_language_proto_rawDesc), len(file_pulumi_testing_language_proto_rawDesc)))
	})
	return file_pulumi_testing_language_proto_rawDescData
}

var file_pulumi_testing_language_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_pulumi_testing_language_proto_goTypes = []any{
	(*GetLanguageTestsRequest)(nil),			// 0: pulumirpc.testing.GetLanguageTestsRequest
	(*GetLanguageTestsResponse)(nil),			// 1: pulumirpc.testing.GetLanguageTestsResponse
	(*PrepareLanguageTestsRequest)(nil),			// 2: pulumirpc.testing.PrepareLanguageTestsRequest
	(*PrepareLanguageTestsResponse)(nil),			// 3: pulumirpc.testing.PrepareLanguageTestsResponse
	(*RunLanguageTestRequest)(nil),				// 4: pulumirpc.testing.RunLanguageTestRequest
	(*RunLanguageTestResponse)(nil),			// 5: pulumirpc.testing.RunLanguageTestResponse
	(*PrepareLanguageTestsRequest_Replacement)(nil),	// 6: pulumirpc.testing.PrepareLanguageTestsRequest.Replacement
	(*PrepareLanguageTestsRequest_ProgramOverride)(nil),	// 7: pulumirpc.testing.PrepareLanguageTestsRequest.ProgramOverride
	nil,	// 8: pulumirpc.testing.PrepareLanguageTestsRequest.ProgramOverridesEntry
}
var file_pulumi_testing_language_proto_depIdxs = []int32{
	6,	// 0: pulumirpc.testing.PrepareLanguageTestsRequest.snapshot_edits:type_name -> pulumirpc.testing.PrepareLanguageTestsRequest.Replacement
	8,	// 1: pulumirpc.testing.PrepareLanguageTestsRequest.program_overrides:type_name -> pulumirpc.testing.PrepareLanguageTestsRequest.ProgramOverridesEntry
	7,	// 2: pulumirpc.testing.PrepareLanguageTestsRequest.ProgramOverridesEntry.value:type_name -> pulumirpc.testing.PrepareLanguageTestsRequest.ProgramOverride
	0,	// 3: pulumirpc.testing.LanguageTest.GetLanguageTests:input_type -> pulumirpc.testing.GetLanguageTestsRequest
	2,	// 4: pulumirpc.testing.LanguageTest.PrepareLanguageTests:input_type -> pulumirpc.testing.PrepareLanguageTestsRequest
	4,	// 5: pulumirpc.testing.LanguageTest.RunLanguageTest:input_type -> pulumirpc.testing.RunLanguageTestRequest
	1,	// 6: pulumirpc.testing.LanguageTest.GetLanguageTests:output_type -> pulumirpc.testing.GetLanguageTestsResponse
	3,	// 7: pulumirpc.testing.LanguageTest.PrepareLanguageTests:output_type -> pulumirpc.testing.PrepareLanguageTestsResponse
	5,	// 8: pulumirpc.testing.LanguageTest.RunLanguageTest:output_type -> pulumirpc.testing.RunLanguageTestResponse
	6,	// [6:9] is the sub-list for method output_type
	3,	// [3:6] is the sub-list for method input_type
	3,	// [3:3] is the sub-list for extension type_name
	3,	// [3:3] is the sub-list for extension extendee
	0,	// [0:3] is the sub-list for field type_name
}

func init()	{ file_pulumi_testing_language_proto_init() }
func file_pulumi_testing_language_proto_init() {
	if File_pulumi_testing_language_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath:	reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor:	unsafe.Slice(unsafe.StringData(file_pulumi_testing_language_proto_rawDesc), len(file_pulumi_testing_language_proto_rawDesc)),
			NumEnums:	0,
			NumMessages:	9,
			NumExtensions:	0,
			NumServices:	1,
		},
		GoTypes:		file_pulumi_testing_language_proto_goTypes,
		DependencyIndexes:	file_pulumi_testing_language_proto_depIdxs,
		MessageInfos:		file_pulumi_testing_language_proto_msgTypes,
	}.Build()
	File_pulumi_testing_language_proto = out.File
	file_pulumi_testing_language_proto_goTypes = nil
	file_pulumi_testing_language_proto_depIdxs = nil
}
