// Copyright 2016-2023, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.5
// source: pulumi/testing/language.proto

package testing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LanguageTest_GetLanguageTests_FullMethodName     = "/pulumirpc.testing.LanguageTest/GetLanguageTests"
	LanguageTest_PrepareLanguageTests_FullMethodName = "/pulumirpc.testing.LanguageTest/PrepareLanguageTests"
	LanguageTest_RunLanguageTest_FullMethodName      = "/pulumirpc.testing.LanguageTest/RunLanguageTest"
)

// LanguageTestClient is the client API for LanguageTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LanguageTest is the interface to the pulumi language test framework. This is _highly_ experimental and
// currently subject to breaking changes without warning.
type LanguageTestClient interface {
	// GetLanguageTests returns a list of all the language tests.
	GetLanguageTests(ctx context.Context, in *GetLanguageTestsRequest, opts ...grpc.CallOption) (*GetLanguageTestsResponse, error)
	// PrepareLanguageTests prepares the engine to run language tests. It sets up a stable artifacts folder
	// (which should be .gitignore'd) and fills it with the core SDK artifact.
	PrepareLanguageTests(ctx context.Context, in *PrepareLanguageTestsRequest, opts ...grpc.CallOption) (*PrepareLanguageTestsResponse, error)
	// RunLanguageTest runs a single test of the language plugin.
	RunLanguageTest(ctx context.Context, in *RunLanguageTestRequest, opts ...grpc.CallOption) (*RunLanguageTestResponse, error)
}

type languageTestClient struct {
	cc grpc.ClientConnInterface
}

func NewLanguageTestClient(cc grpc.ClientConnInterface) LanguageTestClient {
	return &languageTestClient{cc}
}

func (c *languageTestClient) GetLanguageTests(ctx context.Context, in *GetLanguageTestsRequest, opts ...grpc.CallOption) (*GetLanguageTestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLanguageTestsResponse)
	err := c.cc.Invoke(ctx, LanguageTest_GetLanguageTests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageTestClient) PrepareLanguageTests(ctx context.Context, in *PrepareLanguageTestsRequest, opts ...grpc.CallOption) (*PrepareLanguageTestsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PrepareLanguageTestsResponse)
	err := c.cc.Invoke(ctx, LanguageTest_PrepareLanguageTests_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *languageTestClient) RunLanguageTest(ctx context.Context, in *RunLanguageTestRequest, opts ...grpc.CallOption) (*RunLanguageTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunLanguageTestResponse)
	err := c.cc.Invoke(ctx, LanguageTest_RunLanguageTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LanguageTestServer is the server API for LanguageTest service.
// All implementations must embed UnimplementedLanguageTestServer
// for forward compatibility.
//
// LanguageTest is the interface to the pulumi language test framework. This is _highly_ experimental and
// currently subject to breaking changes without warning.
type LanguageTestServer interface {
	// GetLanguageTests returns a list of all the language tests.
	GetLanguageTests(context.Context, *GetLanguageTestsRequest) (*GetLanguageTestsResponse, error)
	// PrepareLanguageTests prepares the engine to run language tests. It sets up a stable artifacts folder
	// (which should be .gitignore'd) and fills it with the core SDK artifact.
	PrepareLanguageTests(context.Context, *PrepareLanguageTestsRequest) (*PrepareLanguageTestsResponse, error)
	// RunLanguageTest runs a single test of the language plugin.
	RunLanguageTest(context.Context, *RunLanguageTestRequest) (*RunLanguageTestResponse, error)
	mustEmbedUnimplementedLanguageTestServer()
}

// UnimplementedLanguageTestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLanguageTestServer struct{}

func (UnimplementedLanguageTestServer) GetLanguageTests(context.Context, *GetLanguageTestsRequest) (*GetLanguageTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLanguageTests not implemented")
}
func (UnimplementedLanguageTestServer) PrepareLanguageTests(context.Context, *PrepareLanguageTestsRequest) (*PrepareLanguageTestsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareLanguageTests not implemented")
}
func (UnimplementedLanguageTestServer) RunLanguageTest(context.Context, *RunLanguageTestRequest) (*RunLanguageTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunLanguageTest not implemented")
}
func (UnimplementedLanguageTestServer) mustEmbedUnimplementedLanguageTestServer() {}
func (UnimplementedLanguageTestServer) testEmbeddedByValue()                      {}

// UnsafeLanguageTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LanguageTestServer will
// result in compilation errors.
type UnsafeLanguageTestServer interface {
	mustEmbedUnimplementedLanguageTestServer()
}

func RegisterLanguageTestServer(s grpc.ServiceRegistrar, srv LanguageTestServer) {
	// If the following call pancis, it indicates UnimplementedLanguageTestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LanguageTest_ServiceDesc, srv)
}

func _LanguageTest_GetLanguageTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLanguageTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageTestServer).GetLanguageTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageTest_GetLanguageTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageTestServer).GetLanguageTests(ctx, req.(*GetLanguageTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageTest_PrepareLanguageTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareLanguageTestsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageTestServer).PrepareLanguageTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageTest_PrepareLanguageTests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageTestServer).PrepareLanguageTests(ctx, req.(*PrepareLanguageTestsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LanguageTest_RunLanguageTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunLanguageTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LanguageTestServer).RunLanguageTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LanguageTest_RunLanguageTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LanguageTestServer).RunLanguageTest(ctx, req.(*RunLanguageTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LanguageTest_ServiceDesc is the grpc.ServiceDesc for LanguageTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LanguageTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pulumirpc.testing.LanguageTest",
	HandlerType: (*LanguageTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLanguageTests",
			Handler:    _LanguageTest_GetLanguageTests_Handler,
		},
		{
			MethodName: "PrepareLanguageTests",
			Handler:    _LanguageTest_PrepareLanguageTests_Handler,
		},
		{
			MethodName: "RunLanguageTest",
			Handler:    _LanguageTest_RunLanguageTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pulumi/testing/language.proto",
}
