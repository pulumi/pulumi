exports.handler = __f0;

Object.defineProperty(__f2, "method", { configurable: true, writable: true, value: __f3 });
var __f2_sym = Object.create(global.Symbol.prototype);
Object.defineProperty(__f2, __f2_sym, { configurable: true, writable: true, value: __f4 });
Object.defineProperty(__f1, "method", { configurable: true, writable: true, value: __f5 });
Object.defineProperty(__f1, __f2_sym, { configurable: true, writable: true, value: __f6 });
Object.setPrototypeOf(__f1, __f2);

function __f2(__0) {
  return (function() {
    with({ this: undefined, arguments: undefined }) {

return function /*constructor*/(n) {
        this.n = n;
        console.log("AConstruction");
    };

    }
  }).apply(undefined, undefined).apply(this, arguments);
}

function __f3(__0) {
  return (function() {
    with({ this: undefined, arguments: undefined }) {

return function /*method*/(x) { return x; };

    }
  }).apply(undefined, undefined).apply(this, arguments);
}

function __f4(__0) {
  return (function() {
    with({ this: undefined, arguments: undefined }) {

return function (x) { return x * x; };

    }
  }).apply(undefined, undefined).apply(this, arguments);
}

function __f1(__0) {
  return (function() {
    with({ __super: __f2, this: undefined, arguments: undefined }) {

return function /*constructor*/(n) {
    __super.call(this, n + 1);
    console.log("BConstructor");
};

    }
  }).apply(undefined, undefined).apply(this, arguments);
}

function __f5(__0) {
  return (function() {
    with({ __super: __f2, this: undefined, arguments: undefined }) {

return function /*method*/(n) { return 1 + __super.method.call(this, n + 1); };

    }
  }).apply(undefined, undefined).apply(this, arguments);
}

function __f6(__0) {
  return (function() {
    with({ sym: __f2_sym, __super: __f2, this: undefined, arguments: undefined }) {

return function /*__computed*/(x) { return x * __super[sym].call(this, x + 1); };

    }
  }).apply(undefined, undefined).apply(this, arguments);
}

function __f0() {
  return (function() {
    with({ B: __f1, this: undefined, arguments: undefined }) {

return () => B;

    }
  }).apply(undefined, undefined).apply(this, arguments);
}
