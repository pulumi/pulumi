exports.handler = __reproHandler;

function __f0(__0, __1, __2, __3) {
  return (function() {
    with({ this: undefined, arguments: undefined }) {

return function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

    }
  }).apply(undefined, undefined).apply(this, arguments);
}
const mockpackage_1 = require("mockpackage");

function __f1() {
  return (function() {
    with({ this: undefined, arguments: undefined }) {

return () => mockpackage_1.z.object({
    message: mockpackage_1.z.string(),
});

    }
  }).apply(undefined, undefined).apply(this, arguments);
}

function __reproHandler(__0) {
  return (function() {
    with({ __awaiter: __f0, getSchemaValidator: __f1, reproHandler: __reproHandler, this: undefined, arguments: undefined }) {

return function /*reproHandler*/(input) {
    return __awaiter(this, void 0, void 0, function* () {
        const payload = getSchemaValidator().parse(input);
        console.log(payload.message);
        return {};
    });
};

    }
  }).apply(undefined, undefined).apply(this, arguments);
}
