exports.handler = __f3;

function __f0(__0, __1, __2, __3) {
  return (function() {
    with({ this: undefined, arguments: undefined }) {

return function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try {
            step(generator.next(value));
        }
        catch (e) {
            reject(e);
        } }
        function rejected(value) { try {
            step(generator["throw"](value));
        }
        catch (e) {
            reject(e);
        } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve1) { resolve1(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

    }
  }).apply(undefined, undefined).apply(this, arguments);
}

function __f3() {
  return (function() {
    with({ awaiter1: __f0, awaiter2: __f0, f3: __f3, this: undefined, arguments: undefined }) {

return function /*f3*/() {
    const v1 = awaiter1, v2 = awaiter2;
};

    }
  }).apply(undefined, undefined).apply(this, arguments);
}
