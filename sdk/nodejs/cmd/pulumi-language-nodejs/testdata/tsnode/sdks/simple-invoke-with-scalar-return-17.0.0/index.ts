// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { MyInvokeScalarArgs, MyInvokeScalarOutputArgs } from "./myInvokeScalar";
export const myInvokeScalar: typeof import("./myInvokeScalar").myInvokeScalar = null as any;
export const myInvokeScalarOutput: typeof import("./myInvokeScalar").myInvokeScalarOutput = null as any;
utilities.lazyLoad(exports, ["myInvokeScalar","myInvokeScalarOutput"], () => require("./myInvokeScalar"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { StringResourceArgs } from "./stringResource";
export type StringResource = import("./stringResource").StringResource;
export const StringResource: typeof import("./stringResource").StringResource = null as any;
utilities.lazyLoad(exports, ["StringResource"], () => require("./stringResource"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "simple-invoke-with-scalar-return:index:StringResource":
                return new StringResource(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("simple-invoke-with-scalar-return", "index", _module)
pulumi.runtime.registerResourcePackage("simple-invoke-with-scalar-return", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:simple-invoke-with-scalar-return") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
