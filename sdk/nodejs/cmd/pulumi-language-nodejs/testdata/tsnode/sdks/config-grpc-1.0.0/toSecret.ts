// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function toSecret(args?: ToSecretArgs, opts?: pulumi.InvokeOptions): Promise<ToSecretResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("config-grpc:index:toSecret", {
        "bool1": args.bool1,
        "bool2": args.bool2,
        "bool3": args.bool3,
        "int1": args.int1,
        "int2": args.int2,
        "int3": args.int3,
        "listBool1": args.listBool1,
        "listBool2": args.listBool2,
        "listBool3": args.listBool3,
        "listInt1": args.listInt1,
        "listInt2": args.listInt2,
        "listInt3": args.listInt3,
        "listNum1": args.listNum1,
        "listNum2": args.listNum2,
        "listNum3": args.listNum3,
        "listString1": args.listString1,
        "listString2": args.listString2,
        "listString3": args.listString3,
        "mapBool1": args.mapBool1,
        "mapBool2": args.mapBool2,
        "mapBool3": args.mapBool3,
        "mapInt1": args.mapInt1,
        "mapInt2": args.mapInt2,
        "mapInt3": args.mapInt3,
        "mapNum1": args.mapNum1,
        "mapNum2": args.mapNum2,
        "mapNum3": args.mapNum3,
        "mapString1": args.mapString1,
        "mapString2": args.mapString2,
        "mapString3": args.mapString3,
        "num1": args.num1,
        "num2": args.num2,
        "num3": args.num3,
        "objBool1": args.objBool1,
        "objBool2": args.objBool2,
        "objBool3": args.objBool3,
        "objInt1": args.objInt1,
        "objInt2": args.objInt2,
        "objInt3": args.objInt3,
        "objNum1": args.objNum1,
        "objNum2": args.objNum2,
        "objNum3": args.objNum3,
        "objString1": args.objString1,
        "objString2": args.objString2,
        "objString3": args.objString3,
        "string1": args.string1,
        "string2": args.string2,
        "string3": args.string3,
    }, opts);
}

export interface ToSecretArgs {
    bool1?: boolean;
    bool2?: boolean;
    bool3?: boolean;
    int1?: number;
    int2?: number;
    int3?: number;
    listBool1?: boolean[];
    listBool2?: boolean[];
    listBool3?: boolean[];
    listInt1?: number[];
    listInt2?: number[];
    listInt3?: number[];
    listNum1?: number[];
    listNum2?: number[];
    listNum3?: number[];
    listString1?: string[];
    listString2?: string[];
    listString3?: string[];
    mapBool1?: {[key: string]: boolean};
    mapBool2?: {[key: string]: boolean};
    mapBool3?: {[key: string]: boolean};
    mapInt1?: {[key: string]: number};
    mapInt2?: {[key: string]: number};
    mapInt3?: {[key: string]: number};
    mapNum1?: {[key: string]: number};
    mapNum2?: {[key: string]: number};
    mapNum3?: {[key: string]: number};
    mapString1?: {[key: string]: string};
    mapString2?: {[key: string]: string};
    mapString3?: {[key: string]: string};
    num1?: number;
    num2?: number;
    num3?: number;
    objBool1?: inputs.Tbool1;
    objBool2?: inputs.Tbool2;
    objBool3?: inputs.Tbool3;
    objInt1?: inputs.Tint1;
    objInt2?: inputs.Tint2;
    objInt3?: inputs.Tint3;
    objNum1?: inputs.Tnum1;
    objNum2?: inputs.Tnum2;
    objNum3?: inputs.Tnum3;
    objString1?: inputs.Tstring1;
    objString2?: inputs.Tstring2;
    objString3?: inputs.Tstring3;
    string1?: string;
    string2?: string;
    string3?: string;
}

export interface ToSecretResult {
    readonly bool1: boolean;
    readonly bool2: boolean;
    readonly bool3: boolean;
    readonly int1: number;
    readonly int2: number;
    readonly int3: number;
    readonly listBool1: boolean[];
    readonly listBool2: boolean[];
    readonly listBool3: boolean[];
    readonly listInt1: number[];
    readonly listInt2: number[];
    readonly listInt3: number[];
    readonly listNum1: number[];
    readonly listNum2: number[];
    readonly listNum3: number[];
    readonly listString1: string[];
    readonly listString2: string[];
    readonly listString3: string[];
    readonly mapBool1: {[key: string]: boolean};
    readonly mapBool2: {[key: string]: boolean};
    readonly mapBool3: {[key: string]: boolean};
    readonly mapInt1: {[key: string]: number};
    readonly mapInt2: {[key: string]: number};
    readonly mapInt3: {[key: string]: number};
    readonly mapNum1: {[key: string]: number};
    readonly mapNum2: {[key: string]: number};
    readonly mapNum3: {[key: string]: number};
    readonly mapString1: {[key: string]: string};
    readonly mapString2: {[key: string]: string};
    readonly mapString3: {[key: string]: string};
    readonly num1: number;
    readonly num2: number;
    readonly num3: number;
    readonly objBool1: outputs.Tbool1;
    readonly objBool2: outputs.Tbool2;
    readonly objBool3: outputs.Tbool3;
    readonly objInt1: outputs.Tint1;
    readonly objInt2: outputs.Tint2;
    readonly objInt3: outputs.Tint3;
    readonly objNum1: outputs.Tnum1;
    readonly objNum2: outputs.Tnum2;
    readonly objNum3: outputs.Tnum3;
    readonly objString1: outputs.Tstring1;
    readonly objString2: outputs.Tstring2;
    readonly objString3: outputs.Tstring3;
    readonly string1: string;
    readonly string2: string;
    readonly string3: string;
}
export function toSecretOutput(args?: ToSecretOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<ToSecretResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("config-grpc:index:toSecret", {
        "bool1": args.bool1,
        "bool2": args.bool2,
        "bool3": args.bool3,
        "int1": args.int1,
        "int2": args.int2,
        "int3": args.int3,
        "listBool1": args.listBool1,
        "listBool2": args.listBool2,
        "listBool3": args.listBool3,
        "listInt1": args.listInt1,
        "listInt2": args.listInt2,
        "listInt3": args.listInt3,
        "listNum1": args.listNum1,
        "listNum2": args.listNum2,
        "listNum3": args.listNum3,
        "listString1": args.listString1,
        "listString2": args.listString2,
        "listString3": args.listString3,
        "mapBool1": args.mapBool1,
        "mapBool2": args.mapBool2,
        "mapBool3": args.mapBool3,
        "mapInt1": args.mapInt1,
        "mapInt2": args.mapInt2,
        "mapInt3": args.mapInt3,
        "mapNum1": args.mapNum1,
        "mapNum2": args.mapNum2,
        "mapNum3": args.mapNum3,
        "mapString1": args.mapString1,
        "mapString2": args.mapString2,
        "mapString3": args.mapString3,
        "num1": args.num1,
        "num2": args.num2,
        "num3": args.num3,
        "objBool1": args.objBool1,
        "objBool2": args.objBool2,
        "objBool3": args.objBool3,
        "objInt1": args.objInt1,
        "objInt2": args.objInt2,
        "objInt3": args.objInt3,
        "objNum1": args.objNum1,
        "objNum2": args.objNum2,
        "objNum3": args.objNum3,
        "objString1": args.objString1,
        "objString2": args.objString2,
        "objString3": args.objString3,
        "string1": args.string1,
        "string2": args.string2,
        "string3": args.string3,
    }, opts);
}

export interface ToSecretOutputArgs {
    bool1?: pulumi.Input<boolean>;
    bool2?: pulumi.Input<boolean>;
    bool3?: pulumi.Input<boolean>;
    int1?: pulumi.Input<number>;
    int2?: pulumi.Input<number>;
    int3?: pulumi.Input<number>;
    listBool1?: pulumi.Input<pulumi.Input<boolean>[]>;
    listBool2?: pulumi.Input<pulumi.Input<boolean>[]>;
    listBool3?: pulumi.Input<pulumi.Input<boolean>[]>;
    listInt1?: pulumi.Input<pulumi.Input<number>[]>;
    listInt2?: pulumi.Input<pulumi.Input<number>[]>;
    listInt3?: pulumi.Input<pulumi.Input<number>[]>;
    listNum1?: pulumi.Input<pulumi.Input<number>[]>;
    listNum2?: pulumi.Input<pulumi.Input<number>[]>;
    listNum3?: pulumi.Input<pulumi.Input<number>[]>;
    listString1?: pulumi.Input<pulumi.Input<string>[]>;
    listString2?: pulumi.Input<pulumi.Input<string>[]>;
    listString3?: pulumi.Input<pulumi.Input<string>[]>;
    mapBool1?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
    mapBool2?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
    mapBool3?: pulumi.Input<{[key: string]: pulumi.Input<boolean>}>;
    mapInt1?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    mapInt2?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    mapInt3?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    mapNum1?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    mapNum2?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    mapNum3?: pulumi.Input<{[key: string]: pulumi.Input<number>}>;
    mapString1?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    mapString2?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    mapString3?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    num1?: pulumi.Input<number>;
    num2?: pulumi.Input<number>;
    num3?: pulumi.Input<number>;
    objBool1?: pulumi.Input<inputs.Tbool1Args>;
    objBool2?: pulumi.Input<inputs.Tbool2Args>;
    objBool3?: pulumi.Input<inputs.Tbool3Args>;
    objInt1?: pulumi.Input<inputs.Tint1Args>;
    objInt2?: pulumi.Input<inputs.Tint2Args>;
    objInt3?: pulumi.Input<inputs.Tint3Args>;
    objNum1?: pulumi.Input<inputs.Tnum1Args>;
    objNum2?: pulumi.Input<inputs.Tnum2Args>;
    objNum3?: pulumi.Input<inputs.Tnum3Args>;
    objString1?: pulumi.Input<inputs.Tstring1Args>;
    objString2?: pulumi.Input<inputs.Tstring2Args>;
    objString3?: pulumi.Input<inputs.Tstring3Args>;
    string1?: pulumi.Input<string>;
    string2?: pulumi.Input<string>;
    string3?: pulumi.Input<string>;
}
