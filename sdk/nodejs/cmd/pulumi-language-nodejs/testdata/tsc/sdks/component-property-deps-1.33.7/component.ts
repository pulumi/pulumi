// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

import {Custom} from "./index";

/**
 * A component resource that accepts a list of resources. The construct request's property dependencies are returned as an output.
 */
export class Component extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'component-property-deps:index:Component';

    /**
     * Returns true if the given object is an instance of Component.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Component {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Component.__pulumiType;
    }

    declare public /*out*/ readonly propertyDeps: pulumi.Output<{[key: string]: string[]}>;

    /**
     * Create a Component resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ComponentArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if (args?.resource === undefined && !opts.urn) {
                throw new Error("Missing required property 'resource'");
            }
            if (args?.resourceList === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceList'");
            }
            if (args?.resourceMap === undefined && !opts.urn) {
                throw new Error("Missing required property 'resourceMap'");
            }
            resourceInputs["resource"] = args?.resource;
            resourceInputs["resourceList"] = args?.resourceList;
            resourceInputs["resourceMap"] = args?.resourceMap;
            resourceInputs["propertyDeps"] = undefined /*out*/;
        } else {
            resourceInputs["propertyDeps"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Component.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }

    /**
     * The `refs` method of the `Component` component resource. Returns the call request's property dependencies.
     */
    refs(args: Component.RefsArgs): pulumi.Output<Component.RefsResult> {
        return pulumi.runtime.call("component-property-deps:index:Component/refs", {
            "__self__": this,
            "resource": args.resource,
            "resourceList": args.resourceList,
            "resourceMap": args.resourceMap,
        }, this);
    }
}

/**
 * The set of arguments for constructing a Component resource.
 */
export interface ComponentArgs {
    resource: Custom;
    resourceList: Custom[];
    resourceMap: {[key: string]: Custom};
}

export namespace Component {
    /**
     * The set of arguments for the Component.refs method.
     */
    export interface RefsArgs {
        resource: Custom;
        resourceList: pulumi.Input<Custom>[];
        resourceMap: {[key: string]: pulumi.Input<Custom>};
    }

    /**
     * The results of the Component.refs method.
     */
    export interface RefsResult {
        readonly result: {[key: string]: string[]};
    }

}
