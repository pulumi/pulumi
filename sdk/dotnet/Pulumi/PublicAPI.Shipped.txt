Pulumi.Alias
Pulumi.Alias.Alias() -> void
Pulumi.Alias.Name.get -> Pulumi.Input<string>
Pulumi.Alias.Name.set -> void
Pulumi.Alias.NoParent.get -> bool
Pulumi.Alias.NoParent.set -> void
Pulumi.Alias.Parent.get -> Pulumi.Resource
Pulumi.Alias.Parent.set -> void
Pulumi.Alias.ParentUrn.get -> Pulumi.Input<string>
Pulumi.Alias.ParentUrn.set -> void
Pulumi.Alias.Project.get -> Pulumi.Input<string>
Pulumi.Alias.Project.set -> void
Pulumi.Alias.Stack.get -> Pulumi.Input<string>
Pulumi.Alias.Stack.set -> void
Pulumi.Alias.Type.get -> Pulumi.Input<string>
Pulumi.Alias.Type.set -> void
Pulumi.Alias.Urn.get -> string
Pulumi.Alias.Urn.set -> void
Pulumi.Archive
Pulumi.Asset
Pulumi.AssetArchive
Pulumi.AssetArchive.AssetArchive(System.Collections.Generic.IDictionary<string, Pulumi.AssetOrArchive> assets) -> void
Pulumi.AssetOrArchive
Pulumi.ComponentResource
Pulumi.ComponentResource.ComponentResource(string type, string name, Pulumi.ComponentResourceOptions options = null) -> void
Pulumi.ComponentResource.ComponentResource(string type, string name, Pulumi.ResourceArgs args, Pulumi.ComponentResourceOptions options = null, bool remote = false) -> void
Pulumi.ComponentResource.RegisterOutputs() -> void
Pulumi.ComponentResource.RegisterOutputs(Pulumi.Output<System.Collections.Generic.IDictionary<string, object>> outputs) -> void
Pulumi.ComponentResource.RegisterOutputs(System.Collections.Generic.IDictionary<string, object> outputs) -> void
Pulumi.ComponentResource.RegisterOutputs(System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> outputs) -> void
Pulumi.ComponentResourceOptions
Pulumi.ComponentResourceOptions.ComponentResourceOptions() -> void
Pulumi.ComponentResourceOptions.Providers.get -> System.Collections.Generic.List<Pulumi.ProviderResource>
Pulumi.ComponentResourceOptions.Providers.set -> void
Pulumi.Config
Pulumi.Config.Config(string name = null) -> void
Pulumi.Config.Get(string key) -> string
Pulumi.Config.GetBoolean(string key) -> bool?
Pulumi.Config.GetInt32(string key) -> int?
Pulumi.Config.GetObject<T>(string key) -> T
Pulumi.Config.GetSecret(string key) -> Pulumi.Output<string>
Pulumi.Config.GetSecretBoolean(string key) -> Pulumi.Output<bool>
Pulumi.Config.GetSecretInt32(string key) -> Pulumi.Output<int>
Pulumi.Config.GetSecretObject<T>(string key) -> Pulumi.Output<T>
Pulumi.Config.Require(string key) -> string
Pulumi.Config.RequireBoolean(string key) -> bool
Pulumi.Config.RequireInt32(string key) -> int
Pulumi.Config.RequireObject<T>(string key) -> T
Pulumi.Config.RequireSecret(string key) -> Pulumi.Output<string>
Pulumi.Config.RequireSecretBoolean(string key) -> Pulumi.Output<bool>
Pulumi.Config.RequireSecretInt32(string key) -> Pulumi.Output<int>
Pulumi.Config.RequireSecretObject<T>(string key) -> Pulumi.Output<T>
Pulumi.CustomResource
Pulumi.CustomResource.CustomResource(string type, string name, Pulumi.ResourceArgs args, Pulumi.CustomResourceOptions options = null) -> void
Pulumi.CustomResource.Id.get -> Pulumi.Output<string>
Pulumi.CustomResourceOptions
Pulumi.CustomResourceOptions.AdditionalSecretOutputs.get -> System.Collections.Generic.List<string>
Pulumi.CustomResourceOptions.AdditionalSecretOutputs.set -> void
Pulumi.CustomResourceOptions.CustomResourceOptions() -> void
Pulumi.CustomResourceOptions.DeleteBeforeReplace.get -> bool?
Pulumi.CustomResourceOptions.DeleteBeforeReplace.set -> void
Pulumi.CustomResourceOptions.ImportId.get -> string
Pulumi.CustomResourceOptions.ImportId.set -> void
Pulumi.CustomTimeouts
Pulumi.CustomTimeouts.Create.get -> System.TimeSpan?
Pulumi.CustomTimeouts.Create.set -> void
Pulumi.CustomTimeouts.CustomTimeouts() -> void
Pulumi.CustomTimeouts.Delete.get -> System.TimeSpan?
Pulumi.CustomTimeouts.Delete.set -> void
Pulumi.CustomTimeouts.Update.get -> System.TimeSpan?
Pulumi.CustomTimeouts.Update.set -> void
Pulumi.DictionaryResourceArgs
Pulumi.DictionaryResourceArgs.DictionaryResourceArgs(System.Collections.Immutable.ImmutableDictionary<string, object> dictionary) -> void
Pulumi.Deployment
Pulumi.DeploymentInstance
Pulumi.DeploymentInstance.InvokeAsync(string token, Pulumi.InvokeArgs args, Pulumi.InvokeOptions options = null) -> System.Threading.Tasks.Task
Pulumi.DeploymentInstance.InvokeAsync<T>(string token, Pulumi.InvokeArgs args, Pulumi.InvokeOptions options = null) -> System.Threading.Tasks.Task<T>
Pulumi.DeploymentInstance.IsDryRun.get -> bool
Pulumi.DeploymentInstance.ProjectName.get -> string
Pulumi.DeploymentInstance.StackName.get -> string
Pulumi.EnumTypeAttribute
Pulumi.EnumTypeAttribute.EnumTypeAttribute() -> void
Pulumi.FileArchive
Pulumi.FileArchive.FileArchive(string path) -> void
Pulumi.FileAsset
Pulumi.FileAsset.FileAsset(string path) -> void
Pulumi.Input<T>
Pulumi.InputArgs
Pulumi.InputArgs.InputArgs() -> void
Pulumi.InputAttribute
Pulumi.InputAttribute.InputAttribute(string name, bool required = false, bool json = false) -> void
Pulumi.InputExtensions
Pulumi.InputListExtensions
Pulumi.InputMapExtensions
Pulumi.InputJson
Pulumi.InputJson.InputJson() -> void
Pulumi.InputList<T>
Pulumi.InputList<T>.Add(params Pulumi.Input<T>[] inputs) -> void
Pulumi.InputList<T>.Concat(Pulumi.InputList<T> other) -> Pulumi.InputList<T>
Pulumi.InputList<T>.GetAsyncEnumerator(System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerator<Pulumi.Input<T>>
Pulumi.InputList<T>.InputList() -> void
Pulumi.InputMap<V>
Pulumi.InputMap<V>.Add(string key, Pulumi.Input<V> value) -> void
Pulumi.InputMap<V>.GetAsyncEnumerator(System.Threading.CancellationToken cancellationToken) -> System.Collections.Generic.IAsyncEnumerator<Pulumi.Input<System.Collections.Generic.KeyValuePair<string, V>>>
Pulumi.InputMap<V>.InputMap() -> void
Pulumi.InputMap<V>.this[string key].set -> void
Pulumi.InputUnion<T0, T1>
Pulumi.InputUnion<T0, T1>.InputUnion() -> void
Pulumi.InvokeArgs
Pulumi.InvokeArgs.InvokeArgs() -> void
Pulumi.InvokeOptions
Pulumi.InvokeOptions.InvokeOptions() -> void
Pulumi.InvokeOptions.Parent.get -> Pulumi.Resource
Pulumi.InvokeOptions.Parent.set -> void
Pulumi.InvokeOptions.Provider.get -> Pulumi.ProviderResource
Pulumi.InvokeOptions.Provider.set -> void
Pulumi.InvokeOptions.Version.get -> string
Pulumi.InvokeOptions.Version.set -> void
Pulumi.Log
Pulumi.Output
Pulumi.Output<T>
Pulumi.Output<T>.Apply<U>(System.Func<T, Pulumi.Input<U>> func) -> Pulumi.Output<U>
Pulumi.Output<T>.Apply<U>(System.Func<T, Pulumi.Output<U>> func) -> Pulumi.Output<U>
Pulumi.Output<T>.Apply<U>(System.Func<T, System.Threading.Tasks.Task<U>> func) -> Pulumi.Output<U>
Pulumi.Output<T>.Apply<U>(System.Func<T, U> func) -> Pulumi.Output<U>
Pulumi.OutputAttribute
Pulumi.OutputAttribute.Name.get -> string
Pulumi.OutputAttribute.OutputAttribute(string name = null) -> void
Pulumi.OutputConstructorAttribute
Pulumi.OutputConstructorAttribute.OutputConstructorAttribute() -> void
Pulumi.OutputTypeAttribute
Pulumi.OutputTypeAttribute.OutputTypeAttribute() -> void
Pulumi.OutputExtensions
Pulumi.ProviderResource
Pulumi.ProviderResource.ProviderResource(string package, string name, Pulumi.ResourceArgs args, Pulumi.CustomResourceOptions options = null) -> void
Pulumi.RemoteArchive
Pulumi.RemoteArchive.RemoteArchive(string uri) -> void
Pulumi.RemoteAsset
Pulumi.RemoteAsset.RemoteAsset(string uri) -> void
Pulumi.Resource
Pulumi.Resource.GetResourceName() -> string
Pulumi.Resource.GetResourceType() -> string
Pulumi.Resource.Urn.get -> Pulumi.Output<string>
Pulumi.ResourceArgs
Pulumi.ResourceArgs.ResourceArgs() -> void
Pulumi.ResourceException
Pulumi.ResourceException.ResourceException(string message, Pulumi.Resource resource, bool hideStack = false) -> void
Pulumi.ResourceTypeAttribute
Pulumi.ResourceTypeAttribute.ResourceTypeAttribute(string type, string version) -> void
Pulumi.ResourceTypeAttribute.Type.get -> string
Pulumi.ResourceTypeAttribute.Version.get -> string
Pulumi.ResourceOptions
Pulumi.ResourceOptions.Aliases.get -> System.Collections.Generic.List<Pulumi.Input<Pulumi.Alias>>
Pulumi.ResourceOptions.Aliases.set -> void
Pulumi.ResourceOptions.CustomTimeouts.get -> Pulumi.CustomTimeouts
Pulumi.ResourceOptions.CustomTimeouts.set -> void
Pulumi.ResourceOptions.DependsOn.get -> Pulumi.InputList<Pulumi.Resource>
Pulumi.ResourceOptions.DependsOn.set -> void
Pulumi.ResourceOptions.Id.get -> Pulumi.Input<string>
Pulumi.ResourceOptions.Id.set -> void
Pulumi.ResourceOptions.IgnoreChanges.get -> System.Collections.Generic.List<string>
Pulumi.ResourceOptions.IgnoreChanges.set -> void
Pulumi.ResourceOptions.Parent.get -> Pulumi.Resource
Pulumi.ResourceOptions.Parent.set -> void
Pulumi.ResourceOptions.Protect.get -> bool?
Pulumi.ResourceOptions.Protect.set -> void
Pulumi.ResourceOptions.Provider.get -> Pulumi.ProviderResource
Pulumi.ResourceOptions.Provider.set -> void
Pulumi.ResourceOptions.ResourceOptions() -> void
Pulumi.ResourceOptions.ResourceTransformations.get -> System.Collections.Generic.List<Pulumi.ResourceTransformation>
Pulumi.ResourceOptions.ResourceTransformations.set -> void
Pulumi.ResourceOptions.Urn.get -> string
Pulumi.ResourceOptions.Urn.set -> void
Pulumi.ResourceOptions.Version.get -> string
Pulumi.ResourceOptions.Version.set -> void
Pulumi.ResourceTransformation
Pulumi.ResourceTransformationArgs
Pulumi.ResourceTransformationArgs.Args.get -> Pulumi.ResourceArgs
Pulumi.ResourceTransformationArgs.Options.get -> Pulumi.ResourceOptions
Pulumi.ResourceTransformationArgs.Resource.get -> Pulumi.Resource
Pulumi.ResourceTransformationArgs.ResourceTransformationArgs(Pulumi.Resource resource, Pulumi.ResourceArgs args, Pulumi.ResourceOptions options) -> void
Pulumi.ResourceTransformationResult
Pulumi.ResourceTransformationResult.Args.get -> Pulumi.ResourceArgs
Pulumi.ResourceTransformationResult.Options.get -> Pulumi.ResourceOptions
Pulumi.ResourceTransformationResult.ResourceTransformationResult(Pulumi.ResourceArgs args, Pulumi.ResourceOptions options) -> void
Pulumi.Stack
Pulumi.Stack.Stack(Pulumi.StackOptions options = null) -> void
Pulumi.StackOptions
Pulumi.StackOptions.StackOptions() -> void
Pulumi.StackOptions.ResourceTransformations.get -> System.Collections.Generic.List<Pulumi.ResourceTransformation>
Pulumi.StackOptions.ResourceTransformations.set -> void
Pulumi.StackReference
Pulumi.StackReference.GetOutput(Pulumi.Input<string> name) -> Pulumi.Output<object>
Pulumi.StackReference.GetValueAsync(Pulumi.Input<string> name) -> System.Threading.Tasks.Task<object>
Pulumi.StackReference.Name.get -> Pulumi.Output<string>
Pulumi.StackReference.Outputs.get -> Pulumi.Output<System.Collections.Immutable.ImmutableDictionary<string, object>>
Pulumi.StackReference.RequireOutput(Pulumi.Input<string> name) -> Pulumi.Output<object>
Pulumi.StackReference.RequireValueAsync(Pulumi.Input<string> name) -> System.Threading.Tasks.Task<object>
Pulumi.StackReference.SecretOutputNames.get -> Pulumi.Output<System.Collections.Immutable.ImmutableArray<string>>
Pulumi.StackReference.StackReference(string name, Pulumi.StackReferenceArgs args = null, Pulumi.CustomResourceOptions options = null) -> void
Pulumi.StackReferenceArgs
Pulumi.StackReferenceArgs.Name.get -> Pulumi.Input<string>
Pulumi.StackReferenceArgs.Name.set -> void
Pulumi.StackReferenceArgs.StackReferenceArgs() -> void
Pulumi.StringAsset
Pulumi.StringAsset.StringAsset(string text) -> void
Pulumi.Testing.MockResourceArgs
Pulumi.Testing.MockResourceArgs.MockResourceArgs() -> void
Pulumi.Testing.MockResourceArgs.Type.get -> string
Pulumi.Testing.MockResourceArgs.Type.set -> void
Pulumi.Testing.MockResourceArgs.Name.get -> string
Pulumi.Testing.MockResourceArgs.Name.set -> void
Pulumi.Testing.MockResourceArgs.Provider.get -> string
Pulumi.Testing.MockResourceArgs.Provider.set -> void
Pulumi.Testing.MockResourceArgs.Id.get -> string
Pulumi.Testing.MockResourceArgs.Id.set -> void
Pulumi.Testing.MockResourceArgs.Inputs.get -> System.Collections.Immutable.ImmutableDictionary<string, object>
Pulumi.Testing.MockResourceArgs.Inputs.set -> void
Pulumi.Testing.MockCallArgs
Pulumi.Testing.MockCallArgs.MockCallArgs() -> void
Pulumi.Testing.MockCallArgs.Token.get -> string
Pulumi.Testing.MockCallArgs.Token.set -> void
Pulumi.Testing.MockCallArgs.Provider.get -> string
Pulumi.Testing.MockCallArgs.Provider.set -> void
Pulumi.Testing.MockCallArgs.Args.get -> System.Collections.Immutable.ImmutableDictionary<string, object>
Pulumi.Testing.MockCallArgs.Args.set -> void
Pulumi.Testing.IMocks
Pulumi.Testing.IMocks.CallAsync(Pulumi.Testing.MockCallArgs args) -> System.Threading.Tasks.Task<object>
Pulumi.Testing.IMocks.NewResourceAsync(Pulumi.Testing.MockResourceArgs args) -> System.Threading.Tasks.Task<(string id, object state)>
Pulumi.Testing.TestOptions
Pulumi.Testing.TestOptions.TestOptions() -> void
Pulumi.Testing.TestOptions.ProjectName.get -> string
Pulumi.Testing.TestOptions.ProjectName.set -> void
Pulumi.Testing.TestOptions.StackName.get -> string
Pulumi.Testing.TestOptions.StackName.set -> void
Pulumi.Testing.TestOptions.IsPreview.get -> bool?
Pulumi.Testing.TestOptions.IsPreview.set -> void
Pulumi.Union<T0, T1>
Pulumi.Union<T0, T1>.AsT0.get -> T0
Pulumi.Union<T0, T1>.AsT1.get -> T1
Pulumi.Union<T0, T1>.Equals(Pulumi.Union<T0, T1> union) -> bool
Pulumi.Union<T0, T1>.IsT0.get -> bool
Pulumi.Union<T0, T1>.IsT1.get -> bool
Pulumi.Union<T0, T1>.MapT0<TResult>(System.Func<T0, TResult> mapFunc) -> Pulumi.Union<TResult, T1>
Pulumi.Union<T0, T1>.MapT1<TResult>(System.Func<T1, TResult> mapFunc) -> Pulumi.Union<T0, TResult>
Pulumi.Union<T0, T1>.Match<TResult>(System.Func<T0, TResult> f0, System.Func<T1, TResult> f1) -> TResult
Pulumi.Union<T0, T1>.Switch(System.Action<T0> f0, System.Action<T1> f1) -> void
Pulumi.Union<T0, T1>.TryPickT0(out T0 value, out T1 remainder) -> bool
Pulumi.Union<T0, T1>.TryPickT1(out T1 value, out T0 remainder) -> bool
Pulumi.Union<T0, T1>.Value.get -> object
Pulumi.Urn
Pulumi.Utilities.OutputUtilities
override Pulumi.Union<T0, T1>.Equals(object obj) -> bool
override Pulumi.Union<T0, T1>.GetHashCode() -> int
override Pulumi.Union<T0, T1>.ToString() -> string
static Pulumi.ComponentResourceOptions.Merge(Pulumi.ComponentResourceOptions options1, Pulumi.ComponentResourceOptions options2) -> Pulumi.ComponentResourceOptions
static Pulumi.CustomResourceOptions.Merge(Pulumi.CustomResourceOptions options1, Pulumi.CustomResourceOptions options2) -> Pulumi.CustomResourceOptions
static Pulumi.Deployment.Instance.get -> Pulumi.DeploymentInstance
static Pulumi.Deployment.RunAsync(System.Action action) -> System.Threading.Tasks.Task<int>
static Pulumi.Deployment.RunAsync(System.Func<System.Collections.Generic.IDictionary<string, object>> func) -> System.Threading.Tasks.Task<int>
static Pulumi.Deployment.RunAsync(System.Func<System.Threading.Tasks.Task> func) -> System.Threading.Tasks.Task<int>
static Pulumi.Deployment.RunAsync(System.Func<System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>>> func, Pulumi.StackOptions options = null) -> System.Threading.Tasks.Task<int>
static Pulumi.Deployment.RunAsync<TStack>() -> System.Threading.Tasks.Task<int>
static Pulumi.Deployment.RunAsync<TStack>(System.IServiceProvider serviceProvider) -> System.Threading.Tasks.Task<int>
static Pulumi.Deployment.TestAsync<TStack>(Pulumi.Testing.IMocks mocks, Pulumi.Testing.TestOptions options = null) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Pulumi.Resource>>
static Pulumi.Deployment.TestWithServiceProviderAsync<TStack>(Pulumi.Testing.IMocks mocks, System.IServiceProvider serviceProvider, Pulumi.Testing.TestOptions options = null) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableArray<Pulumi.Resource>>
static Pulumi.Input<T>.implicit operator Pulumi.Input<T>(Pulumi.Output<T> value) -> Pulumi.Input<T>
static Pulumi.Input<T>.implicit operator Pulumi.Input<T>(T value) -> Pulumi.Input<T>
static Pulumi.Input<T>.implicit operator Pulumi.Output<T>(Pulumi.Input<T> input) -> Pulumi.Output<T>
static Pulumi.InputExtensions.Apply<T, U>(this Pulumi.Input<T> input, System.Func<T, Pulumi.Input<U>> func) -> Pulumi.Output<U>
static Pulumi.InputExtensions.Apply<T, U>(this Pulumi.Input<T> input, System.Func<T, Pulumi.Output<U>> func) -> Pulumi.Output<U>
static Pulumi.InputExtensions.Apply<T, U>(this Pulumi.Input<T> input, System.Func<T, System.Threading.Tasks.Task<U>> func) -> Pulumi.Output<U>
static Pulumi.InputExtensions.Apply<T, U>(this Pulumi.Input<T> input, System.Func<T, U> func) -> Pulumi.Output<U>
static Pulumi.InputExtensions.ToOutput<T>(this Pulumi.Input<T> input) -> Pulumi.Output<T>
static Pulumi.InputListExtensions.Add<T, U>(this Pulumi.InputList<Pulumi.Union<T, U>> list, Pulumi.Input<T> value) -> void
static Pulumi.InputListExtensions.Add<T, U>(this Pulumi.InputList<Pulumi.Union<T, U>> list, Pulumi.Input<U> value) -> void
static Pulumi.InputMapExtensions.Add<T, U>(this Pulumi.InputMap<Pulumi.Union<T, U>> map, string key, Pulumi.Input<T> value) -> void
static Pulumi.InputMapExtensions.Add<T, U>(this Pulumi.InputMap<Pulumi.Union<T, U>> map, string key, Pulumi.Input<U> value) -> void
static Pulumi.InputJson.implicit operator Pulumi.InputJson(Pulumi.Output<System.Text.Json.JsonDocument> document) -> Pulumi.InputJson
static Pulumi.InputJson.implicit operator Pulumi.InputJson(Pulumi.Output<System.Text.Json.JsonElement> element) -> Pulumi.InputJson
static Pulumi.InputJson.implicit operator Pulumi.InputJson(Pulumi.Output<string> json) -> Pulumi.InputJson
static Pulumi.InputJson.implicit operator Pulumi.InputJson(System.Text.Json.JsonDocument document) -> Pulumi.InputJson
static Pulumi.InputJson.implicit operator Pulumi.InputJson(System.Text.Json.JsonElement element) -> Pulumi.InputJson
static Pulumi.InputJson.implicit operator Pulumi.InputJson(string json) -> Pulumi.InputJson
static Pulumi.InputList<T>.implicit operator Pulumi.InputList<T>(Pulumi.Input<T> value) -> Pulumi.InputList<T>
static Pulumi.InputList<T>.implicit operator Pulumi.InputList<T>(Pulumi.Input<T>[] values) -> Pulumi.InputList<T>
static Pulumi.InputList<T>.implicit operator Pulumi.InputList<T>(Pulumi.Output<System.Collections.Generic.IEnumerable<T>> values) -> Pulumi.InputList<T>
static Pulumi.InputList<T>.implicit operator Pulumi.InputList<T>(Pulumi.Output<System.Collections.Generic.List<T>> values) -> Pulumi.InputList<T>
static Pulumi.InputList<T>.implicit operator Pulumi.InputList<T>(Pulumi.Output<System.Collections.Immutable.ImmutableArray<T>> values) -> Pulumi.InputList<T>
static Pulumi.InputList<T>.implicit operator Pulumi.InputList<T>(Pulumi.Output<T> value) -> Pulumi.InputList<T>
static Pulumi.InputList<T>.implicit operator Pulumi.InputList<T>(Pulumi.Output<T>[] values) -> Pulumi.InputList<T>
static Pulumi.InputList<T>.implicit operator Pulumi.InputList<T>(Pulumi.Output<T[]> values) -> Pulumi.InputList<T>
static Pulumi.InputList<T>.implicit operator Pulumi.InputList<T>(System.Collections.Generic.List<Pulumi.Input<T>> values) -> Pulumi.InputList<T>
static Pulumi.InputList<T>.implicit operator Pulumi.InputList<T>(System.Collections.Generic.List<Pulumi.Output<T>> values) -> Pulumi.InputList<T>
static Pulumi.InputList<T>.implicit operator Pulumi.InputList<T>(System.Collections.Generic.List<T> values) -> Pulumi.InputList<T>
static Pulumi.InputList<T>.implicit operator Pulumi.InputList<T>(System.Collections.Immutable.ImmutableArray<Pulumi.Input<T>> values) -> Pulumi.InputList<T>
static Pulumi.InputList<T>.implicit operator Pulumi.InputList<T>(System.Collections.Immutable.ImmutableArray<Pulumi.Output<T>> values) -> Pulumi.InputList<T>
static Pulumi.InputList<T>.implicit operator Pulumi.InputList<T>(System.Collections.Immutable.ImmutableArray<T> values) -> Pulumi.InputList<T>
static Pulumi.InputList<T>.implicit operator Pulumi.InputList<T>(T value) -> Pulumi.InputList<T>
static Pulumi.InputList<T>.implicit operator Pulumi.InputList<T>(T[] values) -> Pulumi.InputList<T>
static Pulumi.InputMap<V>.Merge(Pulumi.InputMap<V> first, Pulumi.InputMap<V> second) -> Pulumi.InputMap<V>
static Pulumi.InputMap<V>.implicit operator Pulumi.InputMap<V>(Pulumi.Output<System.Collections.Generic.Dictionary<string, V>> values) -> Pulumi.InputMap<V>
static Pulumi.InputMap<V>.implicit operator Pulumi.InputMap<V>(Pulumi.Output<System.Collections.Generic.IDictionary<string, V>> values) -> Pulumi.InputMap<V>
static Pulumi.InputMap<V>.implicit operator Pulumi.InputMap<V>(Pulumi.Output<System.Collections.Immutable.ImmutableDictionary<string, V>> values) -> Pulumi.InputMap<V>
static Pulumi.InputMap<V>.implicit operator Pulumi.InputMap<V>(System.Collections.Generic.Dictionary<string, V> values) -> Pulumi.InputMap<V>
static Pulumi.InputMap<V>.implicit operator Pulumi.InputMap<V>(System.Collections.Immutable.ImmutableDictionary<string, V> values) -> Pulumi.InputMap<V>
static Pulumi.InputUnion<T0, T1>.implicit operator Pulumi.InputUnion<T0, T1>(Pulumi.Output<T0> value) -> Pulumi.InputUnion<T0, T1>
static Pulumi.InputUnion<T0, T1>.implicit operator Pulumi.InputUnion<T0, T1>(Pulumi.Output<T1> value) -> Pulumi.InputUnion<T0, T1>
static Pulumi.InputUnion<T0, T1>.implicit operator Pulumi.InputUnion<T0, T1>(T0 value) -> Pulumi.InputUnion<T0, T1>
static Pulumi.InputUnion<T0, T1>.implicit operator Pulumi.InputUnion<T0, T1>(T1 value) -> Pulumi.InputUnion<T0, T1>
static Pulumi.Log.Debug(string message, Pulumi.Resource resource = null, int? streamId = null, bool? ephemeral = null) -> void
static Pulumi.Log.Error(string message, Pulumi.Resource resource = null, int? streamId = null, bool? ephemeral = null) -> void
static Pulumi.Log.Exception(System.Exception exception, Pulumi.Resource resource = null, int? streamId = null, bool? ephemeral = null) -> void
static Pulumi.Log.Info(string message, Pulumi.Resource resource = null, int? streamId = null, bool? ephemeral = null) -> void
static Pulumi.Log.Warn(string message, Pulumi.Resource resource = null, int? streamId = null, bool? ephemeral = null) -> void
static Pulumi.Output.All<T>(System.Collections.Generic.IEnumerable<Pulumi.Input<T>> inputs) -> Pulumi.Output<System.Collections.Immutable.ImmutableArray<T>>
static Pulumi.Output.All<T>(System.Collections.Generic.IEnumerable<Pulumi.Output<T>> outputs) -> Pulumi.Output<System.Collections.Immutable.ImmutableArray<T>>
static Pulumi.Output.All<T>(params Pulumi.Input<T>[] inputs) -> Pulumi.Output<System.Collections.Immutable.ImmutableArray<T>>
static Pulumi.Output.All<T>(params Pulumi.Output<T>[] outputs) -> Pulumi.Output<System.Collections.Immutable.ImmutableArray<T>>
static Pulumi.Output.Create<T>(System.Threading.Tasks.Task<T> value) -> Pulumi.Output<T>
static Pulumi.Output.Create<T>(T value) -> Pulumi.Output<T>
static Pulumi.Output.CreateSecret<T>(System.Threading.Tasks.Task<T> value) -> Pulumi.Output<T>
static Pulumi.Output.CreateSecret<T>(T value) -> Pulumi.Output<T>
static Pulumi.Output.Format(System.FormattableString formattableString) -> Pulumi.Output<string>
static Pulumi.Output.IsSecretAsync<T>(Pulumi.Output<T> output) -> System.Threading.Tasks.Task<bool>
static Pulumi.Output.Tuple<T1, T2, T3, T4, T5, T6, T7, T8>(Pulumi.Input<T1> item1, Pulumi.Input<T2> item2, Pulumi.Input<T3> item3, Pulumi.Input<T4> item4, Pulumi.Input<T5> item5, Pulumi.Input<T6> item6, Pulumi.Input<T7> item7, Pulumi.Input<T8> item8) -> Pulumi.Output<(T1, T2, T3, T4, T5, T6, T7, T8)>
static Pulumi.Output.Tuple<T1, T2, T3, T4, T5, T6, T7, T8>(Pulumi.Output<T1> item1, Pulumi.Output<T2> item2, Pulumi.Output<T3> item3, Pulumi.Output<T4> item4, Pulumi.Output<T5> item5, Pulumi.Output<T6> item6, Pulumi.Output<T7> item7, Pulumi.Output<T8> item8) -> Pulumi.Output<(T1, T2, T3, T4, T5, T6, T7, T8)>
static Pulumi.Output.Tuple<T1, T2, T3, T4, T5, T6, T7>(Pulumi.Input<T1> item1, Pulumi.Input<T2> item2, Pulumi.Input<T3> item3, Pulumi.Input<T4> item4, Pulumi.Input<T5> item5, Pulumi.Input<T6> item6, Pulumi.Input<T7> item7) -> Pulumi.Output<(T1, T2, T3, T4, T5, T6, T7)>
static Pulumi.Output.Tuple<T1, T2, T3, T4, T5, T6, T7>(Pulumi.Output<T1> item1, Pulumi.Output<T2> item2, Pulumi.Output<T3> item3, Pulumi.Output<T4> item4, Pulumi.Output<T5> item5, Pulumi.Output<T6> item6, Pulumi.Output<T7> item7) -> Pulumi.Output<(T1, T2, T3, T4, T5, T6, T7)>
static Pulumi.Output.Tuple<T1, T2, T3, T4, T5, T6>(Pulumi.Input<T1> item1, Pulumi.Input<T2> item2, Pulumi.Input<T3> item3, Pulumi.Input<T4> item4, Pulumi.Input<T5> item5, Pulumi.Input<T6> item6) -> Pulumi.Output<(T1, T2, T3, T4, T5, T6)>
static Pulumi.Output.Tuple<T1, T2, T3, T4, T5, T6>(Pulumi.Output<T1> item1, Pulumi.Output<T2> item2, Pulumi.Output<T3> item3, Pulumi.Output<T4> item4, Pulumi.Output<T5> item5, Pulumi.Output<T6> item6) -> Pulumi.Output<(T1, T2, T3, T4, T5, T6)>
static Pulumi.Output.Tuple<T1, T2, T3, T4, T5>(Pulumi.Input<T1> item1, Pulumi.Input<T2> item2, Pulumi.Input<T3> item3, Pulumi.Input<T4> item4, Pulumi.Input<T5> item5) -> Pulumi.Output<(T1, T2, T3, T4, T5)>
static Pulumi.Output.Tuple<T1, T2, T3, T4, T5>(Pulumi.Output<T1> item1, Pulumi.Output<T2> item2, Pulumi.Output<T3> item3, Pulumi.Output<T4> item4, Pulumi.Output<T5> item5) -> Pulumi.Output<(T1, T2, T3, T4, T5)>
static Pulumi.Output.Tuple<T1, T2, T3, T4>(Pulumi.Input<T1> item1, Pulumi.Input<T2> item2, Pulumi.Input<T3> item3, Pulumi.Input<T4> item4) -> Pulumi.Output<(T1, T2, T3, T4)>
static Pulumi.Output.Tuple<T1, T2, T3, T4>(Pulumi.Output<T1> item1, Pulumi.Output<T2> item2, Pulumi.Output<T3> item3, Pulumi.Output<T4> item4) -> Pulumi.Output<(T1, T2, T3, T4)>
static Pulumi.Output.Tuple<T1, T2, T3>(Pulumi.Input<T1> item1, Pulumi.Input<T2> item2, Pulumi.Input<T3> item3) -> Pulumi.Output<(T1, T2, T3)>
static Pulumi.Output.Tuple<T1, T2, T3>(Pulumi.Output<T1> item1, Pulumi.Output<T2> item2, Pulumi.Output<T3> item3) -> Pulumi.Output<(T1, T2, T3)>
static Pulumi.Output.Tuple<T1, T2>(Pulumi.Input<T1> item1, Pulumi.Input<T2> item2) -> Pulumi.Output<(T1, T2)>
static Pulumi.Output.Tuple<T1, T2>(Pulumi.Output<T1> item1, Pulumi.Output<T2> item2) -> Pulumi.Output<(T1, T2)>
static Pulumi.Output.Unsecret<T>(Pulumi.Output<T> output) -> Pulumi.Output<T>
static Pulumi.Output<T>.Create(System.Threading.Tasks.Task<T> value) -> Pulumi.Output<T>
static Pulumi.OutputExtensions.AsT0<T0, T1>(this Pulumi.Output<Pulumi.Union<T0, T1>> output) -> Pulumi.Output<T0>
static Pulumi.OutputExtensions.AsT1<T0, T1>(this Pulumi.Output<Pulumi.Union<T0, T1>> output) -> Pulumi.Output<T1>
static Pulumi.OutputExtensions.First<T>(this Pulumi.Output<System.Collections.Immutable.ImmutableArray<T>> array) -> Pulumi.Output<T>
static Pulumi.OutputExtensions.GetAt<T>(this Pulumi.Output<System.Collections.Immutable.ImmutableArray<T>> array, Pulumi.Input<int> index) -> Pulumi.Output<T>
static Pulumi.OutputExtensions.IsT0<T0, T1>(this Pulumi.Output<Pulumi.Union<T0, T1>> output) -> Pulumi.Output<bool>
static Pulumi.OutputExtensions.IsT1<T0, T1>(this Pulumi.Output<Pulumi.Union<T0, T1>> output) -> Pulumi.Output<bool>
static Pulumi.OutputExtensions.Length<T>(this Pulumi.Output<System.Collections.Immutable.ImmutableArray<T>> array) -> Pulumi.Output<int>
static Pulumi.OutputExtensions.Value<T0, T1>(this Pulumi.Output<Pulumi.Union<T0, T1>> output) -> Pulumi.Output<object>
static Pulumi.Utilities.OutputUtilities.CreateUnknown<T>(System.Func<System.Threading.Tasks.Task<T>> valueFactory) -> Pulumi.Output<T>
static Pulumi.Utilities.OutputUtilities.CreateUnknown<T>(T value) -> Pulumi.Output<T>
static Pulumi.Utilities.OutputUtilities.GetDependenciesAsync<T>(Pulumi.Output<T> output) -> System.Threading.Tasks.Task<System.Collections.Immutable.ImmutableHashSet<Pulumi.Resource>>
static Pulumi.Utilities.OutputUtilities.GetIsKnownAsync<T>(Pulumi.Output<T> output) -> System.Threading.Tasks.Task<bool>
static Pulumi.Utilities.OutputUtilities.GetValueAsync<T>(Pulumi.Output<T> output) -> System.Threading.Tasks.Task<T>
static Pulumi.Union<T0, T1>.FromT0(T0 input) -> Pulumi.Union<T0, T1>
static Pulumi.Union<T0, T1>.FromT1(T1 input) -> Pulumi.Union<T0, T1>
static Pulumi.Union<T0, T1>.implicit operator Pulumi.Union<T0, T1>(T0 t) -> Pulumi.Union<T0, T1>
static Pulumi.Union<T0, T1>.implicit operator Pulumi.Union<T0, T1>(T1 t) -> Pulumi.Union<T0, T1>
static Pulumi.Urn.Create(Pulumi.Input<string> name, Pulumi.Input<string> type, Pulumi.Resource parent = null, Pulumi.Input<string> parentUrn = null, Pulumi.Input<string> project = null, Pulumi.Input<string> stack = null) -> Pulumi.Output<string>
static readonly Pulumi.InvokeArgs.Empty -> Pulumi.InvokeArgs
static readonly Pulumi.ResourceArgs.Empty -> Pulumi.ResourceArgs
