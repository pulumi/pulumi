// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

#nullable enable

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.S3
{
    public class Bucket : CustomResource
    {
        [Output("accelerationStatus")]
        public Output<string> AccelerationStatus { get; private set; } = null!;

        [Output("acl")]
        public Output<string?> Acl { get; private set; } = null!;

        [Output("arn")]
        public Output<string> Arn { get; private set; } = null!;

        [Output("bucket")]
        public Output<string> BucketName { get; private set; } = null!;

        [Output("bucketDomainName")]
        public Output<string> BucketDomainName { get; private set; } = null!;

        [Output("bucketPrefix")]
        public Output<string?> BucketPrefix { get; private set; } = null!;

        [Output("bucketRegionalDomainName")]
        public Output<string> BucketRegionalDomainName { get; private set; } = null!;

        [Output("corsRules")]
        public Output<ImmutableArray<BucketCorsRules>?> CorsRules { get; private set; } = null!;

        [Output("forceDestroy")]
        public Output<bool?> ForceDestroy { get; private set; } = null!;

        [Output("hostedZoneId")]
        public Output<string> HostedZoneId { get; private set; } = null!;

        [Output("lifecycleRules")]
        public Output<ImmutableArray<BucketLifecycleRules>?> LifecycleRules { get; private set; } = null!;

        [Output("loggings")]
        public Output<ImmutableArray<BucketLoggings>?> Loggings { get; private set; } = null!;

        [Output("objectLockConfiguration")]
        public Output<BucketObjectLockConfiguration?> ObjectLockConfiguration { get; private set; } = null!;

        [Output("policy")]
        public Output<string?> Policy { get; private set; } = null!;

        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        [Output("replicationConfiguration")]
        public Output<BucketReplicationConfiguration?> ReplicationConfiguration { get; private set; } = null!;

        [Output("requestPayer")]
        public Output<string> RequestPayer { get; private set; } = null!;

        [Output("serverSideEncryptionConfiguration")]
        public Output<BucketServerSideEncryptionConfiguration?> ServerSideEncryptionConfiguration { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, object>?> Tags { get; private set; } = null!;

        [Output("versioning")]
        public Output<BucketVersioning> Versioning { get; private set; } = null!;

        [Output("website")]
        public Output<BucketWebsite?> Website { get; private set; } = null!;

        [Output("websiteDomain")]
        public Output<string> WebsiteDomain { get; private set; } = null!;

        [Output("websiteEndpoint")]
        public Output<string> WebsiteEndpoint { get; private set; } = null!;


        public Bucket(string name, BucketArgs? args = null, CustomResourceOptions? options = null)
            : base("aws:s3/bucket:Bucket", name, args, options)
        {
        }
    }

    public class BucketArgs : ResourceArgs
    {
        [Input("accelerationStatus")]
        public Input<string>? AccelerationStatus { get; set; }

        [Input("acl")]
        public Input<string>? Acl { get; set; }

        [Input("arn")]
        public Input<string>? Arn { get; set; }

        [Input("bucket")]
        public Input<string>? BucketName { get; set; }

        [Input("bucketPrefix")]
        public Input<string>? BucketPrefix { get; set; }

        [Input("corsRules")]
        private InputList<BucketCorsRulesArgs>? _corsRules;
        public InputList<BucketCorsRulesArgs>? CorsRules
        {
            get => _corsRules ?? (_corsRules = new InputList<BucketCorsRulesArgs>());
            set => _corsRules = value;
        }

        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("hostedZoneId")]
        public Input<string>? HostedZoneId { get; set; }

        [Input("lifecycleRules")]
        private InputList<BucketLifecycleRulesArgs>? _lifecycleRules;
        public InputList<BucketLifecycleRulesArgs>? LifecycleRules
        {
            get => _lifecycleRules ?? (_lifecycleRules = new InputList<BucketLifecycleRulesArgs>());
            set => _lifecycleRules = value;
        }

        [Input("loggings")]
        private InputList<BucketLoggingsArgs>? _loggings;
        public InputList<BucketLoggingsArgs>? Loggings
        {
            get => _loggings ?? (_loggings = new InputList<BucketLoggingsArgs>());
            set => _loggings = value;
        }

        [Input("objectLockConfiguration")]
        public Input<BucketObjectLockConfigurationArgs>? ObjectLockConfiguration { get; set; }

        [Input("policy")]
        public Input<string>? Policy { get; set; }

        [Input("region")]
        public Input<string>? Region { get; set; }

        [Input("replicationConfiguration")]
        public Input<BucketReplicationConfigurationArgs>? ReplicationConfiguration { get; set; }

        [Input("requestPayer")]
        public Input<string>? RequestPayer { get; set; }

        [Input("serverSideEncryptionConfiguration")]
        public Input<BucketServerSideEncryptionConfigurationArgs>? ServerSideEncryptionConfiguration { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;
        public InputMap<object>? Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        [Input("versioning")]
        public Input<BucketVersioningArgs>? Versioning { get; set; }

        [Input("website")]
        public Input<BucketWebsiteArgs>? Website { get; set; }

        [Input("websiteDomain")]
        public Input<string>? WebsiteDomain { get; set; }

        [Input("websiteEndpoint")]
        public Input<string>? WebsiteEndpoint { get; set; }

        public BucketArgs()
        {
        }
    }

    public class BucketCorsRulesArgs
    {
        [Input("allowedHeaders")]
        private InputList<string>? _allowedHeaders;
        public InputList<string>? AllowedHeaders
        {
            get => _allowedHeaders ?? (_allowedHeaders = new InputList<string>());
            set => _allowedHeaders = value;
        }

        [Input("allowedMethods", required: true)]
        private InputList<string>? _allowedMethods;
        public InputList<string> AllowedMethods
        {
            get => _allowedMethods ?? (_allowedMethods = new InputList<string>());
            set => _allowedMethods = value;
        }

        [Input("allowedOrigins", required: true)]
        private InputList<string>? _allowedOrigins;
        public InputList<string> AllowedOrigins
        {
            get => _allowedOrigins ?? (_allowedOrigins = new InputList<string>());
            set => _allowedOrigins = value;
        }

        [Input("exposeHeaders")]
        private InputList<string>? _exposeHeaders;
        public InputList<string>? ExposeHeaders
        {
            get => _exposeHeaders ?? (_exposeHeaders = new InputList<string>());
            set => _exposeHeaders = value;
        }

        [Input("maxAgeSeconds")]
        public Input<int>? MaxAgeSeconds { get; set; }

        public BucketCorsRulesArgs()
        {
        }
    }

    public class BucketLifecycleRulesArgs
    {
        [Input("abortIncompleteMultipartUploadDays")]
        public Input<int>? AbortIncompleteMultipartUploadDays { get; set; }

        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        [Input("expiration")]
        public Input<BucketLifecycleRulesExpirationArgs>? Expiration { get; set; }

        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("noncurrentVersionExpiration")]
        public Input<BucketLifecycleRulesNoncurrentVersionExpirationArgs>? NoncurrentVersionExpiration { get; set; }

        [Input("noncurrentVersionTransitions")]
        private InputList<BucketLifecycleRulesNoncurrentVersionTransitionsArgs>? _noncurrentVersionTransitions;
        public InputList<BucketLifecycleRulesNoncurrentVersionTransitionsArgs>? NoncurrentVersionTransitions
        {
            get => _noncurrentVersionTransitions ?? (_noncurrentVersionTransitions = new InputList<BucketLifecycleRulesNoncurrentVersionTransitionsArgs>());
            set => _noncurrentVersionTransitions = value;
        }

        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;
        public InputMap<object>? Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        [Input("transitions")]
        private InputList<BucketLifecycleRulesTransitionsArgs>? _transitions;
        public InputList<BucketLifecycleRulesTransitionsArgs>? Transitions
        {
            get => _transitions ?? (_transitions = new InputList<BucketLifecycleRulesTransitionsArgs>());
            set => _transitions = value;
        }

        public BucketLifecycleRulesArgs()
        {
        }
    }

    public class BucketLifecycleRulesExpirationArgs
    {
        [Input("date")]
        public Input<string>? Date { get; set; }

        [Input("days")]
        public Input<int>? Days { get; set; }

        [Input("expiredObjectDeleteMarker")]
        public Input<bool>? ExpiredObjectDeleteMarker { get; set; }

        public BucketLifecycleRulesExpirationArgs()
        {
        }
    }

    public class BucketLifecycleRulesNoncurrentVersionExpirationArgs
    {
        [Input("days")]
        public Input<int>? Days { get; set; }

        public BucketLifecycleRulesNoncurrentVersionExpirationArgs()
        {
        }
    }

    public class BucketLifecycleRulesNoncurrentVersionTransitionsArgs
    {
        [Input("days")]
        public Input<int>? Days { get; set; }

        [Input("storageClass", required: true)]
        public Input<string> StorageClass { get; set; } = null!;

        public BucketLifecycleRulesNoncurrentVersionTransitionsArgs()
        {
        }
    }

    public class BucketLifecycleRulesTransitionsArgs
    {
        [Input("date")]
        public Input<string>? Date { get; set; }

        [Input("days")]
        public Input<int>? Days { get; set; }

        [Input("storageClass", required: true)]
        public Input<string> StorageClass { get; set; } = null!;

        public BucketLifecycleRulesTransitionsArgs()
        {
        }
    }

    public class BucketLoggingsArgs
    {
        [Input("targetBucket", required: true)]
        public Input<string> TargetBucket { get; set; } = null!;

        [Input("targetPrefix")]
        public Input<string>? TargetPrefix { get; set; }

        public BucketLoggingsArgs()
        {
        }
    }

    public class BucketObjectLockConfigurationArgs
    {
        [Input("objectLockEnabled", required: true)]
        public Input<string> ObjectLockEnabled { get; set; } = null!;

        [Input("rule")]
        public Input<BucketObjectLockConfigurationRuleArgs>? Rule { get; set; }

        public BucketObjectLockConfigurationArgs()
        {
        }
    }

    public class BucketObjectLockConfigurationRuleArgs
    {
        [Input("defaultRetention", required: true)]
        public Input<BucketObjectLockConfigurationRuleDefaultRetentionArgs> DefaultRetention { get; set; } = null!;

        public BucketObjectLockConfigurationRuleArgs()
        {
        }
    }

    public class BucketObjectLockConfigurationRuleDefaultRetentionArgs
    {
        [Input("days")]
        public Input<int>? Days { get; set; }

        [Input("mode", required: true)]
        public Input<string> Mode { get; set; } = null!;

        [Input("years")]
        public Input<int>? Years { get; set; }

        public BucketObjectLockConfigurationRuleDefaultRetentionArgs()
        {
        }
    }

    public class BucketReplicationConfigurationArgs
    {
        [Input("role", required: true)]
        public Input<string> Role { get; set; } = null!;

        [Input("rules", required: true)]
        private InputList<BucketReplicationConfigurationRulesArgs>? _rules;
        public InputList<BucketReplicationConfigurationRulesArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<BucketReplicationConfigurationRulesArgs>());
            set => _rules = value;
        }

        public BucketReplicationConfigurationArgs()
        {
        }
    }

    public class BucketReplicationConfigurationRulesArgs
    {
        [Input("destination", required: true)]
        public Input<BucketReplicationConfigurationRulesDestinationArgs> Destination { get; set; } = null!;

        [Input("filter")]
        public Input<BucketReplicationConfigurationRulesFilterArgs>? Filter { get; set; }

        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("sourceSelectionCriteria")]
        public Input<BucketReplicationConfigurationRulesSourceSelectionCriteriaArgs>? SourceSelectionCriteria { get; set; }

        [Input("status", required: true)]
        public Input<string> Status { get; set; } = null!;

        public BucketReplicationConfigurationRulesArgs()
        {
        }
    }

    public class BucketReplicationConfigurationRulesDestinationAccessControlTranslationArgs
    {
        [Input("owner", required: true)]
        public Input<string> Owner { get; set; } = null!;

        public BucketReplicationConfigurationRulesDestinationAccessControlTranslationArgs()
        {
        }
    }

    public class BucketReplicationConfigurationRulesDestinationArgs
    {
        [Input("accessControlTranslation")]
        public Input<BucketReplicationConfigurationRulesDestinationAccessControlTranslationArgs>? AccessControlTranslation { get; set; }

        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("bucket", required: true)]
        public Input<string> Bucket { get; set; } = null!;

        [Input("replicaKmsKeyId")]
        public Input<string>? ReplicaKmsKeyId { get; set; }

        [Input("storageClass")]
        public Input<string>? StorageClass { get; set; }

        public BucketReplicationConfigurationRulesDestinationArgs()
        {
        }
    }

    public class BucketReplicationConfigurationRulesFilterArgs
    {
        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        [Input("tags")]
        private InputMap<object>? _tags;
        public InputMap<object>? Tags
        {
            get => _tags ?? (_tags = new InputMap<object>());
            set => _tags = value;
        }

        public BucketReplicationConfigurationRulesFilterArgs()
        {
        }
    }

    public class BucketReplicationConfigurationRulesSourceSelectionCriteriaArgs
    {
        [Input("sseKmsEncryptedObjects")]
        public Input<BucketReplicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjectsArgs>? SseKmsEncryptedObjects { get; set; }

        public BucketReplicationConfigurationRulesSourceSelectionCriteriaArgs()
        {
        }
    }

    public class BucketReplicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjectsArgs
    {
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        public BucketReplicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjectsArgs()
        {
        }
    }

    public class BucketServerSideEncryptionConfigurationArgs
    {
        [Input("rule", required: true)]
        public Input<BucketServerSideEncryptionConfigurationRuleArgs> Rule { get; set; } = null!;

        public BucketServerSideEncryptionConfigurationArgs()
        {
        }
    }

    public class BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs
    {
        [Input("kmsMasterKeyId")]
        public Input<string>? KmsMasterKeyId { get; set; }

        [Input("sseAlgorithm", required: true)]
        public Input<string> SseAlgorithm { get; set; } = null!;

        public BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs()
        {
        }
    }

    public class BucketServerSideEncryptionConfigurationRuleArgs
    {
        [Input("applyServerSideEncryptionByDefault", required: true)]
        public Input<BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs> ApplyServerSideEncryptionByDefault { get; set; } = null!;

        public BucketServerSideEncryptionConfigurationRuleArgs()
        {
        }
    }

    public class BucketVersioningArgs
    {
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("mfaDelete")]
        public Input<bool>? MfaDelete { get; set; }

        public BucketVersioningArgs()
        {
        }
    }

    public class BucketWebsiteArgs
    {
        [Input("errorDocument")]
        public Input<string>? ErrorDocument { get; set; }

        [Input("indexDocument")]
        public Input<string>? IndexDocument { get; set; }

        [Input("redirectAllRequestsTo")]
        public Input<string>? RedirectAllRequestsTo { get; set; }

        [Input("routingRules")]
        public Input<string>? RoutingRules { get; set; }

        public BucketWebsiteArgs()
        {
        }
    }

    [OutputType]
    public class BucketCorsRules
    {
        public readonly ImmutableArray<string>? AllowedHeaders;
        public readonly ImmutableArray<string> AllowedMethods;
        public readonly ImmutableArray<string> AllowedOrigins;
        public readonly ImmutableArray<string>? ExposeHeaders;
        public readonly int? MaxAgeSeconds;

        [OutputConstructor]
        private BucketCorsRules(
            ImmutableArray<string>? allowedHeaders,
            ImmutableArray<string> allowedMethods,
            ImmutableArray<string> allowedOrigins,
            ImmutableArray<string>? exposeHeaders,
            int? maxAgeSeconds)
        {
            AllowedHeaders = allowedHeaders;
            AllowedMethods = allowedMethods;
            AllowedOrigins = allowedOrigins;
            ExposeHeaders = exposeHeaders;
            MaxAgeSeconds = maxAgeSeconds;
        }
    }

    [OutputType]
    public class BucketLifecycleRules
    {
        public readonly int? AbortIncompleteMultipartUploadDays;
        public readonly bool Enabled;
        public readonly BucketLifecycleRulesExpiration? Expiration;
        public readonly string Id;
        public readonly BucketLifecycleRulesNoncurrentVersionExpiration? NoncurrentVersionExpiration;
        public readonly ImmutableArray<BucketLifecycleRulesNoncurrentVersionTransitions>? NoncurrentVersionTransitions;
        public readonly string? Prefix;
        public readonly ImmutableDictionary<string, object>? Tags;
        public readonly ImmutableArray<BucketLifecycleRulesTransitions>? Transitions;

        [OutputConstructor]
        private BucketLifecycleRules(
            int? abortIncompleteMultipartUploadDays,
            bool enabled,
            BucketLifecycleRulesExpiration? expiration,
            string id,
            BucketLifecycleRulesNoncurrentVersionExpiration? noncurrentVersionExpiration,
            ImmutableArray<BucketLifecycleRulesNoncurrentVersionTransitions>? noncurrentVersionTransitions,
            string? prefix,
            ImmutableDictionary<string, object>? tags,
            ImmutableArray<BucketLifecycleRulesTransitions>? transitions)
        {
            AbortIncompleteMultipartUploadDays = abortIncompleteMultipartUploadDays;
            Enabled = enabled;
            Expiration = expiration;
            Id = id;
            NoncurrentVersionExpiration = noncurrentVersionExpiration;
            NoncurrentVersionTransitions = noncurrentVersionTransitions;
            Prefix = prefix;
            Tags = tags;
            Transitions = transitions;
        }
    }

    [OutputType]
    public class BucketLifecycleRulesExpiration
    {
        public readonly string? Date;
        public readonly int? Days;
        public readonly bool? ExpiredObjectDeleteMarker;

        [OutputConstructor]
        private BucketLifecycleRulesExpiration(
            string? date,
            int? days,
            bool? expiredObjectDeleteMarker)
        {
            Date = date;
            Days = days;
            ExpiredObjectDeleteMarker = expiredObjectDeleteMarker;
        }
    }

    [OutputType]
    public class BucketLifecycleRulesNoncurrentVersionExpiration
    {
        public readonly int? Days;

        [OutputConstructor]
        private BucketLifecycleRulesNoncurrentVersionExpiration(
            int? days)
        {
            Days = days;
        }
    }

    [OutputType]
    public class BucketLifecycleRulesNoncurrentVersionTransitions
    {
        public readonly int? Days;
        public readonly string StorageClass;

        [OutputConstructor]
        private BucketLifecycleRulesNoncurrentVersionTransitions(
            int? days,
            string storageClass)
        {
            Days = days;
            StorageClass = storageClass;
        }
    }

    [OutputType]
    public class BucketLifecycleRulesTransitions
    {
        public readonly string? Date;
        public readonly int? Days;
        public readonly string StorageClass;

        [OutputConstructor]
        private BucketLifecycleRulesTransitions(
            string? date,
            int? days,
            string storageClass)
        {
            Date = date;
            Days = days;
            StorageClass = storageClass;
        }
    }

    [OutputType]
    public class BucketLoggings
    {
        public readonly string TargetBucket;
        public readonly string? TargetPrefix;

        [OutputConstructor]
        private BucketLoggings(
            string targetBucket,
            string? targetPrefix)
        {
            TargetBucket = targetBucket;
            TargetPrefix = targetPrefix;
        }
    }

    [OutputType]
    public class BucketObjectLockConfiguration
    {
        public readonly string ObjectLockEnabled;
        public readonly BucketObjectLockConfigurationRule? Rule;

        [OutputConstructor]
        private BucketObjectLockConfiguration(
            string objectLockEnabled,
            BucketObjectLockConfigurationRule? rule)
        {
            ObjectLockEnabled = objectLockEnabled;
            Rule = rule;
        }
    }

    [OutputType]
    public class BucketObjectLockConfigurationRule
    {
        public readonly BucketObjectLockConfigurationRuleDefaultRetention DefaultRetention;

        [OutputConstructor]
        private BucketObjectLockConfigurationRule(
            BucketObjectLockConfigurationRuleDefaultRetention defaultRetention)
        {
            DefaultRetention = defaultRetention;
        }
    }

    [OutputType]
    public class BucketObjectLockConfigurationRuleDefaultRetention
    {
        public readonly int? Days;
        public readonly string Mode;
        public readonly int? Years;

        [OutputConstructor]
        private BucketObjectLockConfigurationRuleDefaultRetention(
            int? days,
            string mode,
            int? years)
        {
            Days = days;
            Mode = mode;
            Years = years;
        }
    }

    [OutputType]
    public class BucketReplicationConfiguration
    {
        public readonly string Role;
        public readonly ImmutableArray<BucketReplicationConfigurationRules> Rules;

        [OutputConstructor]
        private BucketReplicationConfiguration(
            string role,
            ImmutableArray<BucketReplicationConfigurationRules> rules)
        {
            Role = role;
            Rules = rules;
        }
    }

    [OutputType]
    public class BucketReplicationConfigurationRules
    {
        public readonly BucketReplicationConfigurationRulesDestination Destination;
        public readonly BucketReplicationConfigurationRulesFilter? Filter;
        public readonly string? Id;
        public readonly string? Prefix;
        public readonly int? Priority;
        public readonly BucketReplicationConfigurationRulesSourceSelectionCriteria? SourceSelectionCriteria;
        public readonly string Status;

        [OutputConstructor]
        private BucketReplicationConfigurationRules(
            BucketReplicationConfigurationRulesDestination destination,
            BucketReplicationConfigurationRulesFilter? filter,
            string? id,
            string? prefix,
            int? priority,
            BucketReplicationConfigurationRulesSourceSelectionCriteria? sourceSelectionCriteria,
            string status)
        {
            Destination = destination;
            Filter = filter;
            Id = id;
            Prefix = prefix;
            Priority = priority;
            SourceSelectionCriteria = sourceSelectionCriteria;
            Status = status;
        }
    }

    [OutputType]
    public class BucketReplicationConfigurationRulesDestination
    {
        public readonly BucketReplicationConfigurationRulesDestinationAccessControlTranslation? AccessControlTranslation;
        public readonly string? AccountId;
        public readonly string Bucket;
        public readonly string? ReplicaKmsKeyId;
        public readonly string? StorageClass;

        [OutputConstructor]
        private BucketReplicationConfigurationRulesDestination(
            BucketReplicationConfigurationRulesDestinationAccessControlTranslation? accessControlTranslation,
            string? accountId,
            string bucket,
            string? replicaKmsKeyId,
            string? storageClass)
        {
            AccessControlTranslation = accessControlTranslation;
            AccountId = accountId;
            Bucket = bucket;
            ReplicaKmsKeyId = replicaKmsKeyId;
            StorageClass = storageClass;
        }
    }

    [OutputType]
    public class BucketReplicationConfigurationRulesDestinationAccessControlTranslation
    {
        public readonly string Owner;

        [OutputConstructor]
        private BucketReplicationConfigurationRulesDestinationAccessControlTranslation(
            string owner)
        {
            Owner = owner;
        }
    }

    [OutputType]
    public class BucketReplicationConfigurationRulesFilter
    {
        public readonly string? Prefix;
        public readonly ImmutableDictionary<string, object>? Tags;

        [OutputConstructor]
        private BucketReplicationConfigurationRulesFilter(
            string? prefix,
            ImmutableDictionary<string, object>? tags)
        {
            Prefix = prefix;
            Tags = tags;
        }
    }

    [OutputType]
    public class BucketReplicationConfigurationRulesSourceSelectionCriteria
    {
        public readonly BucketReplicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjects? SseKmsEncryptedObjects;

        [OutputConstructor]
        private BucketReplicationConfigurationRulesSourceSelectionCriteria(
            BucketReplicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjects? sseKmsEncryptedObjects)
        {
            SseKmsEncryptedObjects = sseKmsEncryptedObjects;
        }
    }

    [OutputType]
    public class BucketReplicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjects
    {
        public readonly bool Enabled;

        [OutputConstructor]
        private BucketReplicationConfigurationRulesSourceSelectionCriteriaSseKmsEncryptedObjects(
            bool enabled)
        {
            Enabled = enabled;
        }
    }

    [OutputType]
    public class BucketServerSideEncryptionConfiguration
    {
        public readonly BucketServerSideEncryptionConfigurationRule Rule;

        [OutputConstructor]
        private BucketServerSideEncryptionConfiguration(
            BucketServerSideEncryptionConfigurationRule rule)
        {
            Rule = rule;
        }
    }

    [OutputType]
    public class BucketServerSideEncryptionConfigurationRule
    {
        public readonly BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault ApplyServerSideEncryptionByDefault;

        [OutputConstructor]
        private BucketServerSideEncryptionConfigurationRule(
            BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault applyServerSideEncryptionByDefault)
        {
            ApplyServerSideEncryptionByDefault = applyServerSideEncryptionByDefault;
        }
    }

    [OutputType]
    public class BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault
    {
        public readonly string? KmsMasterKeyId;
        public readonly string SseAlgorithm;

        [OutputConstructor]
        private BucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault(
            string? kmsMasterKeyId,
            string sseAlgorithm)
        {
            KmsMasterKeyId = kmsMasterKeyId;
            SseAlgorithm = sseAlgorithm;
        }
    }

    [OutputType]
    public class BucketVersioning
    {
        public readonly bool? Enabled;
        public readonly bool? MfaDelete;

        [OutputConstructor]
        private BucketVersioning(
            bool? enabled,
            bool? mfaDelete)
        {
            Enabled = enabled;
            MfaDelete = mfaDelete;
        }
    }

    [OutputType]
    public class BucketWebsite
    {
        public readonly string? ErrorDocument;
        public readonly string? IndexDocument;
        public readonly string? RedirectAllRequestsTo;
        public readonly string? RoutingRules;

        [OutputConstructor]
        private BucketWebsite(
            string? errorDocument,
            string? indexDocument,
            string? redirectAllRequestsTo,
            string? routingRules)
        {
            ErrorDocument = errorDocument;
            IndexDocument = indexDocument;
            RedirectAllRequestsTo = redirectAllRequestsTo;
            RoutingRules = routingRules;
        }
    }
}
