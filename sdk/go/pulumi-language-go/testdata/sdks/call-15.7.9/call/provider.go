// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package call

import (
	"context"
	"reflect"

	"errors"
	"example.com/pulumi-call/sdk/go/v15/call/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `call` package's provider resource
type Provider struct {
	pulumi.ProviderResourceState

	Value pulumi.StringOutput `pulumi:"value"`
}

// NewProvider registers a new resource with the given unique name, arguments, and options.
func NewProvider(ctx *pulumi.Context,
	name string, args *ProviderArgs, opts ...pulumi.ResourceOption) (*Provider, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Provider
	err := ctx.RegisterResource("pulumi:providers:call", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type providerArgs struct {
	Value string `pulumi:"value"`
}

// The set of arguments for constructing a Provider resource.
type ProviderArgs struct {
	Value pulumi.StringInput
}

func (ProviderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerArgs)(nil)).Elem()
}

// The `identity` method of the `call` package's provider. Returns the provider's `value` configuration unaltered.
func (r *Provider) Identity(ctx *pulumi.Context) (ProviderIdentityResult, error) {
	out, err := ctx.Call("pulumi:providers:call/identity", nil, ProviderIdentityResultOutput{}, r)
}

type ProviderIdentityResult struct {
	Result string `pulumi:"result"`
}

type ProviderIdentityResultOutput struct{ *pulumi.OutputState }

func (ProviderIdentityResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderIdentityResult)(nil)).Elem()
}

func (o ProviderIdentityResultOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderIdentityResult) string { return v.Result }).(pulumi.StringOutput)
}

// The `prefixed` method of the `call` package's provider. Accepts a string and returns the provider's `value` configuration prefixed with that string.
func (r *Provider) Prefixed(ctx *pulumi.Context, args *ProviderPrefixedArgs) (ProviderPrefixedResult, error) {
	out, err := ctx.Call("pulumi:providers:call/prefixed", args, ProviderPrefixedResultOutput{}, r)
}

type providerPrefixedArgs struct {
	Prefix string `pulumi:"prefix"`
}

// The set of arguments for the Prefixed method of the Provider resource.
type ProviderPrefixedArgs struct {
	Prefix pulumi.StringInput
}

func (ProviderPrefixedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*providerPrefixedArgs)(nil)).Elem()
}

type ProviderPrefixedResult struct {
	Result string `pulumi:"result"`
}

type ProviderPrefixedResultOutput struct{ *pulumi.OutputState }

func (ProviderPrefixedResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderPrefixedResult)(nil)).Elem()
}

func (o ProviderPrefixedResultOutput) Result() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderPrefixedResult) string { return v.Result }).(pulumi.StringOutput)
}

type ProviderInput interface {
	pulumi.Input

	ToProviderOutput() ProviderOutput
	ToProviderOutputWithContext(ctx context.Context) ProviderOutput
}

func (*Provider) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (i *Provider) ToProviderOutput() ProviderOutput {
	return i.ToProviderOutputWithContext(context.Background())
}

func (i *Provider) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderOutput)
}

type ProviderOutput struct{ *pulumi.OutputState }

func (ProviderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Provider)(nil)).Elem()
}

func (o ProviderOutput) ToProviderOutput() ProviderOutput {
	return o
}

func (o ProviderOutput) ToProviderOutputWithContext(ctx context.Context) ProviderOutput {
	return o
}

func (o ProviderOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *Provider) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderInput)(nil)).Elem(), &Provider{})
	pulumi.RegisterOutputType(ProviderOutput{})
	pulumi.RegisterOutputType(ProviderIdentityResultOutput{})
	pulumi.RegisterOutputType(ProviderPrefixedResultOutput{})
}
