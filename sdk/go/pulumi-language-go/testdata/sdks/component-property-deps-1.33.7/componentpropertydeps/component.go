// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package componentpropertydeps

import (
	"context"
	"reflect"

	"errors"
	"example.com/pulumi-component-property-deps/sdk/go/componentpropertydeps/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A component resource that accepts a list of resources. The construct request's property dependencies are returned as an output.
type Component struct {
	pulumi.ResourceState

	PropertyDeps pulumi.StringArrayMapOutput `pulumi:"propertyDeps"`
}

// NewComponent registers a new resource with the given unique name, arguments, and options.
func NewComponent(ctx *pulumi.Context,
	name string, args *ComponentArgs, opts ...pulumi.ResourceOption) (*Component, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Resource == nil {
		return nil, errors.New("invalid value for required argument 'Resource'")
	}
	if args.ResourceList == nil {
		return nil, errors.New("invalid value for required argument 'ResourceList'")
	}
	if args.ResourceMap == nil {
		return nil, errors.New("invalid value for required argument 'ResourceMap'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Component
	err := ctx.RegisterRemoteComponentResource("component-property-deps:index:Component", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type componentArgs struct {
	Resource     *Custom            `pulumi:"resource"`
	ResourceList []*Custom          `pulumi:"resourceList"`
	ResourceMap  map[string]*Custom `pulumi:"resourceMap"`
}

// The set of arguments for constructing a Component resource.
type ComponentArgs struct {
	Resource     *Custom
	ResourceList []*Custom
	ResourceMap  map[string]*Custom
}

func (ComponentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*componentArgs)(nil)).Elem()
}

// The `refs` method of the `Component` component resource. Returns the call request's property dependencies.
func (r *Component) Refs(ctx *pulumi.Context, args *ComponentRefsArgs) (ComponentRefsResult, error) {
	out, err := ctx.Call("component-property-deps:index:Component/refs", args, ComponentRefsResultOutput{}, r)
}

type componentRefsArgs struct {
	Resource     *Custom            `pulumi:"resource"`
	ResourceList []*Custom          `pulumi:"resourceList"`
	ResourceMap  map[string]*Custom `pulumi:"resourceMap"`
}

// The set of arguments for the Refs method of the Component resource.
type ComponentRefsArgs struct {
	Resource     *Custom
	ResourceList []CustomInput
	ResourceMap  map[string]CustomInput
}

func (ComponentRefsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*componentRefsArgs)(nil)).Elem()
}

type ComponentRefsResult struct {
	Result map[string][]string `pulumi:"result"`
}

type ComponentRefsResultOutput struct{ *pulumi.OutputState }

func (ComponentRefsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ComponentRefsResult)(nil)).Elem()
}

func (o ComponentRefsResultOutput) Result() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v ComponentRefsResult) map[string][]string { return v.Result }).(pulumi.StringArrayMapOutput)
}

type ComponentInput interface {
	pulumi.Input

	ToComponentOutput() ComponentOutput
	ToComponentOutputWithContext(ctx context.Context) ComponentOutput
}

func (*Component) ElementType() reflect.Type {
	return reflect.TypeOf((**Component)(nil)).Elem()
}

func (i *Component) ToComponentOutput() ComponentOutput {
	return i.ToComponentOutputWithContext(context.Background())
}

func (i *Component) ToComponentOutputWithContext(ctx context.Context) ComponentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComponentOutput)
}

type ComponentOutput struct{ *pulumi.OutputState }

func (ComponentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Component)(nil)).Elem()
}

func (o ComponentOutput) ToComponentOutput() ComponentOutput {
	return o
}

func (o ComponentOutput) ToComponentOutputWithContext(ctx context.Context) ComponentOutput {
	return o
}

func (o ComponentOutput) PropertyDeps() pulumi.StringArrayMapOutput {
	return o.ApplyT(func(v *Component) pulumi.StringArrayMapOutput { return v.PropertyDeps }).(pulumi.StringArrayMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComponentInput)(nil)).Elem(), &Component{})
	pulumi.RegisterOutputType(ComponentOutput{})
	pulumi.RegisterOutputType(ComponentRefsResultOutput{})
}
