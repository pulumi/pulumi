// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package primitive

import (
	"context"
	"reflect"

	"errors"
	"example.com/pulumi-primitive/sdk/go/v7/primitive/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Resource struct {
	pulumi.CustomResourceState

	Boolean     pulumi.BoolOutput         `pulumi:"boolean"`
	BooleanMap  pulumi.BoolMapOutput      `pulumi:"booleanMap"`
	Float       pulumi.Float64Output      `pulumi:"float"`
	Integer     pulumi.IntOutput          `pulumi:"integer"`
	NumberArray pulumi.Float64ArrayOutput `pulumi:"numberArray"`
	String      pulumi.StringOutput       `pulumi:"string"`
}

// NewResource registers a new resource with the given unique name, arguments, and options.
func NewResource(ctx *pulumi.Context,
	name string, args *ResourceArgs, opts ...pulumi.ResourceOption) (*Resource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Boolean == nil {
		return nil, errors.New("invalid value for required argument 'Boolean'")
	}
	if args.BooleanMap == nil {
		return nil, errors.New("invalid value for required argument 'BooleanMap'")
	}
	if args.Float == nil {
		return nil, errors.New("invalid value for required argument 'Float'")
	}
	if args.Integer == nil {
		return nil, errors.New("invalid value for required argument 'Integer'")
	}
	if args.NumberArray == nil {
		return nil, errors.New("invalid value for required argument 'NumberArray'")
	}
	if args.String == nil {
		return nil, errors.New("invalid value for required argument 'String'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Resource
	err := ctx.RegisterResource("primitive:index:Resource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResource gets an existing Resource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourceState, opts ...pulumi.ResourceOption) (*Resource, error) {
	var resource Resource
	err := ctx.ReadResource("primitive:index:Resource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Resource resources.
type resourceState struct {
}

type ResourceState struct {
}

func (ResourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceState)(nil)).Elem()
}

type resourceArgs struct {
	Boolean     bool            `pulumi:"boolean"`
	BooleanMap  map[string]bool `pulumi:"booleanMap"`
	Float       float64         `pulumi:"float"`
	Integer     int             `pulumi:"integer"`
	NumberArray []float64       `pulumi:"numberArray"`
	String      string          `pulumi:"string"`
}

// The set of arguments for constructing a Resource resource.
type ResourceArgs struct {
	Boolean     pulumi.BoolInput
	BooleanMap  pulumi.BoolMapInput
	Float       pulumi.Float64Input
	Integer     pulumi.IntInput
	NumberArray pulumi.Float64ArrayInput
	String      pulumi.StringInput
}

func (ResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourceArgs)(nil)).Elem()
}

type ResourceInput interface {
	pulumi.Input

	ToResourceOutput() ResourceOutput
	ToResourceOutputWithContext(ctx context.Context) ResourceOutput
}

func (*Resource) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (i *Resource) ToResourceOutput() ResourceOutput {
	return i.ToResourceOutputWithContext(context.Background())
}

func (i *Resource) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourceOutput)
}

type ResourceOutput struct{ *pulumi.OutputState }

func (ResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Resource)(nil)).Elem()
}

func (o ResourceOutput) ToResourceOutput() ResourceOutput {
	return o
}

func (o ResourceOutput) ToResourceOutputWithContext(ctx context.Context) ResourceOutput {
	return o
}

func (o ResourceOutput) Boolean() pulumi.BoolOutput {
	return o.ApplyT(func(v *Resource) pulumi.BoolOutput { return v.Boolean }).(pulumi.BoolOutput)
}

func (o ResourceOutput) BooleanMap() pulumi.BoolMapOutput {
	return o.ApplyT(func(v *Resource) pulumi.BoolMapOutput { return v.BooleanMap }).(pulumi.BoolMapOutput)
}

func (o ResourceOutput) Float() pulumi.Float64Output {
	return o.ApplyT(func(v *Resource) pulumi.Float64Output { return v.Float }).(pulumi.Float64Output)
}

func (o ResourceOutput) Integer() pulumi.IntOutput {
	return o.ApplyT(func(v *Resource) pulumi.IntOutput { return v.Integer }).(pulumi.IntOutput)
}

func (o ResourceOutput) NumberArray() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v *Resource) pulumi.Float64ArrayOutput { return v.NumberArray }).(pulumi.Float64ArrayOutput)
}

func (o ResourceOutput) String() pulumi.StringOutput {
	return o.ApplyT(func(v *Resource) pulumi.StringOutput { return v.String }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourceInput)(nil)).Elem(), &Resource{})
	pulumi.RegisterOutputType(ResourceOutput{})
}
