// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package simpleinvokewithscalarreturn

import (
	"reflect"

	"example.com/pulumi-simple-invoke-with-scalar-return/sdk/go/v17/simpleinvokewithscalarreturn/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func MyInvokeScalar(ctx *pulumi.Context, args *MyInvokeScalarArgs, opts ...pulumi.InvokeOption) (bool, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv map[string]any
	err := ctx.Invoke("simple-invoke-with-scalar-return:index:myInvokeScalar", args, &rv, opts...)
	var result bool
	if err != nil {
		return result, err
	}
	for _, v := range rv {
		result = v.(bool)
		break
	}
	return result, nil
}

type MyInvokeScalarArgs struct {
	Value string `pulumi:"value"`
}

func MyInvokeScalarOutput(ctx *pulumi.Context, args MyInvokeScalarOutputArgs, opts ...pulumi.InvokeOption) pulumi.BoolOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (pulumi.BoolOutput, error) {
			args := v.(MyInvokeScalarArgs)
			options := internal.PkgInvokeDefaultOpts(opts)
			var rv map[string]any
			err := ctx.Invoke("simple-invoke-with-scalar-return:index:myInvokeScalar", args, &rv, options...)
			var result pulumi.Bool
			if err != nil {
				return result.ToBoolOutput(), nil
			}
			for _, v := range rv {
				result = pulumi.Bool(v.(bool))
				break
			}
			return result.ToBoolOutput(), nil
		}).(pulumi.BoolOutput)
}

type MyInvokeScalarOutputArgs struct {
	Value pulumi.StringInput `pulumi:"value"`
}

func (MyInvokeScalarOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MyInvokeScalarArgs)(nil)).Elem()
}
