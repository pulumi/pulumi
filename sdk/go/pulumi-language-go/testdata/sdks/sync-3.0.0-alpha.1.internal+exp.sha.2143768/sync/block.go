// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sync

import (
	"context"
	"reflect"

	"example.com/pulumi-sync/sdk/go/v3/sync/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Block struct {
	pulumi.CustomResourceState
}

// NewBlock registers a new resource with the given unique name, arguments, and options.
func NewBlock(ctx *pulumi.Context,
	name string, args *BlockArgs, opts ...pulumi.ResourceOption) (*Block, error) {
	if args == nil {
		args = &BlockArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Block
	err := ctx.RegisterResource("sync:index:Block", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlock gets an existing Block resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlock(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlockState, opts ...pulumi.ResourceOption) (*Block, error) {
	var resource Block
	err := ctx.ReadResource("sync:index:Block", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Block resources.
type blockState struct {
}

type BlockState struct {
}

func (BlockState) ElementType() reflect.Type {
	return reflect.TypeOf((*blockState)(nil)).Elem()
}

type blockArgs struct {
}

// The set of arguments for constructing a Block resource.
type BlockArgs struct {
}

func (BlockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blockArgs)(nil)).Elem()
}

type BlockInput interface {
	pulumi.Input

	ToBlockOutput() BlockOutput
	ToBlockOutputWithContext(ctx context.Context) BlockOutput
}

func (*Block) ElementType() reflect.Type {
	return reflect.TypeOf((**Block)(nil)).Elem()
}

func (i *Block) ToBlockOutput() BlockOutput {
	return i.ToBlockOutputWithContext(context.Background())
}

func (i *Block) ToBlockOutputWithContext(ctx context.Context) BlockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockOutput)
}

type BlockOutput struct{ *pulumi.OutputState }

func (BlockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Block)(nil)).Elem()
}

func (o BlockOutput) ToBlockOutput() BlockOutput {
	return o
}

func (o BlockOutput) ToBlockOutputWithContext(ctx context.Context) BlockOutput {
	return o
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BlockInput)(nil)).Elem(), &Block{})
	pulumi.RegisterOutputType(BlockOutput{})
}
