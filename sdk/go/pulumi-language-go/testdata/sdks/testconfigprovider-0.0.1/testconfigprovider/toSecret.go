// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package testconfigprovider

import (
	"context"
	"reflect"

	"example.com/pulumi-testconfigprovider/sdk/go/testconfigprovider/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func ToSecret(ctx *pulumi.Context, args *ToSecretArgs, opts ...pulumi.InvokeOption) (*ToSecretResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ToSecretResult
	err := ctx.Invoke("testconfigprovider:index:toSecret", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ToSecretArgs struct {
	B  *bool              `pulumi:"b"`
	I  *int               `pulumi:"i"`
	Lb []bool             `pulumi:"lb"`
	Li []int              `pulumi:"li"`
	Ln []float64          `pulumi:"ln"`
	Ls []string           `pulumi:"ls"`
	Mb map[string]bool    `pulumi:"mb"`
	Mi map[string]int     `pulumi:"mi"`
	Mn map[string]float64 `pulumi:"mn"`
	Ms map[string]string  `pulumi:"ms"`
	N  *float64           `pulumi:"n"`
	Ob *Tb                `pulumi:"ob"`
	Oi *Ti                `pulumi:"oi"`
	On *Tn                `pulumi:"on"`
	Os *Ts                `pulumi:"os"`
	S  *string            `pulumi:"s"`
}

type ToSecretResult struct {
	B  bool               `pulumi:"b"`
	I  int                `pulumi:"i"`
	Lb []bool             `pulumi:"lb"`
	Li []int              `pulumi:"li"`
	Ln []float64          `pulumi:"ln"`
	Ls []string           `pulumi:"ls"`
	Mb map[string]bool    `pulumi:"mb"`
	Mi map[string]int     `pulumi:"mi"`
	Mn map[string]float64 `pulumi:"mn"`
	Ms map[string]string  `pulumi:"ms"`
	N  float64            `pulumi:"n"`
	Ob Tb                 `pulumi:"ob"`
	Oi Ti                 `pulumi:"oi"`
	On Tn                 `pulumi:"on"`
	Os Ts                 `pulumi:"os"`
	S  string             `pulumi:"s"`
}

func ToSecretOutput(ctx *pulumi.Context, args ToSecretOutputArgs, opts ...pulumi.InvokeOption) ToSecretResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ToSecretResultOutput, error) {
			args := v.(ToSecretArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv ToSecretResult
			secret, err := ctx.InvokePackageRaw("testconfigprovider:index:toSecret", args, &rv, "", opts...)
			if err != nil {
				return ToSecretResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(ToSecretResultOutput)
			if secret {
				return pulumi.ToSecret(output).(ToSecretResultOutput), nil
			}
			return output, nil
		}).(ToSecretResultOutput)
}

type ToSecretOutputArgs struct {
	B  pulumi.BoolPtrInput      `pulumi:"b"`
	I  pulumi.IntPtrInput       `pulumi:"i"`
	Lb pulumi.BoolArrayInput    `pulumi:"lb"`
	Li pulumi.IntArrayInput     `pulumi:"li"`
	Ln pulumi.Float64ArrayInput `pulumi:"ln"`
	Ls pulumi.StringArrayInput  `pulumi:"ls"`
	Mb pulumi.BoolMapInput      `pulumi:"mb"`
	Mi pulumi.IntMapInput       `pulumi:"mi"`
	Mn pulumi.Float64MapInput   `pulumi:"mn"`
	Ms pulumi.StringMapInput    `pulumi:"ms"`
	N  pulumi.Float64PtrInput   `pulumi:"n"`
	Ob TbPtrInput               `pulumi:"ob"`
	Oi TiPtrInput               `pulumi:"oi"`
	On TnPtrInput               `pulumi:"on"`
	Os TsPtrInput               `pulumi:"os"`
	S  pulumi.StringPtrInput    `pulumi:"s"`
}

func (ToSecretOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ToSecretArgs)(nil)).Elem()
}

type ToSecretResultOutput struct{ *pulumi.OutputState }

func (ToSecretResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ToSecretResult)(nil)).Elem()
}

func (o ToSecretResultOutput) ToToSecretResultOutput() ToSecretResultOutput {
	return o
}

func (o ToSecretResultOutput) ToToSecretResultOutputWithContext(ctx context.Context) ToSecretResultOutput {
	return o
}

func (o ToSecretResultOutput) B() pulumi.BoolOutput {
	return o.ApplyT(func(v ToSecretResult) bool { return v.B }).(pulumi.BoolOutput)
}

func (o ToSecretResultOutput) I() pulumi.IntOutput {
	return o.ApplyT(func(v ToSecretResult) int { return v.I }).(pulumi.IntOutput)
}

func (o ToSecretResultOutput) Lb() pulumi.BoolArrayOutput {
	return o.ApplyT(func(v ToSecretResult) []bool { return v.Lb }).(pulumi.BoolArrayOutput)
}

func (o ToSecretResultOutput) Li() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ToSecretResult) []int { return v.Li }).(pulumi.IntArrayOutput)
}

func (o ToSecretResultOutput) Ln() pulumi.Float64ArrayOutput {
	return o.ApplyT(func(v ToSecretResult) []float64 { return v.Ln }).(pulumi.Float64ArrayOutput)
}

func (o ToSecretResultOutput) Ls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ToSecretResult) []string { return v.Ls }).(pulumi.StringArrayOutput)
}

func (o ToSecretResultOutput) Mb() pulumi.BoolMapOutput {
	return o.ApplyT(func(v ToSecretResult) map[string]bool { return v.Mb }).(pulumi.BoolMapOutput)
}

func (o ToSecretResultOutput) Mi() pulumi.IntMapOutput {
	return o.ApplyT(func(v ToSecretResult) map[string]int { return v.Mi }).(pulumi.IntMapOutput)
}

func (o ToSecretResultOutput) Mn() pulumi.Float64MapOutput {
	return o.ApplyT(func(v ToSecretResult) map[string]float64 { return v.Mn }).(pulumi.Float64MapOutput)
}

func (o ToSecretResultOutput) Ms() pulumi.StringMapOutput {
	return o.ApplyT(func(v ToSecretResult) map[string]string { return v.Ms }).(pulumi.StringMapOutput)
}

func (o ToSecretResultOutput) N() pulumi.Float64Output {
	return o.ApplyT(func(v ToSecretResult) float64 { return v.N }).(pulumi.Float64Output)
}

func (o ToSecretResultOutput) Ob() TbOutput {
	return o.ApplyT(func(v ToSecretResult) Tb { return v.Ob }).(TbOutput)
}

func (o ToSecretResultOutput) Oi() TiOutput {
	return o.ApplyT(func(v ToSecretResult) Ti { return v.Oi }).(TiOutput)
}

func (o ToSecretResultOutput) On() TnOutput {
	return o.ApplyT(func(v ToSecretResult) Tn { return v.On }).(TnOutput)
}

func (o ToSecretResultOutput) Os() TsOutput {
	return o.ApplyT(func(v ToSecretResult) Ts { return v.Os }).(TsOutput)
}

func (o ToSecretResultOutput) S() pulumi.StringOutput {
	return o.ApplyT(func(v ToSecretResult) string { return v.S }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(ToSecretResultOutput{})
}
