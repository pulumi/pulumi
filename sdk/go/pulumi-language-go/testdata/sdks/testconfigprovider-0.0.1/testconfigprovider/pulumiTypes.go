// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package testconfigprovider

import (
	"context"
	"reflect"

	"example.com/pulumi-testconfigprovider/sdk/go/testconfigprovider/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type Tb struct {
	X *bool `pulumi:"x"`
}

// TbInput is an input type that accepts TbArgs and TbOutput values.
// You can construct a concrete instance of `TbInput` via:
//
//	TbArgs{...}
type TbInput interface {
	pulumi.Input

	ToTbOutput() TbOutput
	ToTbOutputWithContext(context.Context) TbOutput
}

type TbArgs struct {
	X pulumi.BoolPtrInput `pulumi:"x"`
}

func (TbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Tb)(nil)).Elem()
}

func (i TbArgs) ToTbOutput() TbOutput {
	return i.ToTbOutputWithContext(context.Background())
}

func (i TbArgs) ToTbOutputWithContext(ctx context.Context) TbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TbOutput)
}

func (i TbArgs) ToTbPtrOutput() TbPtrOutput {
	return i.ToTbPtrOutputWithContext(context.Background())
}

func (i TbArgs) ToTbPtrOutputWithContext(ctx context.Context) TbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TbOutput).ToTbPtrOutputWithContext(ctx)
}

// TbPtrInput is an input type that accepts TbArgs, TbPtr and TbPtrOutput values.
// You can construct a concrete instance of `TbPtrInput` via:
//
//	        TbArgs{...}
//
//	or:
//
//	        nil
type TbPtrInput interface {
	pulumi.Input

	ToTbPtrOutput() TbPtrOutput
	ToTbPtrOutputWithContext(context.Context) TbPtrOutput
}

type tbPtrType TbArgs

func TbPtr(v *TbArgs) TbPtrInput {
	return (*tbPtrType)(v)
}

func (*tbPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Tb)(nil)).Elem()
}

func (i *tbPtrType) ToTbPtrOutput() TbPtrOutput {
	return i.ToTbPtrOutputWithContext(context.Background())
}

func (i *tbPtrType) ToTbPtrOutputWithContext(ctx context.Context) TbPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TbPtrOutput)
}

type TbOutput struct{ *pulumi.OutputState }

func (TbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Tb)(nil)).Elem()
}

func (o TbOutput) ToTbOutput() TbOutput {
	return o
}

func (o TbOutput) ToTbOutputWithContext(ctx context.Context) TbOutput {
	return o
}

func (o TbOutput) ToTbPtrOutput() TbPtrOutput {
	return o.ToTbPtrOutputWithContext(context.Background())
}

func (o TbOutput) ToTbPtrOutputWithContext(ctx context.Context) TbPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Tb) *Tb {
		return &v
	}).(TbPtrOutput)
}

func (o TbOutput) X() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Tb) *bool { return v.X }).(pulumi.BoolPtrOutput)
}

type TbPtrOutput struct{ *pulumi.OutputState }

func (TbPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tb)(nil)).Elem()
}

func (o TbPtrOutput) ToTbPtrOutput() TbPtrOutput {
	return o
}

func (o TbPtrOutput) ToTbPtrOutputWithContext(ctx context.Context) TbPtrOutput {
	return o
}

func (o TbPtrOutput) Elem() TbOutput {
	return o.ApplyT(func(v *Tb) Tb {
		if v != nil {
			return *v
		}
		var ret Tb
		return ret
	}).(TbOutput)
}

func (o TbPtrOutput) X() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tb) *bool {
		if v == nil {
			return nil
		}
		return v.X
	}).(pulumi.BoolPtrOutput)
}

type Tb1 struct {
	X *bool `pulumi:"x"`
}

// Tb1Input is an input type that accepts Tb1Args and Tb1Output values.
// You can construct a concrete instance of `Tb1Input` via:
//
//	Tb1Args{...}
type Tb1Input interface {
	pulumi.Input

	ToTb1Output() Tb1Output
	ToTb1OutputWithContext(context.Context) Tb1Output
}

type Tb1Args struct {
	X pulumi.BoolPtrInput `pulumi:"x"`
}

func (Tb1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*Tb1)(nil)).Elem()
}

func (i Tb1Args) ToTb1Output() Tb1Output {
	return i.ToTb1OutputWithContext(context.Background())
}

func (i Tb1Args) ToTb1OutputWithContext(ctx context.Context) Tb1Output {
	return pulumi.ToOutputWithContext(ctx, i).(Tb1Output)
}

func (i Tb1Args) ToTb1PtrOutput() Tb1PtrOutput {
	return i.ToTb1PtrOutputWithContext(context.Background())
}

func (i Tb1Args) ToTb1PtrOutputWithContext(ctx context.Context) Tb1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Tb1Output).ToTb1PtrOutputWithContext(ctx)
}

// Tb1PtrInput is an input type that accepts Tb1Args, Tb1Ptr and Tb1PtrOutput values.
// You can construct a concrete instance of `Tb1PtrInput` via:
//
//	        Tb1Args{...}
//
//	or:
//
//	        nil
type Tb1PtrInput interface {
	pulumi.Input

	ToTb1PtrOutput() Tb1PtrOutput
	ToTb1PtrOutputWithContext(context.Context) Tb1PtrOutput
}

type tb1PtrType Tb1Args

func Tb1Ptr(v *Tb1Args) Tb1PtrInput {
	return (*tb1PtrType)(v)
}

func (*tb1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Tb1)(nil)).Elem()
}

func (i *tb1PtrType) ToTb1PtrOutput() Tb1PtrOutput {
	return i.ToTb1PtrOutputWithContext(context.Background())
}

func (i *tb1PtrType) ToTb1PtrOutputWithContext(ctx context.Context) Tb1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Tb1PtrOutput)
}

type Tb1Output struct{ *pulumi.OutputState }

func (Tb1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*Tb1)(nil)).Elem()
}

func (o Tb1Output) ToTb1Output() Tb1Output {
	return o
}

func (o Tb1Output) ToTb1OutputWithContext(ctx context.Context) Tb1Output {
	return o
}

func (o Tb1Output) ToTb1PtrOutput() Tb1PtrOutput {
	return o.ToTb1PtrOutputWithContext(context.Background())
}

func (o Tb1Output) ToTb1PtrOutputWithContext(ctx context.Context) Tb1PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Tb1) *Tb1 {
		return &v
	}).(Tb1PtrOutput)
}

func (o Tb1Output) X() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Tb1) *bool { return v.X }).(pulumi.BoolPtrOutput)
}

type Tb1PtrOutput struct{ *pulumi.OutputState }

func (Tb1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tb1)(nil)).Elem()
}

func (o Tb1PtrOutput) ToTb1PtrOutput() Tb1PtrOutput {
	return o
}

func (o Tb1PtrOutput) ToTb1PtrOutputWithContext(ctx context.Context) Tb1PtrOutput {
	return o
}

func (o Tb1PtrOutput) Elem() Tb1Output {
	return o.ApplyT(func(v *Tb1) Tb1 {
		if v != nil {
			return *v
		}
		var ret Tb1
		return ret
	}).(Tb1Output)
}

func (o Tb1PtrOutput) X() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tb1) *bool {
		if v == nil {
			return nil
		}
		return v.X
	}).(pulumi.BoolPtrOutput)
}

type Tb2 struct {
	X *bool `pulumi:"x"`
}

// Tb2Input is an input type that accepts Tb2Args and Tb2Output values.
// You can construct a concrete instance of `Tb2Input` via:
//
//	Tb2Args{...}
type Tb2Input interface {
	pulumi.Input

	ToTb2Output() Tb2Output
	ToTb2OutputWithContext(context.Context) Tb2Output
}

type Tb2Args struct {
	X pulumi.BoolPtrInput `pulumi:"x"`
}

func (Tb2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*Tb2)(nil)).Elem()
}

func (i Tb2Args) ToTb2Output() Tb2Output {
	return i.ToTb2OutputWithContext(context.Background())
}

func (i Tb2Args) ToTb2OutputWithContext(ctx context.Context) Tb2Output {
	return pulumi.ToOutputWithContext(ctx, i).(Tb2Output)
}

func (i Tb2Args) ToTb2PtrOutput() Tb2PtrOutput {
	return i.ToTb2PtrOutputWithContext(context.Background())
}

func (i Tb2Args) ToTb2PtrOutputWithContext(ctx context.Context) Tb2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Tb2Output).ToTb2PtrOutputWithContext(ctx)
}

// Tb2PtrInput is an input type that accepts Tb2Args, Tb2Ptr and Tb2PtrOutput values.
// You can construct a concrete instance of `Tb2PtrInput` via:
//
//	        Tb2Args{...}
//
//	or:
//
//	        nil
type Tb2PtrInput interface {
	pulumi.Input

	ToTb2PtrOutput() Tb2PtrOutput
	ToTb2PtrOutputWithContext(context.Context) Tb2PtrOutput
}

type tb2PtrType Tb2Args

func Tb2Ptr(v *Tb2Args) Tb2PtrInput {
	return (*tb2PtrType)(v)
}

func (*tb2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Tb2)(nil)).Elem()
}

func (i *tb2PtrType) ToTb2PtrOutput() Tb2PtrOutput {
	return i.ToTb2PtrOutputWithContext(context.Background())
}

func (i *tb2PtrType) ToTb2PtrOutputWithContext(ctx context.Context) Tb2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Tb2PtrOutput)
}

type Tb2Output struct{ *pulumi.OutputState }

func (Tb2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*Tb2)(nil)).Elem()
}

func (o Tb2Output) ToTb2Output() Tb2Output {
	return o
}

func (o Tb2Output) ToTb2OutputWithContext(ctx context.Context) Tb2Output {
	return o
}

func (o Tb2Output) ToTb2PtrOutput() Tb2PtrOutput {
	return o.ToTb2PtrOutputWithContext(context.Background())
}

func (o Tb2Output) ToTb2PtrOutputWithContext(ctx context.Context) Tb2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Tb2) *Tb2 {
		return &v
	}).(Tb2PtrOutput)
}

func (o Tb2Output) X() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Tb2) *bool { return v.X }).(pulumi.BoolPtrOutput)
}

type Tb2PtrOutput struct{ *pulumi.OutputState }

func (Tb2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tb2)(nil)).Elem()
}

func (o Tb2PtrOutput) ToTb2PtrOutput() Tb2PtrOutput {
	return o
}

func (o Tb2PtrOutput) ToTb2PtrOutputWithContext(ctx context.Context) Tb2PtrOutput {
	return o
}

func (o Tb2PtrOutput) Elem() Tb2Output {
	return o.ApplyT(func(v *Tb2) Tb2 {
		if v != nil {
			return *v
		}
		var ret Tb2
		return ret
	}).(Tb2Output)
}

func (o Tb2PtrOutput) X() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tb2) *bool {
		if v == nil {
			return nil
		}
		return v.X
	}).(pulumi.BoolPtrOutput)
}

type Tb3 struct {
	X *bool `pulumi:"x"`
}

// Tb3Input is an input type that accepts Tb3Args and Tb3Output values.
// You can construct a concrete instance of `Tb3Input` via:
//
//	Tb3Args{...}
type Tb3Input interface {
	pulumi.Input

	ToTb3Output() Tb3Output
	ToTb3OutputWithContext(context.Context) Tb3Output
}

type Tb3Args struct {
	X pulumi.BoolPtrInput `pulumi:"x"`
}

func (Tb3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*Tb3)(nil)).Elem()
}

func (i Tb3Args) ToTb3Output() Tb3Output {
	return i.ToTb3OutputWithContext(context.Background())
}

func (i Tb3Args) ToTb3OutputWithContext(ctx context.Context) Tb3Output {
	return pulumi.ToOutputWithContext(ctx, i).(Tb3Output)
}

func (i Tb3Args) ToTb3PtrOutput() Tb3PtrOutput {
	return i.ToTb3PtrOutputWithContext(context.Background())
}

func (i Tb3Args) ToTb3PtrOutputWithContext(ctx context.Context) Tb3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Tb3Output).ToTb3PtrOutputWithContext(ctx)
}

// Tb3PtrInput is an input type that accepts Tb3Args, Tb3Ptr and Tb3PtrOutput values.
// You can construct a concrete instance of `Tb3PtrInput` via:
//
//	        Tb3Args{...}
//
//	or:
//
//	        nil
type Tb3PtrInput interface {
	pulumi.Input

	ToTb3PtrOutput() Tb3PtrOutput
	ToTb3PtrOutputWithContext(context.Context) Tb3PtrOutput
}

type tb3PtrType Tb3Args

func Tb3Ptr(v *Tb3Args) Tb3PtrInput {
	return (*tb3PtrType)(v)
}

func (*tb3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Tb3)(nil)).Elem()
}

func (i *tb3PtrType) ToTb3PtrOutput() Tb3PtrOutput {
	return i.ToTb3PtrOutputWithContext(context.Background())
}

func (i *tb3PtrType) ToTb3PtrOutputWithContext(ctx context.Context) Tb3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Tb3PtrOutput)
}

type Tb3Output struct{ *pulumi.OutputState }

func (Tb3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*Tb3)(nil)).Elem()
}

func (o Tb3Output) ToTb3Output() Tb3Output {
	return o
}

func (o Tb3Output) ToTb3OutputWithContext(ctx context.Context) Tb3Output {
	return o
}

func (o Tb3Output) ToTb3PtrOutput() Tb3PtrOutput {
	return o.ToTb3PtrOutputWithContext(context.Background())
}

func (o Tb3Output) ToTb3PtrOutputWithContext(ctx context.Context) Tb3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Tb3) *Tb3 {
		return &v
	}).(Tb3PtrOutput)
}

func (o Tb3Output) X() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v Tb3) *bool { return v.X }).(pulumi.BoolPtrOutput)
}

type Tb3PtrOutput struct{ *pulumi.OutputState }

func (Tb3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tb3)(nil)).Elem()
}

func (o Tb3PtrOutput) ToTb3PtrOutput() Tb3PtrOutput {
	return o
}

func (o Tb3PtrOutput) ToTb3PtrOutputWithContext(ctx context.Context) Tb3PtrOutput {
	return o
}

func (o Tb3PtrOutput) Elem() Tb3Output {
	return o.ApplyT(func(v *Tb3) Tb3 {
		if v != nil {
			return *v
		}
		var ret Tb3
		return ret
	}).(Tb3Output)
}

func (o Tb3PtrOutput) X() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Tb3) *bool {
		if v == nil {
			return nil
		}
		return v.X
	}).(pulumi.BoolPtrOutput)
}

type Ti struct {
	X *int `pulumi:"x"`
}

// TiInput is an input type that accepts TiArgs and TiOutput values.
// You can construct a concrete instance of `TiInput` via:
//
//	TiArgs{...}
type TiInput interface {
	pulumi.Input

	ToTiOutput() TiOutput
	ToTiOutputWithContext(context.Context) TiOutput
}

type TiArgs struct {
	X pulumi.IntPtrInput `pulumi:"x"`
}

func (TiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Ti)(nil)).Elem()
}

func (i TiArgs) ToTiOutput() TiOutput {
	return i.ToTiOutputWithContext(context.Background())
}

func (i TiArgs) ToTiOutputWithContext(ctx context.Context) TiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TiOutput)
}

func (i TiArgs) ToTiPtrOutput() TiPtrOutput {
	return i.ToTiPtrOutputWithContext(context.Background())
}

func (i TiArgs) ToTiPtrOutputWithContext(ctx context.Context) TiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TiOutput).ToTiPtrOutputWithContext(ctx)
}

// TiPtrInput is an input type that accepts TiArgs, TiPtr and TiPtrOutput values.
// You can construct a concrete instance of `TiPtrInput` via:
//
//	        TiArgs{...}
//
//	or:
//
//	        nil
type TiPtrInput interface {
	pulumi.Input

	ToTiPtrOutput() TiPtrOutput
	ToTiPtrOutputWithContext(context.Context) TiPtrOutput
}

type tiPtrType TiArgs

func TiPtr(v *TiArgs) TiPtrInput {
	return (*tiPtrType)(v)
}

func (*tiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Ti)(nil)).Elem()
}

func (i *tiPtrType) ToTiPtrOutput() TiPtrOutput {
	return i.ToTiPtrOutputWithContext(context.Background())
}

func (i *tiPtrType) ToTiPtrOutputWithContext(ctx context.Context) TiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TiPtrOutput)
}

type TiOutput struct{ *pulumi.OutputState }

func (TiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Ti)(nil)).Elem()
}

func (o TiOutput) ToTiOutput() TiOutput {
	return o
}

func (o TiOutput) ToTiOutputWithContext(ctx context.Context) TiOutput {
	return o
}

func (o TiOutput) ToTiPtrOutput() TiPtrOutput {
	return o.ToTiPtrOutputWithContext(context.Background())
}

func (o TiOutput) ToTiPtrOutputWithContext(ctx context.Context) TiPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Ti) *Ti {
		return &v
	}).(TiPtrOutput)
}

func (o TiOutput) X() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Ti) *int { return v.X }).(pulumi.IntPtrOutput)
}

type TiPtrOutput struct{ *pulumi.OutputState }

func (TiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ti)(nil)).Elem()
}

func (o TiPtrOutput) ToTiPtrOutput() TiPtrOutput {
	return o
}

func (o TiPtrOutput) ToTiPtrOutputWithContext(ctx context.Context) TiPtrOutput {
	return o
}

func (o TiPtrOutput) Elem() TiOutput {
	return o.ApplyT(func(v *Ti) Ti {
		if v != nil {
			return *v
		}
		var ret Ti
		return ret
	}).(TiOutput)
}

func (o TiPtrOutput) X() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ti) *int {
		if v == nil {
			return nil
		}
		return v.X
	}).(pulumi.IntPtrOutput)
}

type Ti1 struct {
	X *int `pulumi:"x"`
}

// Ti1Input is an input type that accepts Ti1Args and Ti1Output values.
// You can construct a concrete instance of `Ti1Input` via:
//
//	Ti1Args{...}
type Ti1Input interface {
	pulumi.Input

	ToTi1Output() Ti1Output
	ToTi1OutputWithContext(context.Context) Ti1Output
}

type Ti1Args struct {
	X pulumi.IntPtrInput `pulumi:"x"`
}

func (Ti1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*Ti1)(nil)).Elem()
}

func (i Ti1Args) ToTi1Output() Ti1Output {
	return i.ToTi1OutputWithContext(context.Background())
}

func (i Ti1Args) ToTi1OutputWithContext(ctx context.Context) Ti1Output {
	return pulumi.ToOutputWithContext(ctx, i).(Ti1Output)
}

func (i Ti1Args) ToTi1PtrOutput() Ti1PtrOutput {
	return i.ToTi1PtrOutputWithContext(context.Background())
}

func (i Ti1Args) ToTi1PtrOutputWithContext(ctx context.Context) Ti1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ti1Output).ToTi1PtrOutputWithContext(ctx)
}

// Ti1PtrInput is an input type that accepts Ti1Args, Ti1Ptr and Ti1PtrOutput values.
// You can construct a concrete instance of `Ti1PtrInput` via:
//
//	        Ti1Args{...}
//
//	or:
//
//	        nil
type Ti1PtrInput interface {
	pulumi.Input

	ToTi1PtrOutput() Ti1PtrOutput
	ToTi1PtrOutputWithContext(context.Context) Ti1PtrOutput
}

type ti1PtrType Ti1Args

func Ti1Ptr(v *Ti1Args) Ti1PtrInput {
	return (*ti1PtrType)(v)
}

func (*ti1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Ti1)(nil)).Elem()
}

func (i *ti1PtrType) ToTi1PtrOutput() Ti1PtrOutput {
	return i.ToTi1PtrOutputWithContext(context.Background())
}

func (i *ti1PtrType) ToTi1PtrOutputWithContext(ctx context.Context) Ti1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ti1PtrOutput)
}

type Ti1Output struct{ *pulumi.OutputState }

func (Ti1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*Ti1)(nil)).Elem()
}

func (o Ti1Output) ToTi1Output() Ti1Output {
	return o
}

func (o Ti1Output) ToTi1OutputWithContext(ctx context.Context) Ti1Output {
	return o
}

func (o Ti1Output) ToTi1PtrOutput() Ti1PtrOutput {
	return o.ToTi1PtrOutputWithContext(context.Background())
}

func (o Ti1Output) ToTi1PtrOutputWithContext(ctx context.Context) Ti1PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Ti1) *Ti1 {
		return &v
	}).(Ti1PtrOutput)
}

func (o Ti1Output) X() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Ti1) *int { return v.X }).(pulumi.IntPtrOutput)
}

type Ti1PtrOutput struct{ *pulumi.OutputState }

func (Ti1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ti1)(nil)).Elem()
}

func (o Ti1PtrOutput) ToTi1PtrOutput() Ti1PtrOutput {
	return o
}

func (o Ti1PtrOutput) ToTi1PtrOutputWithContext(ctx context.Context) Ti1PtrOutput {
	return o
}

func (o Ti1PtrOutput) Elem() Ti1Output {
	return o.ApplyT(func(v *Ti1) Ti1 {
		if v != nil {
			return *v
		}
		var ret Ti1
		return ret
	}).(Ti1Output)
}

func (o Ti1PtrOutput) X() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ti1) *int {
		if v == nil {
			return nil
		}
		return v.X
	}).(pulumi.IntPtrOutput)
}

type Ti2 struct {
	X *int `pulumi:"x"`
}

// Ti2Input is an input type that accepts Ti2Args and Ti2Output values.
// You can construct a concrete instance of `Ti2Input` via:
//
//	Ti2Args{...}
type Ti2Input interface {
	pulumi.Input

	ToTi2Output() Ti2Output
	ToTi2OutputWithContext(context.Context) Ti2Output
}

type Ti2Args struct {
	X pulumi.IntPtrInput `pulumi:"x"`
}

func (Ti2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*Ti2)(nil)).Elem()
}

func (i Ti2Args) ToTi2Output() Ti2Output {
	return i.ToTi2OutputWithContext(context.Background())
}

func (i Ti2Args) ToTi2OutputWithContext(ctx context.Context) Ti2Output {
	return pulumi.ToOutputWithContext(ctx, i).(Ti2Output)
}

func (i Ti2Args) ToTi2PtrOutput() Ti2PtrOutput {
	return i.ToTi2PtrOutputWithContext(context.Background())
}

func (i Ti2Args) ToTi2PtrOutputWithContext(ctx context.Context) Ti2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ti2Output).ToTi2PtrOutputWithContext(ctx)
}

// Ti2PtrInput is an input type that accepts Ti2Args, Ti2Ptr and Ti2PtrOutput values.
// You can construct a concrete instance of `Ti2PtrInput` via:
//
//	        Ti2Args{...}
//
//	or:
//
//	        nil
type Ti2PtrInput interface {
	pulumi.Input

	ToTi2PtrOutput() Ti2PtrOutput
	ToTi2PtrOutputWithContext(context.Context) Ti2PtrOutput
}

type ti2PtrType Ti2Args

func Ti2Ptr(v *Ti2Args) Ti2PtrInput {
	return (*ti2PtrType)(v)
}

func (*ti2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Ti2)(nil)).Elem()
}

func (i *ti2PtrType) ToTi2PtrOutput() Ti2PtrOutput {
	return i.ToTi2PtrOutputWithContext(context.Background())
}

func (i *ti2PtrType) ToTi2PtrOutputWithContext(ctx context.Context) Ti2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ti2PtrOutput)
}

type Ti2Output struct{ *pulumi.OutputState }

func (Ti2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*Ti2)(nil)).Elem()
}

func (o Ti2Output) ToTi2Output() Ti2Output {
	return o
}

func (o Ti2Output) ToTi2OutputWithContext(ctx context.Context) Ti2Output {
	return o
}

func (o Ti2Output) ToTi2PtrOutput() Ti2PtrOutput {
	return o.ToTi2PtrOutputWithContext(context.Background())
}

func (o Ti2Output) ToTi2PtrOutputWithContext(ctx context.Context) Ti2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Ti2) *Ti2 {
		return &v
	}).(Ti2PtrOutput)
}

func (o Ti2Output) X() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Ti2) *int { return v.X }).(pulumi.IntPtrOutput)
}

type Ti2PtrOutput struct{ *pulumi.OutputState }

func (Ti2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ti2)(nil)).Elem()
}

func (o Ti2PtrOutput) ToTi2PtrOutput() Ti2PtrOutput {
	return o
}

func (o Ti2PtrOutput) ToTi2PtrOutputWithContext(ctx context.Context) Ti2PtrOutput {
	return o
}

func (o Ti2PtrOutput) Elem() Ti2Output {
	return o.ApplyT(func(v *Ti2) Ti2 {
		if v != nil {
			return *v
		}
		var ret Ti2
		return ret
	}).(Ti2Output)
}

func (o Ti2PtrOutput) X() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ti2) *int {
		if v == nil {
			return nil
		}
		return v.X
	}).(pulumi.IntPtrOutput)
}

type Ti3 struct {
	X *int `pulumi:"x"`
}

// Ti3Input is an input type that accepts Ti3Args and Ti3Output values.
// You can construct a concrete instance of `Ti3Input` via:
//
//	Ti3Args{...}
type Ti3Input interface {
	pulumi.Input

	ToTi3Output() Ti3Output
	ToTi3OutputWithContext(context.Context) Ti3Output
}

type Ti3Args struct {
	X pulumi.IntPtrInput `pulumi:"x"`
}

func (Ti3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*Ti3)(nil)).Elem()
}

func (i Ti3Args) ToTi3Output() Ti3Output {
	return i.ToTi3OutputWithContext(context.Background())
}

func (i Ti3Args) ToTi3OutputWithContext(ctx context.Context) Ti3Output {
	return pulumi.ToOutputWithContext(ctx, i).(Ti3Output)
}

func (i Ti3Args) ToTi3PtrOutput() Ti3PtrOutput {
	return i.ToTi3PtrOutputWithContext(context.Background())
}

func (i Ti3Args) ToTi3PtrOutputWithContext(ctx context.Context) Ti3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ti3Output).ToTi3PtrOutputWithContext(ctx)
}

// Ti3PtrInput is an input type that accepts Ti3Args, Ti3Ptr and Ti3PtrOutput values.
// You can construct a concrete instance of `Ti3PtrInput` via:
//
//	        Ti3Args{...}
//
//	or:
//
//	        nil
type Ti3PtrInput interface {
	pulumi.Input

	ToTi3PtrOutput() Ti3PtrOutput
	ToTi3PtrOutputWithContext(context.Context) Ti3PtrOutput
}

type ti3PtrType Ti3Args

func Ti3Ptr(v *Ti3Args) Ti3PtrInput {
	return (*ti3PtrType)(v)
}

func (*ti3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Ti3)(nil)).Elem()
}

func (i *ti3PtrType) ToTi3PtrOutput() Ti3PtrOutput {
	return i.ToTi3PtrOutputWithContext(context.Background())
}

func (i *ti3PtrType) ToTi3PtrOutputWithContext(ctx context.Context) Ti3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ti3PtrOutput)
}

type Ti3Output struct{ *pulumi.OutputState }

func (Ti3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*Ti3)(nil)).Elem()
}

func (o Ti3Output) ToTi3Output() Ti3Output {
	return o
}

func (o Ti3Output) ToTi3OutputWithContext(ctx context.Context) Ti3Output {
	return o
}

func (o Ti3Output) ToTi3PtrOutput() Ti3PtrOutput {
	return o.ToTi3PtrOutputWithContext(context.Background())
}

func (o Ti3Output) ToTi3PtrOutputWithContext(ctx context.Context) Ti3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Ti3) *Ti3 {
		return &v
	}).(Ti3PtrOutput)
}

func (o Ti3Output) X() pulumi.IntPtrOutput {
	return o.ApplyT(func(v Ti3) *int { return v.X }).(pulumi.IntPtrOutput)
}

type Ti3PtrOutput struct{ *pulumi.OutputState }

func (Ti3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ti3)(nil)).Elem()
}

func (o Ti3PtrOutput) ToTi3PtrOutput() Ti3PtrOutput {
	return o
}

func (o Ti3PtrOutput) ToTi3PtrOutputWithContext(ctx context.Context) Ti3PtrOutput {
	return o
}

func (o Ti3PtrOutput) Elem() Ti3Output {
	return o.ApplyT(func(v *Ti3) Ti3 {
		if v != nil {
			return *v
		}
		var ret Ti3
		return ret
	}).(Ti3Output)
}

func (o Ti3PtrOutput) X() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ti3) *int {
		if v == nil {
			return nil
		}
		return v.X
	}).(pulumi.IntPtrOutput)
}

type Tn struct {
	X *float64 `pulumi:"x"`
}

// TnInput is an input type that accepts TnArgs and TnOutput values.
// You can construct a concrete instance of `TnInput` via:
//
//	TnArgs{...}
type TnInput interface {
	pulumi.Input

	ToTnOutput() TnOutput
	ToTnOutputWithContext(context.Context) TnOutput
}

type TnArgs struct {
	X pulumi.Float64PtrInput `pulumi:"x"`
}

func (TnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Tn)(nil)).Elem()
}

func (i TnArgs) ToTnOutput() TnOutput {
	return i.ToTnOutputWithContext(context.Background())
}

func (i TnArgs) ToTnOutputWithContext(ctx context.Context) TnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TnOutput)
}

func (i TnArgs) ToTnPtrOutput() TnPtrOutput {
	return i.ToTnPtrOutputWithContext(context.Background())
}

func (i TnArgs) ToTnPtrOutputWithContext(ctx context.Context) TnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TnOutput).ToTnPtrOutputWithContext(ctx)
}

// TnPtrInput is an input type that accepts TnArgs, TnPtr and TnPtrOutput values.
// You can construct a concrete instance of `TnPtrInput` via:
//
//	        TnArgs{...}
//
//	or:
//
//	        nil
type TnPtrInput interface {
	pulumi.Input

	ToTnPtrOutput() TnPtrOutput
	ToTnPtrOutputWithContext(context.Context) TnPtrOutput
}

type tnPtrType TnArgs

func TnPtr(v *TnArgs) TnPtrInput {
	return (*tnPtrType)(v)
}

func (*tnPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Tn)(nil)).Elem()
}

func (i *tnPtrType) ToTnPtrOutput() TnPtrOutput {
	return i.ToTnPtrOutputWithContext(context.Background())
}

func (i *tnPtrType) ToTnPtrOutputWithContext(ctx context.Context) TnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TnPtrOutput)
}

type TnOutput struct{ *pulumi.OutputState }

func (TnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Tn)(nil)).Elem()
}

func (o TnOutput) ToTnOutput() TnOutput {
	return o
}

func (o TnOutput) ToTnOutputWithContext(ctx context.Context) TnOutput {
	return o
}

func (o TnOutput) ToTnPtrOutput() TnPtrOutput {
	return o.ToTnPtrOutputWithContext(context.Background())
}

func (o TnOutput) ToTnPtrOutputWithContext(ctx context.Context) TnPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Tn) *Tn {
		return &v
	}).(TnPtrOutput)
}

func (o TnOutput) X() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Tn) *float64 { return v.X }).(pulumi.Float64PtrOutput)
}

type TnPtrOutput struct{ *pulumi.OutputState }

func (TnPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tn)(nil)).Elem()
}

func (o TnPtrOutput) ToTnPtrOutput() TnPtrOutput {
	return o
}

func (o TnPtrOutput) ToTnPtrOutputWithContext(ctx context.Context) TnPtrOutput {
	return o
}

func (o TnPtrOutput) Elem() TnOutput {
	return o.ApplyT(func(v *Tn) Tn {
		if v != nil {
			return *v
		}
		var ret Tn
		return ret
	}).(TnOutput)
}

func (o TnPtrOutput) X() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Tn) *float64 {
		if v == nil {
			return nil
		}
		return v.X
	}).(pulumi.Float64PtrOutput)
}

type Tn1 struct {
	X *float64 `pulumi:"x"`
}

// Tn1Input is an input type that accepts Tn1Args and Tn1Output values.
// You can construct a concrete instance of `Tn1Input` via:
//
//	Tn1Args{...}
type Tn1Input interface {
	pulumi.Input

	ToTn1Output() Tn1Output
	ToTn1OutputWithContext(context.Context) Tn1Output
}

type Tn1Args struct {
	X pulumi.Float64PtrInput `pulumi:"x"`
}

func (Tn1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*Tn1)(nil)).Elem()
}

func (i Tn1Args) ToTn1Output() Tn1Output {
	return i.ToTn1OutputWithContext(context.Background())
}

func (i Tn1Args) ToTn1OutputWithContext(ctx context.Context) Tn1Output {
	return pulumi.ToOutputWithContext(ctx, i).(Tn1Output)
}

func (i Tn1Args) ToTn1PtrOutput() Tn1PtrOutput {
	return i.ToTn1PtrOutputWithContext(context.Background())
}

func (i Tn1Args) ToTn1PtrOutputWithContext(ctx context.Context) Tn1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Tn1Output).ToTn1PtrOutputWithContext(ctx)
}

// Tn1PtrInput is an input type that accepts Tn1Args, Tn1Ptr and Tn1PtrOutput values.
// You can construct a concrete instance of `Tn1PtrInput` via:
//
//	        Tn1Args{...}
//
//	or:
//
//	        nil
type Tn1PtrInput interface {
	pulumi.Input

	ToTn1PtrOutput() Tn1PtrOutput
	ToTn1PtrOutputWithContext(context.Context) Tn1PtrOutput
}

type tn1PtrType Tn1Args

func Tn1Ptr(v *Tn1Args) Tn1PtrInput {
	return (*tn1PtrType)(v)
}

func (*tn1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Tn1)(nil)).Elem()
}

func (i *tn1PtrType) ToTn1PtrOutput() Tn1PtrOutput {
	return i.ToTn1PtrOutputWithContext(context.Background())
}

func (i *tn1PtrType) ToTn1PtrOutputWithContext(ctx context.Context) Tn1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Tn1PtrOutput)
}

type Tn1Output struct{ *pulumi.OutputState }

func (Tn1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*Tn1)(nil)).Elem()
}

func (o Tn1Output) ToTn1Output() Tn1Output {
	return o
}

func (o Tn1Output) ToTn1OutputWithContext(ctx context.Context) Tn1Output {
	return o
}

func (o Tn1Output) ToTn1PtrOutput() Tn1PtrOutput {
	return o.ToTn1PtrOutputWithContext(context.Background())
}

func (o Tn1Output) ToTn1PtrOutputWithContext(ctx context.Context) Tn1PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Tn1) *Tn1 {
		return &v
	}).(Tn1PtrOutput)
}

func (o Tn1Output) X() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Tn1) *float64 { return v.X }).(pulumi.Float64PtrOutput)
}

type Tn1PtrOutput struct{ *pulumi.OutputState }

func (Tn1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tn1)(nil)).Elem()
}

func (o Tn1PtrOutput) ToTn1PtrOutput() Tn1PtrOutput {
	return o
}

func (o Tn1PtrOutput) ToTn1PtrOutputWithContext(ctx context.Context) Tn1PtrOutput {
	return o
}

func (o Tn1PtrOutput) Elem() Tn1Output {
	return o.ApplyT(func(v *Tn1) Tn1 {
		if v != nil {
			return *v
		}
		var ret Tn1
		return ret
	}).(Tn1Output)
}

func (o Tn1PtrOutput) X() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Tn1) *float64 {
		if v == nil {
			return nil
		}
		return v.X
	}).(pulumi.Float64PtrOutput)
}

type Tn2 struct {
	X *float64 `pulumi:"x"`
}

// Tn2Input is an input type that accepts Tn2Args and Tn2Output values.
// You can construct a concrete instance of `Tn2Input` via:
//
//	Tn2Args{...}
type Tn2Input interface {
	pulumi.Input

	ToTn2Output() Tn2Output
	ToTn2OutputWithContext(context.Context) Tn2Output
}

type Tn2Args struct {
	X pulumi.Float64PtrInput `pulumi:"x"`
}

func (Tn2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*Tn2)(nil)).Elem()
}

func (i Tn2Args) ToTn2Output() Tn2Output {
	return i.ToTn2OutputWithContext(context.Background())
}

func (i Tn2Args) ToTn2OutputWithContext(ctx context.Context) Tn2Output {
	return pulumi.ToOutputWithContext(ctx, i).(Tn2Output)
}

func (i Tn2Args) ToTn2PtrOutput() Tn2PtrOutput {
	return i.ToTn2PtrOutputWithContext(context.Background())
}

func (i Tn2Args) ToTn2PtrOutputWithContext(ctx context.Context) Tn2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Tn2Output).ToTn2PtrOutputWithContext(ctx)
}

// Tn2PtrInput is an input type that accepts Tn2Args, Tn2Ptr and Tn2PtrOutput values.
// You can construct a concrete instance of `Tn2PtrInput` via:
//
//	        Tn2Args{...}
//
//	or:
//
//	        nil
type Tn2PtrInput interface {
	pulumi.Input

	ToTn2PtrOutput() Tn2PtrOutput
	ToTn2PtrOutputWithContext(context.Context) Tn2PtrOutput
}

type tn2PtrType Tn2Args

func Tn2Ptr(v *Tn2Args) Tn2PtrInput {
	return (*tn2PtrType)(v)
}

func (*tn2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Tn2)(nil)).Elem()
}

func (i *tn2PtrType) ToTn2PtrOutput() Tn2PtrOutput {
	return i.ToTn2PtrOutputWithContext(context.Background())
}

func (i *tn2PtrType) ToTn2PtrOutputWithContext(ctx context.Context) Tn2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Tn2PtrOutput)
}

type Tn2Output struct{ *pulumi.OutputState }

func (Tn2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*Tn2)(nil)).Elem()
}

func (o Tn2Output) ToTn2Output() Tn2Output {
	return o
}

func (o Tn2Output) ToTn2OutputWithContext(ctx context.Context) Tn2Output {
	return o
}

func (o Tn2Output) ToTn2PtrOutput() Tn2PtrOutput {
	return o.ToTn2PtrOutputWithContext(context.Background())
}

func (o Tn2Output) ToTn2PtrOutputWithContext(ctx context.Context) Tn2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Tn2) *Tn2 {
		return &v
	}).(Tn2PtrOutput)
}

func (o Tn2Output) X() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Tn2) *float64 { return v.X }).(pulumi.Float64PtrOutput)
}

type Tn2PtrOutput struct{ *pulumi.OutputState }

func (Tn2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tn2)(nil)).Elem()
}

func (o Tn2PtrOutput) ToTn2PtrOutput() Tn2PtrOutput {
	return o
}

func (o Tn2PtrOutput) ToTn2PtrOutputWithContext(ctx context.Context) Tn2PtrOutput {
	return o
}

func (o Tn2PtrOutput) Elem() Tn2Output {
	return o.ApplyT(func(v *Tn2) Tn2 {
		if v != nil {
			return *v
		}
		var ret Tn2
		return ret
	}).(Tn2Output)
}

func (o Tn2PtrOutput) X() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Tn2) *float64 {
		if v == nil {
			return nil
		}
		return v.X
	}).(pulumi.Float64PtrOutput)
}

type Tn3 struct {
	X *float64 `pulumi:"x"`
}

// Tn3Input is an input type that accepts Tn3Args and Tn3Output values.
// You can construct a concrete instance of `Tn3Input` via:
//
//	Tn3Args{...}
type Tn3Input interface {
	pulumi.Input

	ToTn3Output() Tn3Output
	ToTn3OutputWithContext(context.Context) Tn3Output
}

type Tn3Args struct {
	X pulumi.Float64PtrInput `pulumi:"x"`
}

func (Tn3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*Tn3)(nil)).Elem()
}

func (i Tn3Args) ToTn3Output() Tn3Output {
	return i.ToTn3OutputWithContext(context.Background())
}

func (i Tn3Args) ToTn3OutputWithContext(ctx context.Context) Tn3Output {
	return pulumi.ToOutputWithContext(ctx, i).(Tn3Output)
}

func (i Tn3Args) ToTn3PtrOutput() Tn3PtrOutput {
	return i.ToTn3PtrOutputWithContext(context.Background())
}

func (i Tn3Args) ToTn3PtrOutputWithContext(ctx context.Context) Tn3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Tn3Output).ToTn3PtrOutputWithContext(ctx)
}

// Tn3PtrInput is an input type that accepts Tn3Args, Tn3Ptr and Tn3PtrOutput values.
// You can construct a concrete instance of `Tn3PtrInput` via:
//
//	        Tn3Args{...}
//
//	or:
//
//	        nil
type Tn3PtrInput interface {
	pulumi.Input

	ToTn3PtrOutput() Tn3PtrOutput
	ToTn3PtrOutputWithContext(context.Context) Tn3PtrOutput
}

type tn3PtrType Tn3Args

func Tn3Ptr(v *Tn3Args) Tn3PtrInput {
	return (*tn3PtrType)(v)
}

func (*tn3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Tn3)(nil)).Elem()
}

func (i *tn3PtrType) ToTn3PtrOutput() Tn3PtrOutput {
	return i.ToTn3PtrOutputWithContext(context.Background())
}

func (i *tn3PtrType) ToTn3PtrOutputWithContext(ctx context.Context) Tn3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Tn3PtrOutput)
}

type Tn3Output struct{ *pulumi.OutputState }

func (Tn3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*Tn3)(nil)).Elem()
}

func (o Tn3Output) ToTn3Output() Tn3Output {
	return o
}

func (o Tn3Output) ToTn3OutputWithContext(ctx context.Context) Tn3Output {
	return o
}

func (o Tn3Output) ToTn3PtrOutput() Tn3PtrOutput {
	return o.ToTn3PtrOutputWithContext(context.Background())
}

func (o Tn3Output) ToTn3PtrOutputWithContext(ctx context.Context) Tn3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Tn3) *Tn3 {
		return &v
	}).(Tn3PtrOutput)
}

func (o Tn3Output) X() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v Tn3) *float64 { return v.X }).(pulumi.Float64PtrOutput)
}

type Tn3PtrOutput struct{ *pulumi.OutputState }

func (Tn3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Tn3)(nil)).Elem()
}

func (o Tn3PtrOutput) ToTn3PtrOutput() Tn3PtrOutput {
	return o
}

func (o Tn3PtrOutput) ToTn3PtrOutputWithContext(ctx context.Context) Tn3PtrOutput {
	return o
}

func (o Tn3PtrOutput) Elem() Tn3Output {
	return o.ApplyT(func(v *Tn3) Tn3 {
		if v != nil {
			return *v
		}
		var ret Tn3
		return ret
	}).(Tn3Output)
}

func (o Tn3PtrOutput) X() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *Tn3) *float64 {
		if v == nil {
			return nil
		}
		return v.X
	}).(pulumi.Float64PtrOutput)
}

type Ts struct {
	X *string `pulumi:"x"`
}

// TsInput is an input type that accepts TsArgs and TsOutput values.
// You can construct a concrete instance of `TsInput` via:
//
//	TsArgs{...}
type TsInput interface {
	pulumi.Input

	ToTsOutput() TsOutput
	ToTsOutputWithContext(context.Context) TsOutput
}

type TsArgs struct {
	X pulumi.StringPtrInput `pulumi:"x"`
}

func (TsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Ts)(nil)).Elem()
}

func (i TsArgs) ToTsOutput() TsOutput {
	return i.ToTsOutputWithContext(context.Background())
}

func (i TsArgs) ToTsOutputWithContext(ctx context.Context) TsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TsOutput)
}

func (i TsArgs) ToTsPtrOutput() TsPtrOutput {
	return i.ToTsPtrOutputWithContext(context.Background())
}

func (i TsArgs) ToTsPtrOutputWithContext(ctx context.Context) TsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TsOutput).ToTsPtrOutputWithContext(ctx)
}

// TsPtrInput is an input type that accepts TsArgs, TsPtr and TsPtrOutput values.
// You can construct a concrete instance of `TsPtrInput` via:
//
//	        TsArgs{...}
//
//	or:
//
//	        nil
type TsPtrInput interface {
	pulumi.Input

	ToTsPtrOutput() TsPtrOutput
	ToTsPtrOutputWithContext(context.Context) TsPtrOutput
}

type tsPtrType TsArgs

func TsPtr(v *TsArgs) TsPtrInput {
	return (*tsPtrType)(v)
}

func (*tsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Ts)(nil)).Elem()
}

func (i *tsPtrType) ToTsPtrOutput() TsPtrOutput {
	return i.ToTsPtrOutputWithContext(context.Background())
}

func (i *tsPtrType) ToTsPtrOutputWithContext(ctx context.Context) TsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TsPtrOutput)
}

type TsOutput struct{ *pulumi.OutputState }

func (TsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Ts)(nil)).Elem()
}

func (o TsOutput) ToTsOutput() TsOutput {
	return o
}

func (o TsOutput) ToTsOutputWithContext(ctx context.Context) TsOutput {
	return o
}

func (o TsOutput) ToTsPtrOutput() TsPtrOutput {
	return o.ToTsPtrOutputWithContext(context.Background())
}

func (o TsOutput) ToTsPtrOutputWithContext(ctx context.Context) TsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Ts) *Ts {
		return &v
	}).(TsPtrOutput)
}

func (o TsOutput) X() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Ts) *string { return v.X }).(pulumi.StringPtrOutput)
}

type TsPtrOutput struct{ *pulumi.OutputState }

func (TsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ts)(nil)).Elem()
}

func (o TsPtrOutput) ToTsPtrOutput() TsPtrOutput {
	return o
}

func (o TsPtrOutput) ToTsPtrOutputWithContext(ctx context.Context) TsPtrOutput {
	return o
}

func (o TsPtrOutput) Elem() TsOutput {
	return o.ApplyT(func(v *Ts) Ts {
		if v != nil {
			return *v
		}
		var ret Ts
		return ret
	}).(TsOutput)
}

func (o TsPtrOutput) X() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ts) *string {
		if v == nil {
			return nil
		}
		return v.X
	}).(pulumi.StringPtrOutput)
}

type Ts1 struct {
	X *string `pulumi:"x"`
}

// Ts1Input is an input type that accepts Ts1Args and Ts1Output values.
// You can construct a concrete instance of `Ts1Input` via:
//
//	Ts1Args{...}
type Ts1Input interface {
	pulumi.Input

	ToTs1Output() Ts1Output
	ToTs1OutputWithContext(context.Context) Ts1Output
}

type Ts1Args struct {
	X pulumi.StringPtrInput `pulumi:"x"`
}

func (Ts1Args) ElementType() reflect.Type {
	return reflect.TypeOf((*Ts1)(nil)).Elem()
}

func (i Ts1Args) ToTs1Output() Ts1Output {
	return i.ToTs1OutputWithContext(context.Background())
}

func (i Ts1Args) ToTs1OutputWithContext(ctx context.Context) Ts1Output {
	return pulumi.ToOutputWithContext(ctx, i).(Ts1Output)
}

func (i Ts1Args) ToTs1PtrOutput() Ts1PtrOutput {
	return i.ToTs1PtrOutputWithContext(context.Background())
}

func (i Ts1Args) ToTs1PtrOutputWithContext(ctx context.Context) Ts1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ts1Output).ToTs1PtrOutputWithContext(ctx)
}

// Ts1PtrInput is an input type that accepts Ts1Args, Ts1Ptr and Ts1PtrOutput values.
// You can construct a concrete instance of `Ts1PtrInput` via:
//
//	        Ts1Args{...}
//
//	or:
//
//	        nil
type Ts1PtrInput interface {
	pulumi.Input

	ToTs1PtrOutput() Ts1PtrOutput
	ToTs1PtrOutputWithContext(context.Context) Ts1PtrOutput
}

type ts1PtrType Ts1Args

func Ts1Ptr(v *Ts1Args) Ts1PtrInput {
	return (*ts1PtrType)(v)
}

func (*ts1PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Ts1)(nil)).Elem()
}

func (i *ts1PtrType) ToTs1PtrOutput() Ts1PtrOutput {
	return i.ToTs1PtrOutputWithContext(context.Background())
}

func (i *ts1PtrType) ToTs1PtrOutputWithContext(ctx context.Context) Ts1PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ts1PtrOutput)
}

type Ts1Output struct{ *pulumi.OutputState }

func (Ts1Output) ElementType() reflect.Type {
	return reflect.TypeOf((*Ts1)(nil)).Elem()
}

func (o Ts1Output) ToTs1Output() Ts1Output {
	return o
}

func (o Ts1Output) ToTs1OutputWithContext(ctx context.Context) Ts1Output {
	return o
}

func (o Ts1Output) ToTs1PtrOutput() Ts1PtrOutput {
	return o.ToTs1PtrOutputWithContext(context.Background())
}

func (o Ts1Output) ToTs1PtrOutputWithContext(ctx context.Context) Ts1PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Ts1) *Ts1 {
		return &v
	}).(Ts1PtrOutput)
}

func (o Ts1Output) X() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Ts1) *string { return v.X }).(pulumi.StringPtrOutput)
}

type Ts1PtrOutput struct{ *pulumi.OutputState }

func (Ts1PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ts1)(nil)).Elem()
}

func (o Ts1PtrOutput) ToTs1PtrOutput() Ts1PtrOutput {
	return o
}

func (o Ts1PtrOutput) ToTs1PtrOutputWithContext(ctx context.Context) Ts1PtrOutput {
	return o
}

func (o Ts1PtrOutput) Elem() Ts1Output {
	return o.ApplyT(func(v *Ts1) Ts1 {
		if v != nil {
			return *v
		}
		var ret Ts1
		return ret
	}).(Ts1Output)
}

func (o Ts1PtrOutput) X() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ts1) *string {
		if v == nil {
			return nil
		}
		return v.X
	}).(pulumi.StringPtrOutput)
}

type Ts2 struct {
	X *string `pulumi:"x"`
}

// Ts2Input is an input type that accepts Ts2Args and Ts2Output values.
// You can construct a concrete instance of `Ts2Input` via:
//
//	Ts2Args{...}
type Ts2Input interface {
	pulumi.Input

	ToTs2Output() Ts2Output
	ToTs2OutputWithContext(context.Context) Ts2Output
}

type Ts2Args struct {
	X pulumi.StringPtrInput `pulumi:"x"`
}

func (Ts2Args) ElementType() reflect.Type {
	return reflect.TypeOf((*Ts2)(nil)).Elem()
}

func (i Ts2Args) ToTs2Output() Ts2Output {
	return i.ToTs2OutputWithContext(context.Background())
}

func (i Ts2Args) ToTs2OutputWithContext(ctx context.Context) Ts2Output {
	return pulumi.ToOutputWithContext(ctx, i).(Ts2Output)
}

func (i Ts2Args) ToTs2PtrOutput() Ts2PtrOutput {
	return i.ToTs2PtrOutputWithContext(context.Background())
}

func (i Ts2Args) ToTs2PtrOutputWithContext(ctx context.Context) Ts2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ts2Output).ToTs2PtrOutputWithContext(ctx)
}

// Ts2PtrInput is an input type that accepts Ts2Args, Ts2Ptr and Ts2PtrOutput values.
// You can construct a concrete instance of `Ts2PtrInput` via:
//
//	        Ts2Args{...}
//
//	or:
//
//	        nil
type Ts2PtrInput interface {
	pulumi.Input

	ToTs2PtrOutput() Ts2PtrOutput
	ToTs2PtrOutputWithContext(context.Context) Ts2PtrOutput
}

type ts2PtrType Ts2Args

func Ts2Ptr(v *Ts2Args) Ts2PtrInput {
	return (*ts2PtrType)(v)
}

func (*ts2PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Ts2)(nil)).Elem()
}

func (i *ts2PtrType) ToTs2PtrOutput() Ts2PtrOutput {
	return i.ToTs2PtrOutputWithContext(context.Background())
}

func (i *ts2PtrType) ToTs2PtrOutputWithContext(ctx context.Context) Ts2PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ts2PtrOutput)
}

type Ts2Output struct{ *pulumi.OutputState }

func (Ts2Output) ElementType() reflect.Type {
	return reflect.TypeOf((*Ts2)(nil)).Elem()
}

func (o Ts2Output) ToTs2Output() Ts2Output {
	return o
}

func (o Ts2Output) ToTs2OutputWithContext(ctx context.Context) Ts2Output {
	return o
}

func (o Ts2Output) ToTs2PtrOutput() Ts2PtrOutput {
	return o.ToTs2PtrOutputWithContext(context.Background())
}

func (o Ts2Output) ToTs2PtrOutputWithContext(ctx context.Context) Ts2PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Ts2) *Ts2 {
		return &v
	}).(Ts2PtrOutput)
}

func (o Ts2Output) X() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Ts2) *string { return v.X }).(pulumi.StringPtrOutput)
}

type Ts2PtrOutput struct{ *pulumi.OutputState }

func (Ts2PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ts2)(nil)).Elem()
}

func (o Ts2PtrOutput) ToTs2PtrOutput() Ts2PtrOutput {
	return o
}

func (o Ts2PtrOutput) ToTs2PtrOutputWithContext(ctx context.Context) Ts2PtrOutput {
	return o
}

func (o Ts2PtrOutput) Elem() Ts2Output {
	return o.ApplyT(func(v *Ts2) Ts2 {
		if v != nil {
			return *v
		}
		var ret Ts2
		return ret
	}).(Ts2Output)
}

func (o Ts2PtrOutput) X() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ts2) *string {
		if v == nil {
			return nil
		}
		return v.X
	}).(pulumi.StringPtrOutput)
}

type Ts3 struct {
	X *string `pulumi:"x"`
}

// Ts3Input is an input type that accepts Ts3Args and Ts3Output values.
// You can construct a concrete instance of `Ts3Input` via:
//
//	Ts3Args{...}
type Ts3Input interface {
	pulumi.Input

	ToTs3Output() Ts3Output
	ToTs3OutputWithContext(context.Context) Ts3Output
}

type Ts3Args struct {
	X pulumi.StringPtrInput `pulumi:"x"`
}

func (Ts3Args) ElementType() reflect.Type {
	return reflect.TypeOf((*Ts3)(nil)).Elem()
}

func (i Ts3Args) ToTs3Output() Ts3Output {
	return i.ToTs3OutputWithContext(context.Background())
}

func (i Ts3Args) ToTs3OutputWithContext(ctx context.Context) Ts3Output {
	return pulumi.ToOutputWithContext(ctx, i).(Ts3Output)
}

func (i Ts3Args) ToTs3PtrOutput() Ts3PtrOutput {
	return i.ToTs3PtrOutputWithContext(context.Background())
}

func (i Ts3Args) ToTs3PtrOutputWithContext(ctx context.Context) Ts3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ts3Output).ToTs3PtrOutputWithContext(ctx)
}

// Ts3PtrInput is an input type that accepts Ts3Args, Ts3Ptr and Ts3PtrOutput values.
// You can construct a concrete instance of `Ts3PtrInput` via:
//
//	        Ts3Args{...}
//
//	or:
//
//	        nil
type Ts3PtrInput interface {
	pulumi.Input

	ToTs3PtrOutput() Ts3PtrOutput
	ToTs3PtrOutputWithContext(context.Context) Ts3PtrOutput
}

type ts3PtrType Ts3Args

func Ts3Ptr(v *Ts3Args) Ts3PtrInput {
	return (*ts3PtrType)(v)
}

func (*ts3PtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Ts3)(nil)).Elem()
}

func (i *ts3PtrType) ToTs3PtrOutput() Ts3PtrOutput {
	return i.ToTs3PtrOutputWithContext(context.Background())
}

func (i *ts3PtrType) ToTs3PtrOutputWithContext(ctx context.Context) Ts3PtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ts3PtrOutput)
}

type Ts3Output struct{ *pulumi.OutputState }

func (Ts3Output) ElementType() reflect.Type {
	return reflect.TypeOf((*Ts3)(nil)).Elem()
}

func (o Ts3Output) ToTs3Output() Ts3Output {
	return o
}

func (o Ts3Output) ToTs3OutputWithContext(ctx context.Context) Ts3Output {
	return o
}

func (o Ts3Output) ToTs3PtrOutput() Ts3PtrOutput {
	return o.ToTs3PtrOutputWithContext(context.Background())
}

func (o Ts3Output) ToTs3PtrOutputWithContext(ctx context.Context) Ts3PtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Ts3) *Ts3 {
		return &v
	}).(Ts3PtrOutput)
}

func (o Ts3Output) X() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Ts3) *string { return v.X }).(pulumi.StringPtrOutput)
}

type Ts3PtrOutput struct{ *pulumi.OutputState }

func (Ts3PtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ts3)(nil)).Elem()
}

func (o Ts3PtrOutput) ToTs3PtrOutput() Ts3PtrOutput {
	return o
}

func (o Ts3PtrOutput) ToTs3PtrOutputWithContext(ctx context.Context) Ts3PtrOutput {
	return o
}

func (o Ts3PtrOutput) Elem() Ts3Output {
	return o.ApplyT(func(v *Ts3) Ts3 {
		if v != nil {
			return *v
		}
		var ret Ts3
		return ret
	}).(Ts3Output)
}

func (o Ts3PtrOutput) X() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ts3) *string {
		if v == nil {
			return nil
		}
		return v.X
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TbInput)(nil)).Elem(), TbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TbPtrInput)(nil)).Elem(), TbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Tb1Input)(nil)).Elem(), Tb1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Tb1PtrInput)(nil)).Elem(), Tb1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Tb2Input)(nil)).Elem(), Tb2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Tb2PtrInput)(nil)).Elem(), Tb2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Tb3Input)(nil)).Elem(), Tb3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Tb3PtrInput)(nil)).Elem(), Tb3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*TiInput)(nil)).Elem(), TiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TiPtrInput)(nil)).Elem(), TiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ti1Input)(nil)).Elem(), Ti1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ti1PtrInput)(nil)).Elem(), Ti1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ti2Input)(nil)).Elem(), Ti2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ti2PtrInput)(nil)).Elem(), Ti2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ti3Input)(nil)).Elem(), Ti3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ti3PtrInput)(nil)).Elem(), Ti3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*TnInput)(nil)).Elem(), TnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TnPtrInput)(nil)).Elem(), TnArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Tn1Input)(nil)).Elem(), Tn1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Tn1PtrInput)(nil)).Elem(), Tn1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Tn2Input)(nil)).Elem(), Tn2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Tn2PtrInput)(nil)).Elem(), Tn2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Tn3Input)(nil)).Elem(), Tn3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Tn3PtrInput)(nil)).Elem(), Tn3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*TsInput)(nil)).Elem(), TsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TsPtrInput)(nil)).Elem(), TsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ts1Input)(nil)).Elem(), Ts1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ts1PtrInput)(nil)).Elem(), Ts1Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ts2Input)(nil)).Elem(), Ts2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ts2PtrInput)(nil)).Elem(), Ts2Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ts3Input)(nil)).Elem(), Ts3Args{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ts3PtrInput)(nil)).Elem(), Ts3Args{})
	pulumi.RegisterOutputType(TbOutput{})
	pulumi.RegisterOutputType(TbPtrOutput{})
	pulumi.RegisterOutputType(Tb1Output{})
	pulumi.RegisterOutputType(Tb1PtrOutput{})
	pulumi.RegisterOutputType(Tb2Output{})
	pulumi.RegisterOutputType(Tb2PtrOutput{})
	pulumi.RegisterOutputType(Tb3Output{})
	pulumi.RegisterOutputType(Tb3PtrOutput{})
	pulumi.RegisterOutputType(TiOutput{})
	pulumi.RegisterOutputType(TiPtrOutput{})
	pulumi.RegisterOutputType(Ti1Output{})
	pulumi.RegisterOutputType(Ti1PtrOutput{})
	pulumi.RegisterOutputType(Ti2Output{})
	pulumi.RegisterOutputType(Ti2PtrOutput{})
	pulumi.RegisterOutputType(Ti3Output{})
	pulumi.RegisterOutputType(Ti3PtrOutput{})
	pulumi.RegisterOutputType(TnOutput{})
	pulumi.RegisterOutputType(TnPtrOutput{})
	pulumi.RegisterOutputType(Tn1Output{})
	pulumi.RegisterOutputType(Tn1PtrOutput{})
	pulumi.RegisterOutputType(Tn2Output{})
	pulumi.RegisterOutputType(Tn2PtrOutput{})
	pulumi.RegisterOutputType(Tn3Output{})
	pulumi.RegisterOutputType(Tn3PtrOutput{})
	pulumi.RegisterOutputType(TsOutput{})
	pulumi.RegisterOutputType(TsPtrOutput{})
	pulumi.RegisterOutputType(Ts1Output{})
	pulumi.RegisterOutputType(Ts1PtrOutput{})
	pulumi.RegisterOutputType(Ts2Output{})
	pulumi.RegisterOutputType(Ts2PtrOutput{})
	pulumi.RegisterOutputType(Ts3Output{})
	pulumi.RegisterOutputType(Ts3PtrOutput{})
}
