// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package goodbye

import (
	"context"
	"reflect"

	"example.com/pulumi-goodbye/sdk/go/v2/goodbye/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Goodbye struct {
	pulumi.CustomResourceState

	ParameterValue pulumi.StringOutput `pulumi:"parameterValue"`
}

// NewGoodbye registers a new resource with the given unique name, arguments, and options.
func NewGoodbye(ctx *pulumi.Context,
	name string, args *GoodbyeArgs, opts ...pulumi.ResourceOption) (*Goodbye, error) {
	if args == nil {
		args = &GoodbyeArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	var resource Goodbye
	err = ctx.RegisterPackageResource("goodbye:index:Goodbye", name, args, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGoodbye gets an existing Goodbye resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGoodbye(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GoodbyeState, opts ...pulumi.ResourceOption) (*Goodbye, error) {
	var resource Goodbye
	ref, err := internal.PkgGetPackageRef(ctx)
	if err != nil {
		return nil, err
	}
	err = ctx.ReadPackageResource("goodbye:index:Goodbye", name, id, state, &resource, ref, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Goodbye resources.
type goodbyeState struct {
}

type GoodbyeState struct {
}

func (GoodbyeState) ElementType() reflect.Type {
	return reflect.TypeOf((*goodbyeState)(nil)).Elem()
}

type goodbyeArgs struct {
}

// The set of arguments for constructing a Goodbye resource.
type GoodbyeArgs struct {
}

func (GoodbyeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*goodbyeArgs)(nil)).Elem()
}

type GoodbyeInput interface {
	pulumi.Input

	ToGoodbyeOutput() GoodbyeOutput
	ToGoodbyeOutputWithContext(ctx context.Context) GoodbyeOutput
}

func (*Goodbye) ElementType() reflect.Type {
	return reflect.TypeOf((**Goodbye)(nil)).Elem()
}

func (i *Goodbye) ToGoodbyeOutput() GoodbyeOutput {
	return i.ToGoodbyeOutputWithContext(context.Background())
}

func (i *Goodbye) ToGoodbyeOutputWithContext(ctx context.Context) GoodbyeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoodbyeOutput)
}

type GoodbyeOutput struct{ *pulumi.OutputState }

func (GoodbyeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Goodbye)(nil)).Elem()
}

func (o GoodbyeOutput) ToGoodbyeOutput() GoodbyeOutput {
	return o
}

func (o GoodbyeOutput) ToGoodbyeOutputWithContext(ctx context.Context) GoodbyeOutput {
	return o
}

func (o GoodbyeOutput) ParameterValue() pulumi.StringOutput {
	return o.ApplyT(func(v *Goodbye) pulumi.StringOutput { return v.ParameterValue }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GoodbyeInput)(nil)).Elem(), &Goodbye{})
	pulumi.RegisterOutputType(GoodbyeOutput{})
}
