on:
  repository_dispatch:
    types: [ run-acceptance-tests-command ]
  pull_request:
    paths-ignore:
      - 'CHANGELOG.md'
      - 'CHANGELOG_PENDING.md'

defaults:
  run:
    shell: bash

env:
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_PROD_ACCESS_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PULUMI_TEST_OWNER: "moolumi"
  PR_COMMIT_SHA: ${{ github.event.client_payload.pull_request.head.sha }}
  PYTHON: python

# Cancel checks on prior commits when new commits are added to a PR.
# This is motivated by temporary throughput issues on our GitHub
# Actions workers availability.
#
# Note from GitHub docs: Concurrency is currently in beta and subject
# to change.
#
# See also: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency
#
# Note on the the `group` computed expression: it is compiling
# `github.head_ref == '' ? github.run_id : github.head_ref` expression
# to the primitives available in GitHub Actions. The idea to use
# `head_ref` on `pull_request` triggers, but use unique
# `github.run_id` on `run-acceptance-tests-command` triggers. This
# effectively disables `concurrency` checks for
# `run-acceptance-tests-command` triggers.
concurrency:
  group: run-build-acceptance-tests-${{(fromJSON(format('[{0},{1}]',toJSON(github.head_ref),toJSON(github.run_id))))[github.head_ref=='']}}
  cancel-in-progress: true

jobs:

  comment-notification:
    # We only care about adding the result to the PR if it's a repository_dispatch event
    if: github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
      - name: Update with Result
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          issue-number: ${{ github.event.client_payload.github.payload.issue.number }}
          body: |
            Please view the results of the PR Build + Acceptance Tests Run [Here][1]

            [1]: ${{ steps.vars.outputs.run-url }}

  go-lint:
    container: golangci/golangci-lint:latest
    name: Lint ${{ matrix.directory }}
    strategy:
      matrix:
        directory: [ sdk, pkg, tests ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          ref: ${{ env.PR_COMMIT_SHA }}
      - name: Lint ${{ matrix.directory }}
        run: |
          cd ${{ matrix.directory }} && golangci-lint run -c ../.golangci.yml

  sdk-lint:
    name: Lint SDKs
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up DotNet ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - run: mkdir -p ${{ runner.temp }}/opt/pulumi/nuget
      - run: dotnet nuget add source ${{ runner.temp }}/opt/pulumi/nuget
      - name: Set up Node ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip requests wheel urllib3 chardet
      - name: Setup git
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
      - name: Update path
        run: |
          echo "${{ runner.temp }}/opt/pulumi/bin" >> $GITHUB_PATH
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          ref: ${{ env.PR_COMMIT_SHA }}
      - name: Fetch Tags
        run: |
          git fetch --quiet --prune --unshallow --tags
      - name: Set Go Dep path
        run: |
          echo "PULUMI_GO_DEP_ROOT=$(dirname $(pwd))" >> $GITHUB_ENV
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.3.1
        with:
          repo: pulumi/pulumictl
      - name: Ensure
        run: |
          make ensure
      - name: Lint Node
        run: |
          cd sdk/nodejs && make lint
      - name: Lint Python
        run: |
          cd sdk/python && make lint
      - name: Lint .NET
        run: |
          cd sdk/dotnet && make lint

  build:
    name: Build
    uses: pulumi/pulumi/.github/workflows/build.yml@master
    with:
      enable-coverage: true

  test:
    name: Test
    needs: build
    strategy:
      matrix:
        platform: [ ubuntu-latest, macos-latest, windows-latest ]
        go-version: [ 1.17.x ]
        python-version: [ 3.9.x ]
        dotnet-version: [ 3.1.x ]
        node-version: [ 14.x ]

        # See scripts/tests_subsets.py when editing
        test-subset: [ integration, integration-and-codegen, auto, etc ]

        exclude:
          - platform: macos-latest

        # Only run catch-all `etc` test-subset on Mac for PR
        # verification because of a throughput bottleneck on Mac
        # runners. Note that `master.yml` specifies all test subsets
        # to still run on `master` branch verifications.
        include:
          - platform: macos-latest
            test-subset: etc
            go-version: 1.17.x
            python-version: 3.9.x
            dotnet-version: 3.1.x
            node-version: 14.x

      fail-fast: false
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Set PULUMI_TEST_SUBSET env var
        run: |
          echo "PULUMI_TEST_SUBSET=${{ matrix.test-subset }}" >> $GITHUB_ENV
      - name: Enable code coverage
        if: ${{ matrix.platform != 'windows-latest' }}
        run: |
          echo "PULUMI_TEST_COVERAGE_PATH=$(pwd)/coverage" >> $GITHUB_ENV
      - name: Set up Make (windows)
        if: ${{ matrix.platform == 'windows-latest' }}
        run: |
          choco install make
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up DotNet ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - name: Set up Node ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Uninstall pre-installed Pulumi (windows)
        if: ${{ matrix.platform == 'windows-latest' }}
        run: |
          choco uninstall pulumi
      - name: Install yarn
        run: |
          npm install -g yarn
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip requests wheel urllib3 chardet
      - name: Setup git
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          ref: ${{ env.PR_COMMIT_SHA }}
      - name: Fetch Tags
        run: |
          git fetch --quiet --prune --unshallow --tags
      - name: Set Go Dep path
        run: |
          echo "PULUMI_GO_DEP_ROOT=$(dirname $(pwd))" >> $GITHUB_ENV
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.3.1
        with:
          repo: pulumi/pulumictl
      - name: Install gotestsum from source
        run: |
          go install gotest.tools/gotestsum@latest
        env:
          GOBIN: ${{ github.workspace }}/bin
      # Binary installer for gotestsum does not work because the
      # project distributes tarballs for Windows instead of zips
      # expected by the action.
      #
      # - name: Install gotestsum
      #   uses: jaxxstorm/action-install-gh-release@v1.3.1
      #   with:
      #     repo: gotestyourself/gotestsum
      #     tag: v1.7.0
      - name: Install goteststats
        uses: jaxxstorm/action-install-gh-release@v1.3.1
        with:
          repo: t0yv0/goteststats
          tag: v0.0.7
      - name: Download Pulumi Go Binaries (linux-x64)
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        uses: actions/download-artifact@v2
        with:
          name: pulumi-linux-x64
          path: artifacts/go
      - name: Download Pulumi Go Binaries (darwin-x64)
        if: ${{ matrix.platform == 'macos-latest' }}
        uses: actions/download-artifact@v2
        with:
          name: pulumi-darwin-x64
          path: artifacts/go
      - name: Download Pulumi Go Binaries (windows-x64)
        if: ${{ matrix.platform == 'windows-latest' }}
        uses: actions/download-artifact@v2
        with:
          name: pulumi-windows-x64
          path: artifacts/go
      - name: Install Pulumi Go Binaries (non-windows)
        if: ${{ matrix.platform != 'windows-latest' }}
        run: |
          mkdir -p pulumi-bin
          tar -xf artifacts/go/*.tar.gz -C pulumi-bin
          mkdir -p bin
          mv pulumi-bin/pulumi/* bin/
          rm -rf pulumi-bin
      - name: Install Pulumi Go Binaries (windows)
        if: ${{ matrix.platform == 'windows-latest' }}
        run: |
          mkdir -p $PWD/bin
          unzip -d $PWD/bin artifacts/go/*.zip
          mv $PWD/bin/pulumi/bin/* $PWD/bin
          rm -rf $PWD/bin/pulumi
          echo "Checking contents of $PWD/bin"
          find $PWD/bin
      - name: Add ./bin to PATH
        run: |
          LOCAL_PATH=$(./scripts/normpath "${{ github.workspace }}/bin")
          echo "Adding LOCAL_PATH=$LOCAL_PATH to PATH"
          echo $LOCAL_PATH >> $GITHUB_PATH
      - name: Verify Pulumi Version
        run: |
          which pulumi   || echo "no pulumi"
          pulumi version || echo "no pulumi"
      - name: Download Pulumi .NET NuGet packages
        uses: actions/download-artifact@v2
        with:
          name: pulumi-nuget-packages
          # path set to match PULUMI_LOCAL_NUGET
          path: ${{ github.workspace }}/nuget
      - name: Add NuGet packages as a local NuGet source
        run: |
          echo "PULUMI_LOCAL_NUGET=$PULUMI_LOCAL_NUGET"
          SOURCE=$(./scripts/normpath $PULUMI_LOCAL_NUGET)
          echo "SOURCE=$SOURCE"
          dotnet nuget add source $SOURCE
        env:
          PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
      - name: Inspect downloaded artifacts
        run: |
          find artifacts
          echo "PULUMI_LOCAL_NUGET=$PULUMI_LOCAL_NUGET"
          ls $PULUMI_LOCAL_NUGET
        env:
          PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
      - name: Ensure dependencies for the Node SDK
        run: |
          cd sdk/nodejs
          make ensure
      - name: Build the Node SDK
        run: |
          cd sdk/nodejs
          make build_package
          cd bin
          yarn link
      - name: Ensure dependencies for the Python SDK
        run: |
           cd sdk/python
           make ensure
      - name: Install Python SDK
        run: |
           cd sdk/python
           make build_package
      - name: python sdk fast tests
        run: cd sdk/python && make TEST_ALL_DEPS= test_fast
        env:
          PULUMI_HOME: ${{ github.workspace }}/home
          PULUMI_NODE_MODULES: ${{ runner.temp }}/opt/pulumi/node_modules
          PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
          PULUMI_ROOT: ${{ runner.temp }}/opt/pulumi
      - name: python sdk auto tests
        run: cd sdk/python && make TEST_ALL_DEPS= test_auto
        env:
          PULUMI_HOME: ${{ github.workspace }}/home
          PULUMI_NODE_MODULES: ${{ runner.temp }}/opt/pulumi/node_modules
          PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
          PULUMI_ROOT: ${{ runner.temp }}/opt/pulumi
      - name: python sdk go tests
        run: cd sdk/python && make TEST_ALL_DEPS= test_go
        env:
          PULUMI_HOME: ${{ github.workspace }}/home
          PULUMI_NODE_MODULES: ${{ runner.temp }}/opt/pulumi/node_modules
          PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
          PULUMI_ROOT: ${{ runner.temp }}/opt/pulumi
      - name: dotnet sdk tests
        run: cd sdk/dotnet && make TEST_ALL_DEPS= dotnet_test
        env:
          PULUMI_HOME: ${{ github.workspace }}/home
          PULUMI_NODE_MODULES: ${{ runner.temp }}/opt/pulumi/node_modules
          PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
          PULUMI_ROOT: ${{ runner.temp }}/opt/pulumi
      - name: dotnet sdk auto tests
        run: cd sdk/dotnet && make TEST_ALL_DEPS= auto_test
        env:
          PULUMI_HOME: ${{ github.workspace }}/home
          PULUMI_NODE_MODULES: ${{ runner.temp }}/opt/pulumi/node_modules
          PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
          PULUMI_ROOT: ${{ runner.temp }}/opt/pulumi
      - name: dotnet sdk go tests
        run: cd sdk/dotnet && make TEST_ALL_DEPS= go_test
        env:
          PULUMI_HOME: ${{ github.workspace }}/home
          PULUMI_NODE_MODULES: ${{ runner.temp }}/opt/pulumi/node_modules
          PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
          PULUMI_ROOT: ${{ runner.temp }}/opt/pulumi
      - name: node sdk sxs tests
        run: cd sdk/nodejs && make TEST_ALL_DEPS= sxs_tests
        env:
          PULUMI_HOME: ${{ github.workspace }}/home
          PULUMI_NODE_MODULES: ${{ runner.temp }}/opt/pulumi/node_modules
          PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
          PULUMI_ROOT: ${{ runner.temp }}/opt/pulumi
      - name: node sdk unit tests
        run: cd sdk/nodejs && make TEST_ALL_DEPS= unit_tests
        env:
          PULUMI_HOME: ${{ github.workspace }}/home
          PULUMI_NODE_MODULES: ${{ runner.temp }}/opt/pulumi/node_modules
          PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
          PULUMI_ROOT: ${{ runner.temp }}/opt/pulumi
      - name: node sdk auto tests
        run: cd sdk/nodejs && make TEST_ALL_DEPS= auto_tests
        env:
          PULUMI_HOME: ${{ github.workspace }}/home
          PULUMI_NODE_MODULES: ${{ runner.temp }}/opt/pulumi/node_modules
          PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
          PULUMI_ROOT: ${{ runner.temp }}/opt/pulumi
      - name: node sdk go tests
        run: cd sdk/nodejs && make TEST_ALL_DEPS= go_tests
        env:
          PULUMI_HOME: ${{ github.workspace }}/home
          PULUMI_NODE_MODULES: ${{ runner.temp }}/opt/pulumi/node_modules
          PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
          PULUMI_ROOT: ${{ runner.temp }}/opt/pulumi
      - name: go sdk fast tests
        run: cd sdk/go && make TEST_ALL_DEPS= test_fast
        env:
          PULUMI_HOME: ${{ github.workspace }}/home
          PULUMI_NODE_MODULES: ${{ runner.temp }}/opt/pulumi/node_modules
          PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
          PULUMI_ROOT: ${{ runner.temp }}/opt/pulumi
      - name: go sdk auto tests
        run: cd sdk/go && make TEST_ALL_DEPS= test_auto
        env:
          PULUMI_HOME: ${{ github.workspace }}/home
          PULUMI_NODE_MODULES: ${{ runner.temp }}/opt/pulumi/node_modules
          PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
          PULUMI_ROOT: ${{ runner.temp }}/opt/pulumi
      - name: build tests
        run: make TEST_ALL_DEPS= test_build
        env:
          PULUMI_HOME: ${{ github.workspace }}/home
          PULUMI_NODE_MODULES: ${{ runner.temp }}/opt/pulumi/node_modules
          PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
          PULUMI_ROOT: ${{ runner.temp }}/opt/pulumi
      - name: pkg tests
        run: make TEST_ALL_DEPS= test_pkg
        env:
          PULUMI_HOME: ${{ github.workspace }}/home
          PULUMI_NODE_MODULES: ${{ runner.temp }}/opt/pulumi/node_modules
          PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
          PULUMI_ROOT: ${{ runner.temp }}/opt/pulumi
      - name: integration tests
        run: make TEST_ALL_DEPS= test_integration
        env:
          PULUMI_HOME: ${{ github.workspace }}/home
          PULUMI_NODE_MODULES: ${{ runner.temp }}/opt/pulumi/node_modules
          PULUMI_LOCAL_NUGET: ${{ github.workspace }}/nuget
          PULUMI_ROOT: ${{ runner.temp }}/opt/pulumi
      - name: Merge Go coverage data
        if: ${{ matrix.platform != 'windows-latest' }}
        run: |
          pulumictl cover merge --in ./coverage --out ./coverage/go-all.txt
          rm ./coverage/*.cov
      - name: Upload code coverage
        if: ${{ matrix.platform != 'windows-latest' }}
        uses: codecov/codecov-action@v2
        with:
          directory: coverage
          files: '*'
          fail_ci_if_error: false
          verbose: true
      - name: Summarize Test Time by Package
        run: |
          mkdir -p test-results
          touch test-results/empty.json # otherwise goteststats fails below when no files match
          goteststats -statistic pkg-time test-results/*.json
      - name: Summarize Test Times by Indivudal Test
        run: |
          goteststats -statistic test-time test-results/*.json | head -n 100 || \
                      if [[ $? -eq 141 ]]; then true; else exit $?; fi
