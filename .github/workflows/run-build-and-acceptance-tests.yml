on:
  repository_dispatch:
    types: [ run-acceptance-tests-command ]
  pull_request:
    paths-ignore:
      - 'CHANGELOG.md'
      - 'CHANGELOG_PENDING.md'

defaults:
  run:
    shell: bash

env:
  PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_PROD_ACCESS_TOKEN }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PULUMI_TEST_OWNER: "moolumi"
  PR_COMMIT_SHA: ${{ github.event.client_payload.pull_request.head.sha }}
  PYTHON: python
  DOTNET_CLI_TELEMETRY_OPTOUT: "true"

# Cancel checks on prior commits when new commits are added to a PR.
# This is motivated by temporary throughput issues on our GitHub
# Actions workers availability.
#
# Note from GitHub docs: Concurrency is currently in beta and subject
# to change.
#
# See also: https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#concurrency
#
# Note on the the `group` computed expression: it is compiling
# `github.head_ref == '' ? github.run_id : github.head_ref` expression
# to the primitives available in GitHub Actions. The idea to use
# `head_ref` on `pull_request` triggers, but use unique
# `github.run_id` on `run-acceptance-tests-command` triggers. This
# effectively disables `concurrency` checks for
# `run-acceptance-tests-command` triggers.
concurrency:
  group: run-build-acceptance-tests-${{(fromJSON(format('[{0},{1}]',toJSON(github.head_ref),toJSON(github.run_id))))[github.head_ref=='']}}
  cancel-in-progress: true

jobs:

  comment-notification:
    # We only care about adding the result to the PR if it's a repository_dispatch event
    if: github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Create URL to the run output
        id: vars
        run: echo ::set-output name=run-url::https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID
      - name: Update with Result
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          issue-number: ${{ github.event.client_payload.github.payload.issue.number }}
          body: |
            Please view the results of the PR Build + Acceptance Tests Run [Here][1]

            [1]: ${{ steps.vars.outputs.run-url }}

  go-lint:
    # See https://github.com/pulumi/pulumi/issues/9280 for why this is set to v1.44
    container: golangci/golangci-lint:v1.44
    name: Lint ${{ matrix.directory }}
    strategy:
      matrix:
        directory: [ sdk, pkg, tests ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          ref: ${{ env.PR_COMMIT_SHA }}
      - name: Lint ${{ matrix.directory }}
        run: |
          cd ${{ matrix.directory }} && golangci-lint run -c ../.golangci.yml

  sdk-lint:
    name: Lint SDKs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.17.x]
        python-version: [3.9.x]
        dotnet-version: [3.1.x]
        node-version: [14.x]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        with:
          ref: ${{ env.PR_COMMIT_SHA }}
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true
      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - name: Go Cache
        uses: actions/cache@v2
        id: go-cache
        if: ${{ runner.os != 'Windows' }} # Note [Windows Go Cache] in build.yml
        with:
          path: |
              ${{ steps.go-cache-paths.outputs.go-build }}
              ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-cache-${{ hashFiles('*/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: sdk/python/requirements.txt
      - name: Set up DotNet ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - run: mkdir -p ${{ runner.temp }}/opt/pulumi/nuget
      - name: Add NuGet packages as a local NuGet source
        run: |
          echo $(which dotnet)
          echo $(dotnet --version)
          dotnet nuget add source ${{ runner.temp }}/opt/pulumi/nuget
      - name: Set up Node ${{ inputs.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ inputs.node-version }}
          cache: yarn
          cache-dependency-path: sdk/nodejs/package.json
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip requests wheel urllib3 chardet
      - name: Setup git
        run: |
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
      - name: Update path
        run: |
          echo "${{ runner.temp }}/opt/pulumi/bin" >> $GITHUB_PATH
      - name: Fetch Tags
        run: |
          git fetch --quiet --prune --unshallow --tags
      - name: Set Go Dep path
        run: |
          echo "PULUMI_GO_DEP_ROOT=$(dirname $(pwd))" >> $GITHUB_ENV
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.5.0
        with:
          repo: pulumi/pulumictl
      - name: Ensure
        run: |
          make ensure
      - name: Lint Node
        run: |
          cd sdk/nodejs && make lint
      - name: Lint Python
        run: |
          cd sdk/python && make lint
      - name: Lint .NET
        run: |
          cd sdk/dotnet && make lint

  build:
    name: Build
    uses: pulumi/pulumi/.github/workflows/build.yml@master
    with:
      # Cross-compiling from ubuntu-latest is faster but the artifact
      # checksums will not match what publish-binaries expects.
      default-build-platform: macos-latest
      enable-coverage: true
      goreleaser-config: '.goreleaser.prerelease.yml'
      goreleaser-flags: '-p 3 --skip-publish --skip-announce --skip-validate'

  test-linux:
    name: Test Linux
    needs: build
    uses: ./.github/workflows/test-fast.yml
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name == github.repository
    with:
      enable-coverage: true
      platform: ubuntu-latest
    secrets:
      pulumi-access-token: ${{ secrets.PULUMI_PROD_ACCESS_TOKEN }}
  test-macos:
    name: Test MacOS
    needs: build
    uses: ./.github/workflows/test-fast.yml
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name == github.repository
    with:
      enable-coverage: true
      platform: macos-latest
    secrets:
      pulumi-access-token: ${{ secrets.PULUMI_PROD_ACCESS_TOKEN }}
  test-windows:
    name: Test Windows
    needs: build
    uses: ./.github/workflows/test-fast.yml
    if: github.event_name == 'repository_dispatch' || github.event.pull_request.head.repo.full_name == github.repository
    with:
      enable-coverage: true
      platform: windows-latest
    secrets:
      pulumi-access-token: ${{ secrets.PULUMI_PROD_ACCESS_TOKEN }}

  publish-binaries:
    name: Publish Binaries
    runs-on: macos-latest
    # needs: [lint, language-sdk-lint, build, test-linux, test-windows, test-macos]
    needs: [build]
    strategy:
      matrix:
        go-version: [1.17.x]
    steps:
      # This step rebuilds binaries to publish and validates that
      # their checksums match the checksums of the tested binaries;
      # since the tested binaries were build with coverage support we
      # need to match it here for checksums to match.
      - name: Enable code coverage
        run: |
          echo "PULUMI_TEST_COVERAGE_PATH=$(pwd)/coverage" >> $GITHUB_ENV
      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
          check-latest: true
      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"
      - name: Go Cache
        uses: actions/cache@v2
        id: go-cache
        if: ${{ runner.os != 'Windows' }} # Note [Windows Go Cache] in build.yml
        with:
          path: |
              ${{ steps.go-cache-paths.outputs.go-build }}
              ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-cache-${{ hashFiles('*/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Checkout Repo
        uses: actions/checkout@v2
      - name: Fetch Tags
        run: |
          git fetch --quiet --prune --unshallow --tags
      - name: Install pulumictl
        uses: jaxxstorm/action-install-gh-release@v1.5.0
        with:
          repo: pulumi/pulumictl
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: us-east-2
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          role-duration-seconds: 3600
          role-external-id: upload-pulumi-release
          role-session-name: pulumi@githubActions
          role-to-assume: ${{ secrets.AWS_UPLOAD_ROLE_ARN }}
      - name: Set PreRelease Version
        run: echo "GORELEASER_CURRENT_TAG=v$(pulumictl get version --language generic -o)" >> $GITHUB_ENV
      - name: Run GoReleaser to verify tarball checksums
        uses: goreleaser/goreleaser-action@v2
        with:
          version: latest
          args: -p 3 -f .goreleaser.prerelease.yml --rm-dist --skip-validate --skip-publish --skip-announce
      - name: Download pulumi-windows-checksums
        uses: actions/download-artifact@v2
        with:
          name: pulumi-windows-checksums
          path: artifacts/checksums/windows
      - name: Download pulumi-linux-checksums
        uses: actions/download-artifact@v2
        with:
          name: pulumi-linux-checksums
          path: artifacts/checksums/linux
      - name: Download pulumi-darwin-checksums
        uses: actions/download-artifact@v2
        with:
          name: pulumi-darwin-checksums
          path: artifacts/checksums/darwin
      - name: Verify checksums
        run: |
          C=artifacts/checksums/pulumi-tested-checksums.txt
          echo "Tested tarballs with the following checksums:"
          cat artifacts/checksums/*/* | sort | tee $C
          echo "Released tarballs with the following checksums:"
          sort goreleaser/*-checksums.txt
          echo "Checking that tested and released checksums are identical:"
          diff <(sort goreleaser/*-checksums.txt) $C
      # - name: Download pulumi-language-*
      #   run: |
      #     ./scripts/get-language-providers.sh
      # - name: Run GoReleaser to actually release
      #   uses: goreleaser/goreleaser-action@v2
      #   with:
      #     version: latest
      #     args: -p 3 -f .goreleaser.prerelease.yml --rm-dist --skip-validate
