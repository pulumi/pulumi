// *** WARNING: this file was generated by the Lumi IDL Compiler (LUMIDL). ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package s3

import (
    pbempty "github.com/golang/protobuf/ptypes/empty"
    pbstruct "github.com/golang/protobuf/ptypes/struct"
    "golang.org/x/net/context"

    "github.com/pulumi/lumi/pkg/resource"
    "github.com/pulumi/lumi/pkg/resource/plugin"
    "github.com/pulumi/lumi/pkg/tokens"
    "github.com/pulumi/lumi/pkg/util/contract"
    "github.com/pulumi/lumi/pkg/util/mapper"
    "github.com/pulumi/lumi/sdk/go/pkg/lumirpc"
)

/* RPC stubs for Object resource provider */

// ObjectToken is the type token corresponding to the Object package type.
const ObjectToken = tokens.Type("aws:s3/object:Object")

// ObjectProviderOps is a pluggable interface for Object-related management functionality.
type ObjectProviderOps interface {
    Check(ctx context.Context, obj *Object, property string) error
    Name(ctx context.Context, obj *Object) (string, error)
    Create(ctx context.Context, obj *Object) (resource.ID, error)
    Get(ctx context.Context, id resource.ID) (*Object, error)
    InspectChange(ctx context.Context,
        id resource.ID, old *Object, new *Object, diff *resource.ObjectDiff) ([]string, error)
    Update(ctx context.Context,
        id resource.ID, old *Object, new *Object, diff *resource.ObjectDiff) error
    Delete(ctx context.Context, id resource.ID) error
}

// ObjectProvider is a dynamic gRPC-based plugin for managing Object resources.
type ObjectProvider struct {
    ops ObjectProviderOps
}

// NewObjectProvider allocates a resource provider that delegates to a ops instance.
func NewObjectProvider(ops ObjectProviderOps) lumirpc.ResourceProviderServer {
    contract.Assert(ops != nil)
    return &ObjectProvider{ops: ops}
}

func (p *ObjectProvider) Check(
    ctx context.Context, req *lumirpc.CheckRequest) (*lumirpc.CheckResponse, error) {
    contract.Assert(req.GetType() == string(ObjectToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return plugin.NewCheckResponse(err), nil
    }
    var failures []error
    if failure := p.ops.Check(ctx, obj, ""); failure != nil {
        failures = append(failures, failure)
    }
    unks := req.GetUnknowns()
    if !unks["key"] {
        if failure := p.ops.Check(ctx, obj, "key"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Object", "key", failure))
        }
    }
    if !unks["bucket"] {
        if failure := p.ops.Check(ctx, obj, "bucket"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Object", "bucket", failure))
        }
    }
    if !unks["source"] {
        if failure := p.ops.Check(ctx, obj, "source"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Object", "source", failure))
        }
    }
    if !unks["contentType"] {
        if failure := p.ops.Check(ctx, obj, "contentType"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Object", "contentType", failure))
        }
    }
    if !unks["contentDisposition"] {
        if failure := p.ops.Check(ctx, obj, "contentDisposition"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Object", "contentDisposition", failure))
        }
    }
    if !unks["cacheControl"] {
        if failure := p.ops.Check(ctx, obj, "cacheControl"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Object", "cacheControl", failure))
        }
    }
    if !unks["contentEncoding"] {
        if failure := p.ops.Check(ctx, obj, "contentEncoding"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Object", "contentEncoding", failure))
        }
    }
    if !unks["contentLanguage"] {
        if failure := p.ops.Check(ctx, obj, "contentLanguage"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Object", "contentLanguage", failure))
        }
    }
    if !unks["contentLength"] {
        if failure := p.ops.Check(ctx, obj, "contentLength"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Object", "contentLength", failure))
        }
    }
    if len(failures) > 0 {
        return plugin.NewCheckResponse(resource.NewErrors(failures)), nil
    }
    return plugin.NewCheckResponse(nil), nil
}

func (p *ObjectProvider) Name(
    ctx context.Context, req *lumirpc.NameRequest) (*lumirpc.NameResponse, error) {
    contract.Assert(req.GetType() == string(ObjectToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return nil, err
    }
    name, err := p.ops.Name(ctx, obj)
    return &lumirpc.NameResponse{Name: name}, err
}

func (p *ObjectProvider) Create(
    ctx context.Context, req *lumirpc.CreateRequest) (*lumirpc.CreateResponse, error) {
    contract.Assert(req.GetType() == string(ObjectToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return nil, err
    }
    id, err := p.ops.Create(ctx, obj)
    if err != nil {
        return nil, err
    }
    return &lumirpc.CreateResponse{Id: string(id)}, nil
}

func (p *ObjectProvider) Get(
    ctx context.Context, req *lumirpc.GetRequest) (*lumirpc.GetResponse, error) {
    contract.Assert(req.GetType() == string(ObjectToken))
    id := resource.ID(req.GetId())
    obj, err := p.ops.Get(ctx, id)
    if err != nil {
        return nil, err
    }
    return &lumirpc.GetResponse{
        Properties: plugin.MarshalProperties(
            resource.NewPropertyMap(obj), plugin.MarshalOptions{}),
    }, nil
}

func (p *ObjectProvider) InspectChange(
    ctx context.Context, req *lumirpc.InspectChangeRequest) (*lumirpc.InspectChangeResponse, error) {
    contract.Assert(req.GetType() == string(ObjectToken))
    id := resource.ID(req.GetId())
    old, oldprops, err := p.Unmarshal(req.GetOlds())
    if err != nil {
        return nil, err
    }
    new, newprops, err := p.Unmarshal(req.GetNews())
    if err != nil {
        return nil, err
    }
    var replaces []string
    diff := oldprops.Diff(newprops)
    if diff != nil {
        if diff.Changed("key") {
            replaces = append(replaces, "key")
        }
        if diff.Changed("bucket") {
            replaces = append(replaces, "bucket")
        }
    }
    more, err := p.ops.InspectChange(ctx, id, old, new, diff)
    if err != nil {
        return nil, err
    }
    return &lumirpc.InspectChangeResponse{
        Replaces: append(replaces, more...),
    }, err
}

func (p *ObjectProvider) Update(
    ctx context.Context, req *lumirpc.UpdateRequest) (*pbempty.Empty, error) {
    contract.Assert(req.GetType() == string(ObjectToken))
    id := resource.ID(req.GetId())
    old, oldprops, err := p.Unmarshal(req.GetOlds())
    if err != nil {
        return nil, err
    }
    new, newprops, err := p.Unmarshal(req.GetNews())
    if err != nil {
        return nil, err
    }
    diff := oldprops.Diff(newprops)
    if err := p.ops.Update(ctx, id, old, new, diff); err != nil {
        return nil, err
    }
    return &pbempty.Empty{}, nil
}

func (p *ObjectProvider) Delete(
    ctx context.Context, req *lumirpc.DeleteRequest) (*pbempty.Empty, error) {
    contract.Assert(req.GetType() == string(ObjectToken))
    id := resource.ID(req.GetId())
    if err := p.ops.Delete(ctx, id); err != nil {
        return nil, err
    }
    return &pbempty.Empty{}, nil
}

func (p *ObjectProvider) Unmarshal(
    v *pbstruct.Struct) (*Object, resource.PropertyMap, error) {
    var obj Object
    props := plugin.UnmarshalProperties(v, plugin.MarshalOptions{RawResources: true})
    return &obj, props, mapper.MapIU(props.Mappable(), &obj)
}

/* Marshalable Object structure(s) */

// Object is a marshalable representation of its corresponding IDL type.
type Object struct {
    Key string `lumi:"key"`
    Bucket resource.ID `lumi:"bucket"`
    Source *resource.Asset `lumi:"source,optional"`
    ContentType *string `lumi:"contentType,optional"`
    ContentDisposition *string `lumi:"contentDisposition,optional"`
    CacheControl *string `lumi:"cacheControl,optional"`
    ContentEncoding *string `lumi:"contentEncoding,optional"`
    ContentLanguage *string `lumi:"contentLanguage,optional"`
    ContentLength *float64 `lumi:"contentLength,optional"`
}

// Object's properties have constants to make dealing with diffs and property bags easier.
const (
    Object_Key = "key"
    Object_Bucket = "bucket"
    Object_Source = "source"
    Object_ContentType = "contentType"
    Object_ContentDisposition = "contentDisposition"
    Object_CacheControl = "cacheControl"
    Object_ContentEncoding = "contentEncoding"
    Object_ContentLanguage = "contentLanguage"
    Object_ContentLength = "contentLength"
)


