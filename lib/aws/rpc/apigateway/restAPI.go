// *** WARNING: this file was generated by the Lumi IDL Compiler (LUMIDL). ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
    "errors"

    pbempty "github.com/golang/protobuf/ptypes/empty"
    pbstruct "github.com/golang/protobuf/ptypes/struct"
    "golang.org/x/net/context"

    "github.com/pulumi/lumi/pkg/resource"
    "github.com/pulumi/lumi/pkg/resource/plugin"
    "github.com/pulumi/lumi/pkg/tokens"
    "github.com/pulumi/lumi/pkg/util/contract"
    "github.com/pulumi/lumi/pkg/util/mapper"
    "github.com/pulumi/lumi/sdk/go/pkg/lumirpc"
)

/* RPC stubs for RestAPI resource provider */

// RestAPIToken is the type token corresponding to the RestAPI package type.
const RestAPIToken = tokens.Type("aws:apigateway/restAPI:RestAPI")

// RestAPIProviderOps is a pluggable interface for RestAPI-related management functionality.
type RestAPIProviderOps interface {
    Check(ctx context.Context, obj *RestAPI) ([]error, error)
    Create(ctx context.Context, obj *RestAPI) (resource.ID, error)
    Get(ctx context.Context, id resource.ID) (*RestAPI, error)
    InspectChange(ctx context.Context,
        id resource.ID, old *RestAPI, new *RestAPI, diff *resource.ObjectDiff) ([]string, error)
    Update(ctx context.Context,
        id resource.ID, old *RestAPI, new *RestAPI, diff *resource.ObjectDiff) error
    Delete(ctx context.Context, id resource.ID) error
}

// RestAPIProvider is a dynamic gRPC-based plugin for managing RestAPI resources.
type RestAPIProvider struct {
    ops RestAPIProviderOps
}

// NewRestAPIProvider allocates a resource provider that delegates to a ops instance.
func NewRestAPIProvider(ops RestAPIProviderOps) lumirpc.ResourceProviderServer {
    contract.Assert(ops != nil)
    return &RestAPIProvider{ops: ops}
}

func (p *RestAPIProvider) Check(
    ctx context.Context, req *lumirpc.CheckRequest) (*lumirpc.CheckResponse, error) {
    contract.Assert(req.GetType() == string(RestAPIToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return plugin.NewCheckResponse(err), nil
    }
    if failures, err := p.ops.Check(ctx, obj); err != nil {
        return nil, err
    } else if len(failures) > 0 {
        return plugin.NewCheckResponse(resource.NewErrors(failures)), nil
    }
    return plugin.NewCheckResponse(nil), nil
}

func (p *RestAPIProvider) Name(
    ctx context.Context, req *lumirpc.NameRequest) (*lumirpc.NameResponse, error) {
    contract.Assert(req.GetType() == string(RestAPIToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return nil, err
    }
    if obj.Name == nil || *obj.Name == "" {
        if req.Unknowns[RestAPI_Name] {
            return nil, errors.New("Name property cannot be computed from unknown outputs")
        }
        return nil, errors.New("Name property cannot be empty")
    }
    return &lumirpc.NameResponse{Name: *obj.Name}, nil
}

func (p *RestAPIProvider) Create(
    ctx context.Context, req *lumirpc.CreateRequest) (*lumirpc.CreateResponse, error) {
    contract.Assert(req.GetType() == string(RestAPIToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return nil, err
    }
    id, err := p.ops.Create(ctx, obj)
    if err != nil {
        return nil, err
    }
    return &lumirpc.CreateResponse{Id: string(id)}, nil
}

func (p *RestAPIProvider) Get(
    ctx context.Context, req *lumirpc.GetRequest) (*lumirpc.GetResponse, error) {
    contract.Assert(req.GetType() == string(RestAPIToken))
    id := resource.ID(req.GetId())
    obj, err := p.ops.Get(ctx, id)
    if err != nil {
        return nil, err
    }
    return &lumirpc.GetResponse{
        Properties: plugin.MarshalProperties(
            nil, resource.NewPropertyMap(obj), plugin.MarshalOptions{}),
    }, nil
}

func (p *RestAPIProvider) InspectChange(
    ctx context.Context, req *lumirpc.InspectChangeRequest) (*lumirpc.InspectChangeResponse, error) {
    contract.Assert(req.GetType() == string(RestAPIToken))
    id := resource.ID(req.GetId())
    old, oldprops, err := p.Unmarshal(req.GetOlds())
    if err != nil {
        return nil, err
    }
    new, newprops, err := p.Unmarshal(req.GetNews())
    if err != nil {
        return nil, err
    }
    var replaces []string
    diff := oldprops.Diff(newprops)
    if diff != nil {
        if diff.Changed("name") {
            replaces = append(replaces, "name")
        }
    }
    more, err := p.ops.InspectChange(ctx, id, old, new, diff)
    if err != nil {
        return nil, err
    }
    return &lumirpc.InspectChangeResponse{
        Replaces: append(replaces, more...),
    }, err
}

func (p *RestAPIProvider) Update(
    ctx context.Context, req *lumirpc.UpdateRequest) (*pbempty.Empty, error) {
    contract.Assert(req.GetType() == string(RestAPIToken))
    id := resource.ID(req.GetId())
    old, oldprops, err := p.Unmarshal(req.GetOlds())
    if err != nil {
        return nil, err
    }
    new, newprops, err := p.Unmarshal(req.GetNews())
    if err != nil {
        return nil, err
    }
    diff := oldprops.Diff(newprops)
    if err := p.ops.Update(ctx, id, old, new, diff); err != nil {
        return nil, err
    }
    return &pbempty.Empty{}, nil
}

func (p *RestAPIProvider) Delete(
    ctx context.Context, req *lumirpc.DeleteRequest) (*pbempty.Empty, error) {
    contract.Assert(req.GetType() == string(RestAPIToken))
    id := resource.ID(req.GetId())
    if err := p.ops.Delete(ctx, id); err != nil {
        return nil, err
    }
    return &pbempty.Empty{}, nil
}

func (p *RestAPIProvider) Unmarshal(
    v *pbstruct.Struct) (*RestAPI, resource.PropertyMap, error) {
    var obj RestAPI
    props := plugin.UnmarshalProperties(nil, v, plugin.MarshalOptions{RawResources: true})
    return &obj, props, mapper.MapIU(props.Mappable(), &obj)
}

/* Marshalable RestAPI structure(s) */

// RestAPI is a marshalable representation of its corresponding IDL type.
type RestAPI struct {
    Name *string `lumi:"name,optional"`
    Body *interface{} `lumi:"body,optional"`
    BodyS3Location *S3Location `lumi:"bodyS3Location,optional"`
    CloneFrom *resource.ID `lumi:"cloneFrom,optional"`
    Description *string `lumi:"description,optional"`
    FailOnWarnings *bool `lumi:"failOnWarnings,optional"`
    APIName *string `lumi:"apiName,optional"`
    Parameters *[]string `lumi:"parameters,optional"`
    ID string `lumi:"id,optional"`
    CreatedDate string `lumi:"createdDate,optional"`
    Version string `lumi:"version,optional"`
    Warnings []string `lumi:"warnings,optional"`
    BinaryMediaTypes []string `lumi:"binaryMediaTypes,optional"`
}

// RestAPI's properties have constants to make dealing with diffs and property bags easier.
const (
    RestAPI_Name = "name"
    RestAPI_Body = "body"
    RestAPI_BodyS3Location = "bodyS3Location"
    RestAPI_CloneFrom = "cloneFrom"
    RestAPI_Description = "description"
    RestAPI_FailOnWarnings = "failOnWarnings"
    RestAPI_APIName = "apiName"
    RestAPI_Parameters = "parameters"
    RestAPI_ID = "id"
    RestAPI_CreatedDate = "createdDate"
    RestAPI_Version = "version"
    RestAPI_Warnings = "warnings"
    RestAPI_BinaryMediaTypes = "binaryMediaTypes"
)

/* Marshalable S3Location structure(s) */

// S3Location is a marshalable representation of its corresponding IDL type.
type S3Location struct {
    Object resource.ID `lumi:"object"`
    ETag *string `lumi:"etag,optional"`
    Version *string `lumi:"version,optional"`
}

// S3Location's properties have constants to make dealing with diffs and property bags easier.
const (
    S3Location_Object = "object"
    S3Location_ETag = "etag"
    S3Location_Version = "version"
)


