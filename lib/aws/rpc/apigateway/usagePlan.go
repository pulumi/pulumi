// *** WARNING: this file was generated by the Lumi IDL Compiler (LUMIDL). ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package apigateway

import (
    "errors"

    pbempty "github.com/golang/protobuf/ptypes/empty"
    pbstruct "github.com/golang/protobuf/ptypes/struct"
    "golang.org/x/net/context"

    "github.com/pulumi/lumi/pkg/resource"
    "github.com/pulumi/lumi/pkg/resource/plugin"
    "github.com/pulumi/lumi/pkg/tokens"
    "github.com/pulumi/lumi/pkg/util/contract"
    "github.com/pulumi/lumi/pkg/util/mapper"
    "github.com/pulumi/lumi/sdk/go/pkg/lumirpc"
)

/* Marshalable APIStage structure(s) */

// APIStage is a marshalable representation of its corresponding IDL type.
type APIStage struct {
    API *resource.ID `lumi:"api,optional"`
    Stage *resource.ID `lumi:"stage,optional"`
}

// APIStage's properties have constants to make dealing with diffs and property bags easier.
const (
    APIStage_API = "api"
    APIStage_Stage = "stage"
)

/* Marshalable QuotaSettings structure(s) */

// QuotaSettings is a marshalable representation of its corresponding IDL type.
type QuotaSettings struct {
    Limit *float64 `lumi:"limit,optional"`
    Offset *float64 `lumi:"offset,optional"`
    Period *QuotaPeriod `lumi:"period,optional"`
}

// QuotaSettings's properties have constants to make dealing with diffs and property bags easier.
const (
    QuotaSettings_Limit = "limit"
    QuotaSettings_Offset = "offset"
    QuotaSettings_Period = "period"
)

/* Marshalable ThrottleSettings structure(s) */

// ThrottleSettings is a marshalable representation of its corresponding IDL type.
type ThrottleSettings struct {
    BurstRateLimit *float64 `lumi:"burstRateLimit,optional"`
    RateLimit *float64 `lumi:"rateLimit,optional"`
}

// ThrottleSettings's properties have constants to make dealing with diffs and property bags easier.
const (
    ThrottleSettings_BurstRateLimit = "burstRateLimit"
    ThrottleSettings_RateLimit = "rateLimit"
)

/* RPC stubs for UsagePlan resource provider */

// UsagePlanToken is the type token corresponding to the UsagePlan package type.
const UsagePlanToken = tokens.Type("aws:apigateway/usagePlan:UsagePlan")

// UsagePlanProviderOps is a pluggable interface for UsagePlan-related management functionality.
type UsagePlanProviderOps interface {
    Check(ctx context.Context, obj *UsagePlan, property string) error
    Create(ctx context.Context, obj *UsagePlan) (resource.ID, error)
    Get(ctx context.Context, id resource.ID) (*UsagePlan, error)
    InspectChange(ctx context.Context,
        id resource.ID, old *UsagePlan, new *UsagePlan, diff *resource.ObjectDiff) ([]string, error)
    Update(ctx context.Context,
        id resource.ID, old *UsagePlan, new *UsagePlan, diff *resource.ObjectDiff) error
    Delete(ctx context.Context, id resource.ID) error
}

// UsagePlanProvider is a dynamic gRPC-based plugin for managing UsagePlan resources.
type UsagePlanProvider struct {
    ops UsagePlanProviderOps
}

// NewUsagePlanProvider allocates a resource provider that delegates to a ops instance.
func NewUsagePlanProvider(ops UsagePlanProviderOps) lumirpc.ResourceProviderServer {
    contract.Assert(ops != nil)
    return &UsagePlanProvider{ops: ops}
}

func (p *UsagePlanProvider) Check(
    ctx context.Context, req *lumirpc.CheckRequest) (*lumirpc.CheckResponse, error) {
    contract.Assert(req.GetType() == string(UsagePlanToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return plugin.NewCheckResponse(err), nil
    }
    var failures []error
    if failure := p.ops.Check(ctx, obj, ""); failure != nil {
        failures = append(failures, failure)
    }
    unks := req.GetUnknowns()
    if !unks["name"] {
        if failure := p.ops.Check(ctx, obj, "name"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("UsagePlan", "name", failure))
        }
    }
    if !unks["apiStages"] {
        if failure := p.ops.Check(ctx, obj, "apiStages"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("UsagePlan", "apiStages", failure))
        }
    }
    if !unks["description"] {
        if failure := p.ops.Check(ctx, obj, "description"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("UsagePlan", "description", failure))
        }
    }
    if !unks["quota"] {
        if failure := p.ops.Check(ctx, obj, "quota"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("UsagePlan", "quota", failure))
        }
    }
    if !unks["throttle"] {
        if failure := p.ops.Check(ctx, obj, "throttle"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("UsagePlan", "throttle", failure))
        }
    }
    if !unks["usagePlanName"] {
        if failure := p.ops.Check(ctx, obj, "usagePlanName"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("UsagePlan", "usagePlanName", failure))
        }
    }
    if len(failures) > 0 {
        return plugin.NewCheckResponse(resource.NewErrors(failures)), nil
    }
    return plugin.NewCheckResponse(nil), nil
}

func (p *UsagePlanProvider) Name(
    ctx context.Context, req *lumirpc.NameRequest) (*lumirpc.NameResponse, error) {
    contract.Assert(req.GetType() == string(UsagePlanToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return nil, err
    }
    if obj.Name == nil || *obj.Name == "" {
        if req.Unknowns[UsagePlan_Name] {
            return nil, errors.New("Name property cannot be computed from unknown outputs")
        }
        return nil, errors.New("Name property cannot be empty")
    }
    return &lumirpc.NameResponse{Name: *obj.Name}, nil
}

func (p *UsagePlanProvider) Create(
    ctx context.Context, req *lumirpc.CreateRequest) (*lumirpc.CreateResponse, error) {
    contract.Assert(req.GetType() == string(UsagePlanToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return nil, err
    }
    id, err := p.ops.Create(ctx, obj)
    if err != nil {
        return nil, err
    }
    return &lumirpc.CreateResponse{Id: string(id)}, nil
}

func (p *UsagePlanProvider) Get(
    ctx context.Context, req *lumirpc.GetRequest) (*lumirpc.GetResponse, error) {
    contract.Assert(req.GetType() == string(UsagePlanToken))
    id := resource.ID(req.GetId())
    obj, err := p.ops.Get(ctx, id)
    if err != nil {
        return nil, err
    }
    return &lumirpc.GetResponse{
        Properties: plugin.MarshalProperties(
            nil, resource.NewPropertyMap(obj), plugin.MarshalOptions{}),
    }, nil
}

func (p *UsagePlanProvider) InspectChange(
    ctx context.Context, req *lumirpc.InspectChangeRequest) (*lumirpc.InspectChangeResponse, error) {
    contract.Assert(req.GetType() == string(UsagePlanToken))
    id := resource.ID(req.GetId())
    old, oldprops, err := p.Unmarshal(req.GetOlds())
    if err != nil {
        return nil, err
    }
    new, newprops, err := p.Unmarshal(req.GetNews())
    if err != nil {
        return nil, err
    }
    var replaces []string
    diff := oldprops.Diff(newprops)
    if diff != nil {
        if diff.Changed("name") {
            replaces = append(replaces, "name")
        }
    }
    more, err := p.ops.InspectChange(ctx, id, old, new, diff)
    if err != nil {
        return nil, err
    }
    return &lumirpc.InspectChangeResponse{
        Replaces: append(replaces, more...),
    }, err
}

func (p *UsagePlanProvider) Update(
    ctx context.Context, req *lumirpc.UpdateRequest) (*pbempty.Empty, error) {
    contract.Assert(req.GetType() == string(UsagePlanToken))
    id := resource.ID(req.GetId())
    old, oldprops, err := p.Unmarshal(req.GetOlds())
    if err != nil {
        return nil, err
    }
    new, newprops, err := p.Unmarshal(req.GetNews())
    if err != nil {
        return nil, err
    }
    diff := oldprops.Diff(newprops)
    if err := p.ops.Update(ctx, id, old, new, diff); err != nil {
        return nil, err
    }
    return &pbempty.Empty{}, nil
}

func (p *UsagePlanProvider) Delete(
    ctx context.Context, req *lumirpc.DeleteRequest) (*pbempty.Empty, error) {
    contract.Assert(req.GetType() == string(UsagePlanToken))
    id := resource.ID(req.GetId())
    if err := p.ops.Delete(ctx, id); err != nil {
        return nil, err
    }
    return &pbempty.Empty{}, nil
}

func (p *UsagePlanProvider) Unmarshal(
    v *pbstruct.Struct) (*UsagePlan, resource.PropertyMap, error) {
    var obj UsagePlan
    props := plugin.UnmarshalProperties(nil, v, plugin.MarshalOptions{RawResources: true})
    return &obj, props, mapper.MapIU(props.Mappable(), &obj)
}

/* Marshalable UsagePlan structure(s) */

// UsagePlan is a marshalable representation of its corresponding IDL type.
type UsagePlan struct {
    Name *string `lumi:"name,optional"`
    APIStages *[]APIStage `lumi:"apiStages,optional"`
    Description *string `lumi:"description,optional"`
    Quota *QuotaSettings `lumi:"quota,optional"`
    Throttle *ThrottleSettings `lumi:"throttle,optional"`
    UsagePlanName *string `lumi:"usagePlanName,optional"`
}

// UsagePlan's properties have constants to make dealing with diffs and property bags easier.
const (
    UsagePlan_Name = "name"
    UsagePlan_APIStages = "apiStages"
    UsagePlan_Description = "description"
    UsagePlan_Quota = "quota"
    UsagePlan_Throttle = "throttle"
    UsagePlan_UsagePlanName = "usagePlanName"
)

/* Typedefs */

type (
    QuotaPeriod string
)

/* Constants */

const (
    QuotaDayPeriod QuotaPeriod = "DAY"
    QuotaMonthPeriod QuotaPeriod = "MONTH"
    QuotaWeekPeriod QuotaPeriod = "WEEK"
)


