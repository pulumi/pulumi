// *** WARNING: this file was generated by the Lumi IDL Compiler (LUMIDL). ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
    "errors"

    pbempty "github.com/golang/protobuf/ptypes/empty"
    pbstruct "github.com/golang/protobuf/ptypes/struct"
    "golang.org/x/net/context"

    "github.com/pulumi/lumi/pkg/resource"
    "github.com/pulumi/lumi/pkg/resource/plugin"
    "github.com/pulumi/lumi/pkg/tokens"
    "github.com/pulumi/lumi/pkg/util/contract"
    "github.com/pulumi/lumi/pkg/util/mapper"
    "github.com/pulumi/lumi/sdk/go/pkg/lumirpc"

    __aws "github.com/pulumi/lumi/lib/aws/rpc"
)

/* RPC stubs for Role resource provider */

// RoleToken is the type token corresponding to the Role package type.
const RoleToken = tokens.Type("aws:iam/role:Role")

// RoleProviderOps is a pluggable interface for Role-related management functionality.
type RoleProviderOps interface {
    Check(ctx context.Context, obj *Role, property string) error
    Create(ctx context.Context, obj *Role) (resource.ID, error)
    Get(ctx context.Context, id resource.ID) (*Role, error)
    InspectChange(ctx context.Context,
        id resource.ID, old *Role, new *Role, diff *resource.ObjectDiff) ([]string, error)
    Update(ctx context.Context,
        id resource.ID, old *Role, new *Role, diff *resource.ObjectDiff) error
    Delete(ctx context.Context, id resource.ID) error
}

// RoleProvider is a dynamic gRPC-based plugin for managing Role resources.
type RoleProvider struct {
    ops RoleProviderOps
}

// NewRoleProvider allocates a resource provider that delegates to a ops instance.
func NewRoleProvider(ops RoleProviderOps) lumirpc.ResourceProviderServer {
    contract.Assert(ops != nil)
    return &RoleProvider{ops: ops}
}

func (p *RoleProvider) Check(
    ctx context.Context, req *lumirpc.CheckRequest) (*lumirpc.CheckResponse, error) {
    contract.Assert(req.GetType() == string(RoleToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return plugin.NewCheckResponse(err), nil
    }
    var failures []error
    if failure := p.ops.Check(ctx, obj, ""); failure != nil {
        failures = append(failures, failure)
    }
    unks := req.GetUnknowns()
    if !unks["name"] {
        if failure := p.ops.Check(ctx, obj, "name"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Role", "name", failure))
        }
    }
    if !unks["assumeRolePolicyDocument"] {
        if failure := p.ops.Check(ctx, obj, "assumeRolePolicyDocument"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Role", "assumeRolePolicyDocument", failure))
        }
    }
    if !unks["path"] {
        if failure := p.ops.Check(ctx, obj, "path"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Role", "path", failure))
        }
    }
    if !unks["roleName"] {
        if failure := p.ops.Check(ctx, obj, "roleName"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Role", "roleName", failure))
        }
    }
    if !unks["managedPolicyARNs"] {
        if failure := p.ops.Check(ctx, obj, "managedPolicyARNs"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Role", "managedPolicyARNs", failure))
        }
    }
    if !unks["policies"] {
        if failure := p.ops.Check(ctx, obj, "policies"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Role", "policies", failure))
        }
    }
    if len(failures) > 0 {
        return plugin.NewCheckResponse(resource.NewErrors(failures)), nil
    }
    return plugin.NewCheckResponse(nil), nil
}

func (p *RoleProvider) Name(
    ctx context.Context, req *lumirpc.NameRequest) (*lumirpc.NameResponse, error) {
    contract.Assert(req.GetType() == string(RoleToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return nil, err
    }
    if obj.Name == nil || *obj.Name == "" {
        if req.Unknowns[Role_Name] {
            return nil, errors.New("Name property cannot be computed from unknown outputs")
        }
        return nil, errors.New("Name property cannot be empty")
    }
    return &lumirpc.NameResponse{Name: *obj.Name}, nil
}

func (p *RoleProvider) Create(
    ctx context.Context, req *lumirpc.CreateRequest) (*lumirpc.CreateResponse, error) {
    contract.Assert(req.GetType() == string(RoleToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return nil, err
    }
    id, err := p.ops.Create(ctx, obj)
    if err != nil {
        return nil, err
    }
    return &lumirpc.CreateResponse{Id: string(id)}, nil
}

func (p *RoleProvider) Get(
    ctx context.Context, req *lumirpc.GetRequest) (*lumirpc.GetResponse, error) {
    contract.Assert(req.GetType() == string(RoleToken))
    id := resource.ID(req.GetId())
    obj, err := p.ops.Get(ctx, id)
    if err != nil {
        return nil, err
    }
    return &lumirpc.GetResponse{
        Properties: plugin.MarshalProperties(
            resource.NewPropertyMap(obj), plugin.MarshalOptions{}),
    }, nil
}

func (p *RoleProvider) InspectChange(
    ctx context.Context, req *lumirpc.InspectChangeRequest) (*lumirpc.InspectChangeResponse, error) {
    contract.Assert(req.GetType() == string(RoleToken))
    id := resource.ID(req.GetId())
    old, oldprops, err := p.Unmarshal(req.GetOlds())
    if err != nil {
        return nil, err
    }
    new, newprops, err := p.Unmarshal(req.GetNews())
    if err != nil {
        return nil, err
    }
    var replaces []string
    diff := oldprops.Diff(newprops)
    if diff != nil {
        if diff.Changed("name") {
            replaces = append(replaces, "name")
        }
        if diff.Changed("path") {
            replaces = append(replaces, "path")
        }
        if diff.Changed("roleName") {
            replaces = append(replaces, "roleName")
        }
    }
    more, err := p.ops.InspectChange(ctx, id, old, new, diff)
    if err != nil {
        return nil, err
    }
    return &lumirpc.InspectChangeResponse{
        Replaces: append(replaces, more...),
    }, err
}

func (p *RoleProvider) Update(
    ctx context.Context, req *lumirpc.UpdateRequest) (*pbempty.Empty, error) {
    contract.Assert(req.GetType() == string(RoleToken))
    id := resource.ID(req.GetId())
    old, oldprops, err := p.Unmarshal(req.GetOlds())
    if err != nil {
        return nil, err
    }
    new, newprops, err := p.Unmarshal(req.GetNews())
    if err != nil {
        return nil, err
    }
    diff := oldprops.Diff(newprops)
    if err := p.ops.Update(ctx, id, old, new, diff); err != nil {
        return nil, err
    }
    return &pbempty.Empty{}, nil
}

func (p *RoleProvider) Delete(
    ctx context.Context, req *lumirpc.DeleteRequest) (*pbempty.Empty, error) {
    contract.Assert(req.GetType() == string(RoleToken))
    id := resource.ID(req.GetId())
    if err := p.ops.Delete(ctx, id); err != nil {
        return nil, err
    }
    return &pbempty.Empty{}, nil
}

func (p *RoleProvider) Unmarshal(
    v *pbstruct.Struct) (*Role, resource.PropertyMap, error) {
    var obj Role
    props := plugin.UnmarshalProperties(v, plugin.MarshalOptions{RawResources: true})
    return &obj, props, mapper.MapIU(props.Mappable(), &obj)
}

/* Marshalable Role structure(s) */

// Role is a marshalable representation of its corresponding IDL type.
type Role struct {
    Name *string `lumi:"name,optional"`
    AssumeRolePolicyDocument interface{} `lumi:"assumeRolePolicyDocument"`
    Path *string `lumi:"path,optional"`
    RoleName *string `lumi:"roleName,optional"`
    ManagedPolicyARNs *[]__aws.ARN `lumi:"managedPolicyARNs,optional"`
    Policies *[]InlinePolicy `lumi:"policies,optional"`
    ARN __aws.ARN `lumi:"arn,optional"`
}

// Role's properties have constants to make dealing with diffs and property bags easier.
const (
    Role_Name = "name"
    Role_AssumeRolePolicyDocument = "assumeRolePolicyDocument"
    Role_Path = "path"
    Role_RoleName = "roleName"
    Role_ManagedPolicyARNs = "managedPolicyARNs"
    Role_Policies = "policies"
    Role_ARN = "arn"
)


