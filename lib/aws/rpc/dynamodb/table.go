// *** WARNING: this file was generated by the Lumi IDL Compiler (LUMIDL). ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package dynamodb

import (
    "errors"

    pbempty "github.com/golang/protobuf/ptypes/empty"
    pbstruct "github.com/golang/protobuf/ptypes/struct"
    "golang.org/x/net/context"

    "github.com/pulumi/lumi/pkg/resource"
    "github.com/pulumi/lumi/pkg/resource/plugin"
    "github.com/pulumi/lumi/pkg/tokens"
    "github.com/pulumi/lumi/pkg/util/contract"
    "github.com/pulumi/lumi/pkg/util/mapper"
    "github.com/pulumi/lumi/sdk/go/pkg/lumirpc"
)

/* Marshalable Attribute structure(s) */

// Attribute is a marshalable representation of its corresponding IDL type.
type Attribute struct {
    Name string `lumi:"name"`
    Type AttributeType `lumi:"type"`
}

// Attribute's properties have constants to make dealing with diffs and property bags easier.
const (
    Attribute_Name = "name"
    Attribute_Type = "type"
)

/* Marshalable GlobalSecondaryIndex structure(s) */

// GlobalSecondaryIndex is a marshalable representation of its corresponding IDL type.
type GlobalSecondaryIndex struct {
    IndexName string `lumi:"indexName"`
    HashKey string `lumi:"hashKey"`
    RangeKey *string `lumi:"rangeKey,optional"`
    ReadCapacity float64 `lumi:"readCapacity"`
    WriteCapacity float64 `lumi:"writeCapacity"`
    NonKeyAttributes []string `lumi:"nonKeyAttributes"`
    ProjectionType ProjectionType `lumi:"projectionType"`
}

// GlobalSecondaryIndex's properties have constants to make dealing with diffs and property bags easier.
const (
    GlobalSecondaryIndex_IndexName = "indexName"
    GlobalSecondaryIndex_HashKey = "hashKey"
    GlobalSecondaryIndex_RangeKey = "rangeKey"
    GlobalSecondaryIndex_ReadCapacity = "readCapacity"
    GlobalSecondaryIndex_WriteCapacity = "writeCapacity"
    GlobalSecondaryIndex_NonKeyAttributes = "nonKeyAttributes"
    GlobalSecondaryIndex_ProjectionType = "projectionType"
)

/* RPC stubs for Table resource provider */

// TableToken is the type token corresponding to the Table package type.
const TableToken = tokens.Type("aws:dynamodb/table:Table")

// TableProviderOps is a pluggable interface for Table-related management functionality.
type TableProviderOps interface {
    Check(ctx context.Context, obj *Table, property string) error
    Create(ctx context.Context, obj *Table) (resource.ID, error)
    Get(ctx context.Context, id resource.ID) (*Table, error)
    InspectChange(ctx context.Context,
        id resource.ID, old *Table, new *Table, diff *resource.ObjectDiff) ([]string, error)
    Update(ctx context.Context,
        id resource.ID, old *Table, new *Table, diff *resource.ObjectDiff) error
    Delete(ctx context.Context, id resource.ID) error
}

// TableProvider is a dynamic gRPC-based plugin for managing Table resources.
type TableProvider struct {
    ops TableProviderOps
}

// NewTableProvider allocates a resource provider that delegates to a ops instance.
func NewTableProvider(ops TableProviderOps) lumirpc.ResourceProviderServer {
    contract.Assert(ops != nil)
    return &TableProvider{ops: ops}
}

func (p *TableProvider) Check(
    ctx context.Context, req *lumirpc.CheckRequest) (*lumirpc.CheckResponse, error) {
    contract.Assert(req.GetType() == string(TableToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return plugin.NewCheckResponse(err), nil
    }
    var failures []error
    if failure := p.ops.Check(ctx, obj, ""); failure != nil {
        failures = append(failures, failure)
    }
    unks := req.GetUnknowns()
    if !unks["name"] {
        if failure := p.ops.Check(ctx, obj, "name"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Table", "name", failure))
        }
    }
    if !unks["hashKey"] {
        if failure := p.ops.Check(ctx, obj, "hashKey"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Table", "hashKey", failure))
        }
    }
    if !unks["attributes"] {
        if failure := p.ops.Check(ctx, obj, "attributes"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Table", "attributes", failure))
        }
    }
    if !unks["readCapacity"] {
        if failure := p.ops.Check(ctx, obj, "readCapacity"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Table", "readCapacity", failure))
        }
    }
    if !unks["writeCapacity"] {
        if failure := p.ops.Check(ctx, obj, "writeCapacity"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Table", "writeCapacity", failure))
        }
    }
    if !unks["rangeKey"] {
        if failure := p.ops.Check(ctx, obj, "rangeKey"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Table", "rangeKey", failure))
        }
    }
    if !unks["tableName"] {
        if failure := p.ops.Check(ctx, obj, "tableName"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Table", "tableName", failure))
        }
    }
    if !unks["globalSecondaryIndexes"] {
        if failure := p.ops.Check(ctx, obj, "globalSecondaryIndexes"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("Table", "globalSecondaryIndexes", failure))
        }
    }
    if len(failures) > 0 {
        return plugin.NewCheckResponse(resource.NewErrors(failures)), nil
    }
    return plugin.NewCheckResponse(nil), nil
}

func (p *TableProvider) Name(
    ctx context.Context, req *lumirpc.NameRequest) (*lumirpc.NameResponse, error) {
    contract.Assert(req.GetType() == string(TableToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return nil, err
    }
    if obj.Name == nil || *obj.Name == "" {
        if req.Unknowns[Table_Name] {
            return nil, errors.New("Name property cannot be computed from unknown outputs")
        }
        return nil, errors.New("Name property cannot be empty")
    }
    return &lumirpc.NameResponse{Name: *obj.Name}, nil
}

func (p *TableProvider) Create(
    ctx context.Context, req *lumirpc.CreateRequest) (*lumirpc.CreateResponse, error) {
    contract.Assert(req.GetType() == string(TableToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return nil, err
    }
    id, err := p.ops.Create(ctx, obj)
    if err != nil {
        return nil, err
    }
    return &lumirpc.CreateResponse{Id: string(id)}, nil
}

func (p *TableProvider) Get(
    ctx context.Context, req *lumirpc.GetRequest) (*lumirpc.GetResponse, error) {
    contract.Assert(req.GetType() == string(TableToken))
    id := resource.ID(req.GetId())
    obj, err := p.ops.Get(ctx, id)
    if err != nil {
        return nil, err
    }
    return &lumirpc.GetResponse{
        Properties: plugin.MarshalProperties(
            resource.NewPropertyMap(obj), plugin.MarshalOptions{}),
    }, nil
}

func (p *TableProvider) InspectChange(
    ctx context.Context, req *lumirpc.InspectChangeRequest) (*lumirpc.InspectChangeResponse, error) {
    contract.Assert(req.GetType() == string(TableToken))
    id := resource.ID(req.GetId())
    old, oldprops, err := p.Unmarshal(req.GetOlds())
    if err != nil {
        return nil, err
    }
    new, newprops, err := p.Unmarshal(req.GetNews())
    if err != nil {
        return nil, err
    }
    var replaces []string
    diff := oldprops.Diff(newprops)
    if diff != nil {
        if diff.Changed("name") {
            replaces = append(replaces, "name")
        }
        if diff.Changed("hashKey") {
            replaces = append(replaces, "hashKey")
        }
        if diff.Changed("rangeKey") {
            replaces = append(replaces, "rangeKey")
        }
        if diff.Changed("tableName") {
            replaces = append(replaces, "tableName")
        }
    }
    more, err := p.ops.InspectChange(ctx, id, old, new, diff)
    if err != nil {
        return nil, err
    }
    return &lumirpc.InspectChangeResponse{
        Replaces: append(replaces, more...),
    }, err
}

func (p *TableProvider) Update(
    ctx context.Context, req *lumirpc.UpdateRequest) (*pbempty.Empty, error) {
    contract.Assert(req.GetType() == string(TableToken))
    id := resource.ID(req.GetId())
    old, oldprops, err := p.Unmarshal(req.GetOlds())
    if err != nil {
        return nil, err
    }
    new, newprops, err := p.Unmarshal(req.GetNews())
    if err != nil {
        return nil, err
    }
    diff := oldprops.Diff(newprops)
    if err := p.ops.Update(ctx, id, old, new, diff); err != nil {
        return nil, err
    }
    return &pbempty.Empty{}, nil
}

func (p *TableProvider) Delete(
    ctx context.Context, req *lumirpc.DeleteRequest) (*pbempty.Empty, error) {
    contract.Assert(req.GetType() == string(TableToken))
    id := resource.ID(req.GetId())
    if err := p.ops.Delete(ctx, id); err != nil {
        return nil, err
    }
    return &pbempty.Empty{}, nil
}

func (p *TableProvider) Unmarshal(
    v *pbstruct.Struct) (*Table, resource.PropertyMap, error) {
    var obj Table
    props := plugin.UnmarshalProperties(v, plugin.MarshalOptions{RawResources: true})
    return &obj, props, mapper.MapIU(props.Mappable(), &obj)
}

/* Marshalable Table structure(s) */

// Table is a marshalable representation of its corresponding IDL type.
type Table struct {
    Name *string `lumi:"name,optional"`
    HashKey string `lumi:"hashKey"`
    Attributes []Attribute `lumi:"attributes"`
    ReadCapacity float64 `lumi:"readCapacity"`
    WriteCapacity float64 `lumi:"writeCapacity"`
    RangeKey *string `lumi:"rangeKey,optional"`
    TableName *string `lumi:"tableName,optional"`
    GlobalSecondaryIndexes *[]GlobalSecondaryIndex `lumi:"globalSecondaryIndexes,optional"`
}

// Table's properties have constants to make dealing with diffs and property bags easier.
const (
    Table_Name = "name"
    Table_HashKey = "hashKey"
    Table_Attributes = "attributes"
    Table_ReadCapacity = "readCapacity"
    Table_WriteCapacity = "writeCapacity"
    Table_RangeKey = "rangeKey"
    Table_TableName = "tableName"
    Table_GlobalSecondaryIndexes = "globalSecondaryIndexes"
)

/* Typedefs */

type (
    AttributeType string
    ProjectionType string
)

/* Constants */

const (
    AllProjection ProjectionType = "ALL"
    BinaryAttribute AttributeType = "B"
    IncludeProjection ProjectionType = "INCLUDE"
    KeysOnlyProjection ProjectionType = "KEYS_ONLY"
    NumberAttribute AttributeType = "N"
    StringAttribute AttributeType = "S"
)


