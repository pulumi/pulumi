// *** WARNING: this file was generated by the Lumi IDL Compiler (LUMIDL). ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudwatch

import (
    "errors"

    pbempty "github.com/golang/protobuf/ptypes/empty"
    pbstruct "github.com/golang/protobuf/ptypes/struct"
    "golang.org/x/net/context"

    "github.com/pulumi/lumi/pkg/resource"
    "github.com/pulumi/lumi/pkg/resource/plugin"
    "github.com/pulumi/lumi/pkg/tokens"
    "github.com/pulumi/lumi/pkg/util/contract"
    "github.com/pulumi/lumi/pkg/util/mapper"
    "github.com/pulumi/lumi/sdk/go/pkg/lumirpc"

    __aws "github.com/pulumi/lumi/lib/aws/rpc"
)

/* RPC stubs for LogSubscriptionFilter resource provider */

// LogSubscriptionFilterToken is the type token corresponding to the LogSubscriptionFilter package type.
const LogSubscriptionFilterToken = tokens.Type("aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter")

// LogSubscriptionFilterProviderOps is a pluggable interface for LogSubscriptionFilter-related management functionality.
type LogSubscriptionFilterProviderOps interface {
    Check(ctx context.Context, obj *LogSubscriptionFilter, property string) error
    Create(ctx context.Context, obj *LogSubscriptionFilter) (resource.ID, error)
    Get(ctx context.Context, id resource.ID) (*LogSubscriptionFilter, error)
    InspectChange(ctx context.Context,
        id resource.ID, old *LogSubscriptionFilter, new *LogSubscriptionFilter, diff *resource.ObjectDiff) ([]string, error)
    Update(ctx context.Context,
        id resource.ID, old *LogSubscriptionFilter, new *LogSubscriptionFilter, diff *resource.ObjectDiff) error
    Delete(ctx context.Context, id resource.ID) error
}

// LogSubscriptionFilterProvider is a dynamic gRPC-based plugin for managing LogSubscriptionFilter resources.
type LogSubscriptionFilterProvider struct {
    ops LogSubscriptionFilterProviderOps
}

// NewLogSubscriptionFilterProvider allocates a resource provider that delegates to a ops instance.
func NewLogSubscriptionFilterProvider(ops LogSubscriptionFilterProviderOps) lumirpc.ResourceProviderServer {
    contract.Assert(ops != nil)
    return &LogSubscriptionFilterProvider{ops: ops}
}

func (p *LogSubscriptionFilterProvider) Check(
    ctx context.Context, req *lumirpc.CheckRequest) (*lumirpc.CheckResponse, error) {
    contract.Assert(req.GetType() == string(LogSubscriptionFilterToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return plugin.NewCheckResponse(err), nil
    }
    var failures []error
    if failure := p.ops.Check(ctx, obj, ""); failure != nil {
        failures = append(failures, failure)
    }
    unks := req.GetUnknowns()
    if !unks["name"] {
        if failure := p.ops.Check(ctx, obj, "name"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("LogSubscriptionFilter", "name", failure))
        }
    }
    if !unks["logGroupName"] {
        if failure := p.ops.Check(ctx, obj, "logGroupName"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("LogSubscriptionFilter", "logGroupName", failure))
        }
    }
    if !unks["filterPattern"] {
        if failure := p.ops.Check(ctx, obj, "filterPattern"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("LogSubscriptionFilter", "filterPattern", failure))
        }
    }
    if !unks["destinationArn"] {
        if failure := p.ops.Check(ctx, obj, "destinationArn"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("LogSubscriptionFilter", "destinationArn", failure))
        }
    }
    if !unks["roleArn"] {
        if failure := p.ops.Check(ctx, obj, "roleArn"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("LogSubscriptionFilter", "roleArn", failure))
        }
    }
    if !unks["distribution"] {
        if failure := p.ops.Check(ctx, obj, "distribution"); failure != nil {
            failures = append(failures,
                resource.NewPropertyError("LogSubscriptionFilter", "distribution", failure))
        }
    }
    if len(failures) > 0 {
        return plugin.NewCheckResponse(resource.NewErrors(failures)), nil
    }
    return plugin.NewCheckResponse(nil), nil
}

func (p *LogSubscriptionFilterProvider) Name(
    ctx context.Context, req *lumirpc.NameRequest) (*lumirpc.NameResponse, error) {
    contract.Assert(req.GetType() == string(LogSubscriptionFilterToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return nil, err
    }
    if obj.Name == nil || *obj.Name == "" {
        if req.Unknowns[LogSubscriptionFilter_Name] {
            return nil, errors.New("Name property cannot be computed from unknown outputs")
        }
        return nil, errors.New("Name property cannot be empty")
    }
    return &lumirpc.NameResponse{Name: *obj.Name}, nil
}

func (p *LogSubscriptionFilterProvider) Create(
    ctx context.Context, req *lumirpc.CreateRequest) (*lumirpc.CreateResponse, error) {
    contract.Assert(req.GetType() == string(LogSubscriptionFilterToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return nil, err
    }
    id, err := p.ops.Create(ctx, obj)
    if err != nil {
        return nil, err
    }
    return &lumirpc.CreateResponse{Id: string(id)}, nil
}

func (p *LogSubscriptionFilterProvider) Get(
    ctx context.Context, req *lumirpc.GetRequest) (*lumirpc.GetResponse, error) {
    contract.Assert(req.GetType() == string(LogSubscriptionFilterToken))
    id := resource.ID(req.GetId())
    obj, err := p.ops.Get(ctx, id)
    if err != nil {
        return nil, err
    }
    return &lumirpc.GetResponse{
        Properties: plugin.MarshalProperties(
            nil, resource.NewPropertyMap(obj), plugin.MarshalOptions{}),
    }, nil
}

func (p *LogSubscriptionFilterProvider) InspectChange(
    ctx context.Context, req *lumirpc.InspectChangeRequest) (*lumirpc.InspectChangeResponse, error) {
    contract.Assert(req.GetType() == string(LogSubscriptionFilterToken))
    id := resource.ID(req.GetId())
    old, oldprops, err := p.Unmarshal(req.GetOlds())
    if err != nil {
        return nil, err
    }
    new, newprops, err := p.Unmarshal(req.GetNews())
    if err != nil {
        return nil, err
    }
    var replaces []string
    diff := oldprops.Diff(newprops)
    if diff != nil {
        if diff.Changed("name") {
            replaces = append(replaces, "name")
        }
        if diff.Changed("logGroupName") {
            replaces = append(replaces, "logGroupName")
        }
        if diff.Changed("destinationArn") {
            replaces = append(replaces, "destinationArn")
        }
    }
    more, err := p.ops.InspectChange(ctx, id, old, new, diff)
    if err != nil {
        return nil, err
    }
    return &lumirpc.InspectChangeResponse{
        Replaces: append(replaces, more...),
    }, err
}

func (p *LogSubscriptionFilterProvider) Update(
    ctx context.Context, req *lumirpc.UpdateRequest) (*pbempty.Empty, error) {
    contract.Assert(req.GetType() == string(LogSubscriptionFilterToken))
    id := resource.ID(req.GetId())
    old, oldprops, err := p.Unmarshal(req.GetOlds())
    if err != nil {
        return nil, err
    }
    new, newprops, err := p.Unmarshal(req.GetNews())
    if err != nil {
        return nil, err
    }
    diff := oldprops.Diff(newprops)
    if err := p.ops.Update(ctx, id, old, new, diff); err != nil {
        return nil, err
    }
    return &pbempty.Empty{}, nil
}

func (p *LogSubscriptionFilterProvider) Delete(
    ctx context.Context, req *lumirpc.DeleteRequest) (*pbempty.Empty, error) {
    contract.Assert(req.GetType() == string(LogSubscriptionFilterToken))
    id := resource.ID(req.GetId())
    if err := p.ops.Delete(ctx, id); err != nil {
        return nil, err
    }
    return &pbempty.Empty{}, nil
}

func (p *LogSubscriptionFilterProvider) Unmarshal(
    v *pbstruct.Struct) (*LogSubscriptionFilter, resource.PropertyMap, error) {
    var obj LogSubscriptionFilter
    props := plugin.UnmarshalProperties(nil, v, plugin.MarshalOptions{RawResources: true})
    return &obj, props, mapper.MapIU(props.Mappable(), &obj)
}

/* Marshalable LogSubscriptionFilter structure(s) */

// LogSubscriptionFilter is a marshalable representation of its corresponding IDL type.
type LogSubscriptionFilter struct {
    Name *string `lumi:"name,optional"`
    LogGroupName string `lumi:"logGroupName"`
    FilterPattern string `lumi:"filterPattern"`
    DestinationArn string `lumi:"destinationArn"`
    RoleARN *__aws.ARN `lumi:"roleArn,optional"`
    Distribution *LogSubscriptionDistribution `lumi:"distribution,optional"`
    CreationTime *float64 `lumi:"creationTime,optional"`
}

// LogSubscriptionFilter's properties have constants to make dealing with diffs and property bags easier.
const (
    LogSubscriptionFilter_Name = "name"
    LogSubscriptionFilter_LogGroupName = "logGroupName"
    LogSubscriptionFilter_FilterPattern = "filterPattern"
    LogSubscriptionFilter_DestinationArn = "destinationArn"
    LogSubscriptionFilter_RoleARN = "roleArn"
    LogSubscriptionFilter_Distribution = "distribution"
    LogSubscriptionFilter_CreationTime = "creationTime"
)

/* Typedefs */

type (
    LogSubscriptionDistribution string
)

/* Constants */

const (
    ByLogStreamDistribution LogSubscriptionDistribution = "ByLogStream"
    RandomDistribution LogSubscriptionDistribution = "Random"
)


