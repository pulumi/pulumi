// *** WARNING: this file was generated by the Lumi IDL Compiler (LUMIDL). ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticbeanstalk

import (
    "errors"

    pbempty "github.com/golang/protobuf/ptypes/empty"
    pbstruct "github.com/golang/protobuf/ptypes/struct"
    "golang.org/x/net/context"

    "github.com/pulumi/lumi/pkg/resource"
    "github.com/pulumi/lumi/pkg/tokens"
    "github.com/pulumi/lumi/pkg/util/contract"
    "github.com/pulumi/lumi/pkg/util/mapper"
    "github.com/pulumi/lumi/sdk/go/pkg/lumirpc"
)

/* RPC stubs for Environment resource provider */

// EnvironmentToken is the type token corresponding to the Environment package type.
const EnvironmentToken = tokens.Type("aws:elasticbeanstalk/environment:Environment")

// EnvironmentProviderOps is a pluggable interface for Environment-related management functionality.
type EnvironmentProviderOps interface {
    Check(ctx context.Context, obj *Environment) ([]error, error)
    Create(ctx context.Context, obj *Environment) (resource.ID, error)
    Get(ctx context.Context, id resource.ID) (*Environment, error)
    InspectChange(ctx context.Context,
        id resource.ID, old *Environment, new *Environment, diff *resource.ObjectDiff) ([]string, error)
    Update(ctx context.Context,
        id resource.ID, old *Environment, new *Environment, diff *resource.ObjectDiff) error
    Delete(ctx context.Context, id resource.ID) error
}

// EnvironmentProvider is a dynamic gRPC-based plugin for managing Environment resources.
type EnvironmentProvider struct {
    ops EnvironmentProviderOps
}

// NewEnvironmentProvider allocates a resource provider that delegates to a ops instance.
func NewEnvironmentProvider(ops EnvironmentProviderOps) lumirpc.ResourceProviderServer {
    contract.Assert(ops != nil)
    return &EnvironmentProvider{ops: ops}
}

func (p *EnvironmentProvider) Check(
    ctx context.Context, req *lumirpc.CheckRequest) (*lumirpc.CheckResponse, error) {
    contract.Assert(req.GetType() == string(EnvironmentToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return resource.NewCheckResponse(err), nil
    }
    if failures, err := p.ops.Check(ctx, obj); err != nil {
        return nil, err
    } else if len(failures) > 0 {
        return resource.NewCheckResponse(resource.NewCheckError(failures)), nil
    }
    return resource.NewCheckResponse(nil), nil
}

func (p *EnvironmentProvider) Name(
    ctx context.Context, req *lumirpc.NameRequest) (*lumirpc.NameResponse, error) {
    contract.Assert(req.GetType() == string(EnvironmentToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return nil, err
    }
    if obj.Name == nil || *obj.Name == "" {
        if req.Unknowns[Environment_Name] {
            return nil, errors.New("Name property cannot be computed from unknown outputs")
        }
        return nil, errors.New("Name property cannot be empty")
    }
    return &lumirpc.NameResponse{Name: *obj.Name}, nil
}

func (p *EnvironmentProvider) Create(
    ctx context.Context, req *lumirpc.CreateRequest) (*lumirpc.CreateResponse, error) {
    contract.Assert(req.GetType() == string(EnvironmentToken))
    obj, _, err := p.Unmarshal(req.GetProperties())
    if err != nil {
        return nil, err
    }
    id, err := p.ops.Create(ctx, obj)
    if err != nil {
        return nil, err
    }
    return &lumirpc.CreateResponse{Id: string(id)}, nil
}

func (p *EnvironmentProvider) Get(
    ctx context.Context, req *lumirpc.GetRequest) (*lumirpc.GetResponse, error) {
    contract.Assert(req.GetType() == string(EnvironmentToken))
    id := resource.ID(req.GetId())
    obj, err := p.ops.Get(ctx, id)
    if err != nil {
        return nil, err
    }
    return &lumirpc.GetResponse{
        Properties: resource.MarshalProperties(
            nil, resource.NewPropertyMap(obj), resource.MarshalOptions{}),
    }, nil
}

func (p *EnvironmentProvider) InspectChange(
    ctx context.Context, req *lumirpc.InspectChangeRequest) (*lumirpc.InspectChangeResponse, error) {
    contract.Assert(req.GetType() == string(EnvironmentToken))
    id := resource.ID(req.GetId())
    old, oldprops, err := p.Unmarshal(req.GetOlds())
    if err != nil {
        return nil, err
    }
    new, newprops, err := p.Unmarshal(req.GetNews())
    if err != nil {
        return nil, err
    }
    var replaces []string
    diff := oldprops.Diff(newprops)
    if diff != nil {
        if diff.Changed("name") {
            replaces = append(replaces, "name")
        }
        if diff.Changed("application") {
            replaces = append(replaces, "application")
        }
        if diff.Changed("cnamePrefix") {
            replaces = append(replaces, "cnamePrefix")
        }
        if diff.Changed("environmentName") {
            replaces = append(replaces, "environmentName")
        }
        if diff.Changed("solutionStackName") {
            replaces = append(replaces, "solutionStackName")
        }
        if diff.Changed("tags") {
            replaces = append(replaces, "tags")
        }
        if diff.Changed("tier") {
            replaces = append(replaces, "tier")
        }
    }
    more, err := p.ops.InspectChange(ctx, id, old, new, diff)
    if err != nil {
        return nil, err
    }
    return &lumirpc.InspectChangeResponse{
        Replaces: append(replaces, more...),
    }, err
}

func (p *EnvironmentProvider) Update(
    ctx context.Context, req *lumirpc.UpdateRequest) (*pbempty.Empty, error) {
    contract.Assert(req.GetType() == string(EnvironmentToken))
    id := resource.ID(req.GetId())
    old, oldprops, err := p.Unmarshal(req.GetOlds())
    if err != nil {
        return nil, err
    }
    new, newprops, err := p.Unmarshal(req.GetNews())
    if err != nil {
        return nil, err
    }
    diff := oldprops.Diff(newprops)
    if err := p.ops.Update(ctx, id, old, new, diff); err != nil {
        return nil, err
    }
    return &pbempty.Empty{}, nil
}

func (p *EnvironmentProvider) Delete(
    ctx context.Context, req *lumirpc.DeleteRequest) (*pbempty.Empty, error) {
    contract.Assert(req.GetType() == string(EnvironmentToken))
    id := resource.ID(req.GetId())
    if err := p.ops.Delete(ctx, id); err != nil {
        return nil, err
    }
    return &pbempty.Empty{}, nil
}

func (p *EnvironmentProvider) Unmarshal(
    v *pbstruct.Struct) (*Environment, resource.PropertyMap, error) {
    var obj Environment
    props := resource.UnmarshalProperties(nil, v, resource.MarshalOptions{RawResources: true})
    return &obj, props, mapper.MapIU(props.Mappable(), &obj)
}

/* Marshalable Environment structure(s) */

// Environment is a marshalable representation of its corresponding IDL type.
type Environment struct {
    Name *string `lumi:"name,optional"`
    Application resource.ID `lumi:"application"`
    CNAMEPrefix *string `lumi:"cnamePrefix,optional"`
    Description *string `lumi:"description,optional"`
    EnvironmentName *string `lumi:"environmentName,optional"`
    OptionSettings *[]OptionSetting `lumi:"optionSettings,optional"`
    SolutionStackName *string `lumi:"solutionStackName,optional"`
    Tags *[]Tag `lumi:"tags,optional"`
    TemplateName *string `lumi:"templateName,optional"`
    Tier *Tier `lumi:"tier,optional"`
    Version *resource.ID `lumi:"version,optional"`
    EndpointURL string `lumi:"endpointURL,optional"`
    AllOptionSettings *[]OptionSetting `lumi:"allOptionSettings,optional"`
}

// Environment's properties have constants to make dealing with diffs and property bags easier.
const (
    Environment_Name = "name"
    Environment_Application = "application"
    Environment_CNAMEPrefix = "cnamePrefix"
    Environment_Description = "description"
    Environment_EnvironmentName = "environmentName"
    Environment_OptionSettings = "optionSettings"
    Environment_SolutionStackName = "solutionStackName"
    Environment_Tags = "tags"
    Environment_TemplateName = "templateName"
    Environment_Tier = "tier"
    Environment_Version = "version"
    Environment_EndpointURL = "endpointURL"
    Environment_AllOptionSettings = "allOptionSettings"
)

/* Marshalable OptionSetting structure(s) */

// OptionSetting is a marshalable representation of its corresponding IDL type.
type OptionSetting struct {
    Namespace string `lumi:"namespace"`
    OptionName string `lumi:"optionName"`
    Value string `lumi:"value"`
}

// OptionSetting's properties have constants to make dealing with diffs and property bags easier.
const (
    OptionSetting_Namespace = "namespace"
    OptionSetting_OptionName = "optionName"
    OptionSetting_Value = "value"
)

/* Marshalable Tag structure(s) */

// Tag is a marshalable representation of its corresponding IDL type.
type Tag struct {
    Key string `lumi:"key"`
    Value string `lumi:"value"`
}

// Tag's properties have constants to make dealing with diffs and property bags easier.
const (
    Tag_Key = "key"
    Tag_Value = "value"
)

/* Typedefs */

type (
    Tier string
)

/* Constants */

const (
    WebServerTier Tier = "WebServer::Standard::1.0"
    WorkerTier Tier = "Worker::SQS/HTTP::1.0"
)


