// *** WARNING: this file was generated by the Lumi IDL Compiler (LUMIDL). ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

/* tslint:disable:ordered-imports variable-name */
import * as lumi from "@lumi/lumi";

import {InternetGateway} from "./internetGateway";
import {RouteTable} from "./routeTable";
import {VPCGatewayAttachment} from "./vpcGatewayAttachment";

export class Route extends lumi.NamedResource implements RouteArgs {
    public readonly destinationCidrBlock: string;
    public readonly routeTable: RouteTable;
    public readonly internetGateway: InternetGateway;
    public readonly vpcGatewayAttachment: VPCGatewayAttachment;

    public static get(id: lumi.ID): Route {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Route[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: RouteArgs) {
        super(name);
        if (args.destinationCidrBlock === undefined) {
            throw new Error("Missing required argument 'destinationCidrBlock'");
        }
        this.destinationCidrBlock = args.destinationCidrBlock;
        if (args.routeTable === undefined) {
            throw new Error("Missing required argument 'routeTable'");
        }
        this.routeTable = args.routeTable;
        if (args.internetGateway === undefined) {
            throw new Error("Missing required argument 'internetGateway'");
        }
        this.internetGateway = args.internetGateway;
        if (args.vpcGatewayAttachment === undefined) {
            throw new Error("Missing required argument 'vpcGatewayAttachment'");
        }
        this.vpcGatewayAttachment = args.vpcGatewayAttachment;
    }
}

export interface RouteArgs {
    readonly destinationCidrBlock: string;
    readonly routeTable: RouteTable;
    readonly internetGateway: InternetGateway;
    readonly vpcGatewayAttachment: VPCGatewayAttachment;
}

