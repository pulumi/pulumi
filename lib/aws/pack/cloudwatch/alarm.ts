// *** WARNING: this file was generated by the Lumi IDL Compiler (LUMIDL). ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

/* tslint:disable:ordered-imports variable-name */
import * as lumi from "@lumi/lumi";

import {TopicSubscription} from "../sns/topic";

export let AverageStatistic: AlarmStatistic = "Average";
export let BitsMetric: AlarmMetric = "Bits";
export let BitsPerSecondMetric: AlarmMetric = "Bits/Second";
export let BytesMetric: AlarmMetric = "Bytes";
export let BytesPerSecondMetric: AlarmMetric = "Bytes/Second";
export let CountMetric: AlarmMetric = "Count";
export let CountPerSecondMetric: AlarmMetric = "Count/Second";
export let GigabitsMetric: AlarmMetric = "Gigabits";
export let GigabitsPerSecondMetric: AlarmMetric = "Gigabits/Second";
export let GigabytesMetric: AlarmMetric = "Gigabytes";
export let GigabytesPerSecondMetric: AlarmMetric = "Gigabytes/Second";
export let KilobitsMetric: AlarmMetric = "Kilobits";
export let KilobitsPerSecondMetric: AlarmMetric = "Kilobits/Second";
export let KilobytesMetric: AlarmMetric = "Kilobytes";
export let KilobytesPerSecondMetric: AlarmMetric = "Kilobytes/Second";
export let MaximumStatistic: AlarmStatistic = "Maximum";
export let MegabitsMetric: AlarmMetric = "Megabits";
export let MegabitsPerSecondMetric: AlarmMetric = "Megabits/Second";
export let MegabytesMetric: AlarmMetric = "Megabytes";
export let MegabytesPerSecondMetric: AlarmMetric = "Megabytes/Second";
export let MicrosecondsMetric: AlarmMetric = "Microseconds";
export let MillisecondsMetric: AlarmMetric = "Milliseconds";
export let MinimumStatistic: AlarmStatistic = "Minimum";
export let NoMetric: AlarmMetric = "None";
export let PercentMetric: AlarmMetric = "Percent";
export let SampleCountStatistic: AlarmStatistic = "SampleCount";
export let SecondsMetric: AlarmMetric = "Seconds";
export let SumStatistic: AlarmStatistic = "Sum";
export let TerabitsMetric: AlarmMetric = "Terabits";
export let TerabitsPerSecondMetric: AlarmMetric = "Terabits/Second";
export let TerabytesMetric: AlarmMetric = "Terabytes";
export let TerabytesPerSecondMetric: AlarmMetric = "Terabytes/Second";
export let ThresholdGreaterThan: AlarmComparisonOperator = "GreaterThanThreshold";
export let ThresholdGreaterThanOrEqualTo: AlarmComparisonOperator = "GreaterThanOrEqualToThreshold";
export let ThresholdLessThan: AlarmComparisonOperator = "LessThanThreshold";
export let ThresholdLessThanOrEqualTo: AlarmComparisonOperator = "LessThanOrEqualToThreshold";

export class ActionTarget extends lumi.NamedResource implements ActionTargetArgs {
    public readonly topicName?: string;
    public displayName?: string;
    public subscription?: TopicSubscription[];

    public static get(id: lumi.ID): ActionTarget {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): ActionTarget[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args?: ActionTargetArgs) {
        super(name);
        if (args !== undefined) {
            this.topicName = args.topicName;
            this.displayName = args.displayName;
            this.subscription = args.subscription;
        }
    }
}

export interface ActionTargetArgs {
    readonly topicName?: string;
    displayName?: string;
    subscription?: TopicSubscription[];
}

export class Alarm extends lumi.NamedResource implements AlarmArgs {
    public comparisonOperator: AlarmComparisonOperator;
    public evaluationPerids: number;
    public metricName: string;
    public namespace: string;
    public period: number;
    public statistic: AlarmStatistic;
    public threshold: number;
    public actionsEnabled?: boolean;
    public alarmActions?: ActionTarget[];
    public alarmDescription?: string;
    public readonly alarmName?: string;
    public dimensions?: AlarmDimension[];
    public insufficientDataActions?: ActionTarget[];
    public okActions?: ActionTarget[];
    public unit?: AlarmMetric;

    public static get(id: lumi.ID): Alarm {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Alarm[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: AlarmArgs) {
        super(name);
        if (args.comparisonOperator === undefined) {
            throw new Error("Missing required argument 'comparisonOperator'");
        }
        this.comparisonOperator = args.comparisonOperator;
        if (args.evaluationPerids === undefined) {
            throw new Error("Missing required argument 'evaluationPerids'");
        }
        this.evaluationPerids = args.evaluationPerids;
        if (args.metricName === undefined) {
            throw new Error("Missing required argument 'metricName'");
        }
        this.metricName = args.metricName;
        if (args.namespace === undefined) {
            throw new Error("Missing required argument 'namespace'");
        }
        this.namespace = args.namespace;
        if (args.period === undefined) {
            throw new Error("Missing required argument 'period'");
        }
        this.period = args.period;
        if (args.statistic === undefined) {
            throw new Error("Missing required argument 'statistic'");
        }
        this.statistic = args.statistic;
        if (args.threshold === undefined) {
            throw new Error("Missing required argument 'threshold'");
        }
        this.threshold = args.threshold;
        this.actionsEnabled = args.actionsEnabled;
        this.alarmActions = args.alarmActions;
        this.alarmDescription = args.alarmDescription;
        this.alarmName = args.alarmName;
        this.dimensions = args.dimensions;
        this.insufficientDataActions = args.insufficientDataActions;
        this.okActions = args.okActions;
        this.unit = args.unit;
    }
}

export interface AlarmArgs {
    comparisonOperator: AlarmComparisonOperator;
    evaluationPerids: number;
    metricName: string;
    namespace: string;
    period: number;
    statistic: AlarmStatistic;
    threshold: number;
    actionsEnabled?: boolean;
    alarmActions?: ActionTarget[];
    alarmDescription?: string;
    readonly alarmName?: string;
    dimensions?: AlarmDimension[];
    insufficientDataActions?: ActionTarget[];
    okActions?: ActionTarget[];
    unit?: AlarmMetric;
}

export type AlarmComparisonOperator =
    "GreaterThanThreshold" |
    "GreaterThanOrEqualToThreshold" |
    "LessThanThreshold" |
    "LessThanOrEqualToThreshold";

export interface AlarmDimension {
    name: string;
    value: any;
}

export type AlarmMetric =
    "Bits" |
    "Bits/Second" |
    "Bytes" |
    "Bytes/Second" |
    "Count" |
    "Count/Second" |
    "Gigabits" |
    "Gigabits/Second" |
    "Gigabytes" |
    "Gigabytes/Second" |
    "Kilobits" |
    "Kilobits/Second" |
    "Kilobytes" |
    "Kilobytes/Second" |
    "Megabits" |
    "Megabits/Second" |
    "Megabytes" |
    "Megabytes/Second" |
    "Microseconds" |
    "Milliseconds" |
    "None" |
    "Percent" |
    "Seconds" |
    "Terabits" |
    "Terabits/Second" |
    "Terabytes" |
    "Terabytes/Second";

export type AlarmStatistic =
    "Average" |
    "Maximum" |
    "Minimum" |
    "SampleCount" |
    "Sum";

