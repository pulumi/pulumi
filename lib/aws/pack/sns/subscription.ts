// *** WARNING: this file was generated by the Lumi IDL Compiler (LUMIDL). ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

/* tslint:disable:ordered-imports variable-name */
import * as lumi from "@lumi/lumi";

import {Topic} from "./topic";

export let ApplicationSubscription: Protocol = "application";
export let EmailJSONSubscription: Protocol = "email-json";
export let EmailSubscription: Protocol = "email";
export let HTTPSSubscription: Protocol = "https";
export let HTTSubscription: Protocol = "http";
export let LambdaSubscription: Protocol = "lambda";
export let SMSSubscription: Protocol = "sms";
export let SQSSubscription: Protocol = "sqs";

export type Protocol =
    "application" |
    "email-json" |
    "email" |
    "https" |
    "http" |
    "lambda" |
    "sms" |
    "sqs";

export class Subscription extends lumi.NamedResource implements SubscriptionArgs {
    public readonly topic: Topic;
    public readonly protocol: Protocol;
    public readonly endpoint: string;

    public static get(id: lumi.ID): Subscription {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Subscription[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(name: string, args: SubscriptionArgs) {
        super(name);
        if (args.topic === undefined) {
            throw new Error("Missing required argument 'topic'");
        }
        this.topic = args.topic;
        if (args.protocol === undefined) {
            throw new Error("Missing required argument 'protocol'");
        }
        this.protocol = args.protocol;
        if (args.endpoint === undefined) {
            throw new Error("Missing required argument 'endpoint'");
        }
        this.endpoint = args.endpoint;
    }
}

export interface SubscriptionArgs {
    readonly topic: Topic;
    readonly protocol: Protocol;
    readonly endpoint: string;
}

