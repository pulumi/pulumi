// *** WARNING: this file was generated by the Lumi IDL Compiler (LUMIDL). ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

/* tslint:disable:ordered-imports variable-name */
import * as lumi from "@lumi/lumi";

import {Bucket} from "./bucket";

export class Object extends lumi.Resource implements ObjectArgs {
    public readonly key: string;
    public readonly bucket: Bucket;
    public source: lumi.asset.Asset;
    public contentType?: string;
    public contentDisposition?: string;
    public cacheControl?: string;
    public contentEncoding?: string;
    public contentLanguage?: string;
    public contentLength?: number;

    public static get(id: lumi.ID): Object {
        return <any>undefined; // functionality provided by the runtime
    }

    public static query(q: any): Object[] {
        return <any>undefined; // functionality provided by the runtime
    }

    constructor(args: ObjectArgs) {
        super();
        if (args.key === undefined) {
            throw new Error("Missing required argument 'key'");
        }
        this.key = args.key;
        if (args.bucket === undefined) {
            throw new Error("Missing required argument 'bucket'");
        }
        this.bucket = args.bucket;
        if (args.source === undefined) {
            throw new Error("Missing required argument 'source'");
        }
        this.source = args.source;
        this.contentType = args.contentType;
        this.contentDisposition = args.contentDisposition;
        this.cacheControl = args.cacheControl;
        this.contentEncoding = args.contentEncoding;
        this.contentLanguage = args.contentLanguage;
        this.contentLength = args.contentLength;
    }
}

export interface ObjectArgs {
    readonly key: string;
    readonly bucket: Bucket;
    source: lumi.asset.Asset;
    contentType?: string;
    contentDisposition?: string;
    cacheControl?: string;
    contentEncoding?: string;
    contentLanguage?: string;
    contentLength?: number;
}

